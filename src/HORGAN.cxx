// generated by Fast Light User Interface Designer (fluid) version 1.0108

#include <libintl.h>
#include "HORGAN.h"
//Copyright (c) 2003-2004 Josep Andreu (Holborn)
//License: GNU GPL version 2
#include "horgand128.xpm"

Drawbar::Drawbar(int x,int y, int w, int h, const char *label):Fl_Slider(x,y,w,h,label) {
}

int Drawbar::handle(int event) {
  switch(event)
{

case FL_RELEASE:
{
draw();
Signal_for_Cb_Sliders=1;
do_callback();
return 1;
}


case FL_DRAG: 
{
Fl_Slider::handle(FL_DRAG,x(),y(),w(),h());
draw();
do_callback();
return 1;
}

case FL_SHORTCUT:
return 0;

default:
return 1;
}
}

Rueda::Rueda(int x,int y, int w, int h, const char *label):Fl_Dial(x,y,w,h,label) {
}

int Rueda::handle(int event) {
  switch(event)
{

case FL_RELEASE:
{
draw();
Signal_for_Cb_Sliders=1;
do_callback();
return 1;
}


case FL_DRAG: 
{
Fl_Dial::handle(FL_DRAG,x(),y(),w(),h());
draw();
do_callback();
return 1;
}

case FL_SHORTCUT:
return 0;

default:
return 1;
}
}

void HORGAN::cb_HORwindow_i(Fl_Double_Window* o, void*) {
  Guarda_Pref(0);
Pexitprogram=1;
o->hide();
exit(0);
}
void HORGAN::cb_HORwindow(Fl_Double_Window* o, void* v) {
  ((HORGAN*)(o->user_data()))->cb_HORwindow_i(o,v);
}

void HORGAN::cb_PANICO_i(Fl_Button*, void*) {
  hor->panic();
}
void HORGAN::cb_PANICO(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_PANICO_i(o,v);
}

void HORGAN::cb_MFile_i(Fl_Menu_*, void*) {
  Fl::focus(PANICO);
}
void HORGAN::cb_MFile(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_MFile_i(o,v);
}

void HORGAN::cb_New_i(Fl_Menu_*, void*) {
  hor->New();
ApagaTodo();
meteprog();
Actu();
hor->PutPrim();
sprintf(hor->temporal, "--"); 
DispNumber->label(hor->temporal);
CPrograma->value(0);
}
void HORGAN::cb_New(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_New_i(o,v);
}

void HORGAN::cb_Load_i(Fl_Menu_*, void*) {
  char *filename;
Fl::focus(PANICO);
filename=fl_file_chooser("Preset Load:","(*.hor)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".hor");
hor->loadfile(filename);
PutLoaded();
}
void HORGAN::cb_Load(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

void HORGAN::cb_Save_i(Fl_Menu_*, void*) {
  char *filename;
#define EXT ".hor"
filename=fl_file_chooser("Preset Save:","(*"EXT")",hor->a[0].Name,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT
hor->savefile(filename);
hor->PutPrim();
}
void HORGAN::cb_Save(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

void HORGAN::cb_Load1_i(Fl_Menu_* o, void*) {
  BLoad->do_callback(o);
}
void HORGAN::cb_Load1(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Load1_i(o,v);
}

void HORGAN::cb_Save1_i(Fl_Menu_* o, void*) {
  BSave->do_callback(o);
}
void HORGAN::cb_Save1(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

void HORGAN::cb_Load2_i(Fl_Menu_*, void*) {
  char *filename;
Fl::focus(PANICO);
filename=fl_file_chooser("Load:","(*.txt)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".txt");
hor->loadrhyt(filename);
meteritmos();
}
void HORGAN::cb_Load2(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Load2_i(o,v);
}

void HORGAN::cb_Save2_i(Fl_Menu_*, void*) {
  char *filename;
#define EXT ".txt"
filename=fl_file_chooser("Save:","(*"EXT")",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT
hor->saverhyt(filename);
}
void HORGAN::cb_Save2(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Save2_i(o,v);
}

void HORGAN::cb_About_i(Fl_Menu_*, void*) {
  aboutwindow->position(HORwindow->x()+200,HORwindow->y()+200);
aboutwindow->show();
put_icon(aboutwindow);
}
void HORGAN::cb_About(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_About_i(o,v);
}

void HORGAN::cb_E_i(Fl_Menu_*, void*) {
  HORwindow->do_callback();
}
void HORGAN::cb_E(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_E_i(o,v);
}

void HORGAN::cb_Undo_i(Fl_Menu_*, void*) {
  Undo();
}
void HORGAN::cb_Undo(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Undo_i(o,v);
}

void HORGAN::cb_Redo_i(Fl_Menu_*, void*) {
  Redo();
}
void HORGAN::cb_Redo(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Redo_i(o,v);
}

void HORGAN::cb_Synthesizer_i(Fl_Menu_*, void*) {
  ADSRwin->hide();




D_Freq->value(1);
D_Freq_F->value(1);
D_FFval->lstep(0.001);
D_Click_Freq->lstep(100);
D_Click_Freq2->lstep(100);


metesynth();

Fl_Preferences horgand (Fl_Preferences::USER, WEBSITE , PACKAGE);

int x,y;

horgand.get("Synth X",x,1);
horgand.get("Synth Y",y,1);

ADSRwin->position(x,y);
ADSRwin->show();
put_icon(ADSRwin);
}
void HORGAN::cb_Synthesizer(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Synthesizer_i(o,v);
}

void HORGAN::cb_MBank_i(Fl_Menu_*, void*) {
  int x,y;
Fl_Preferences horgand (Fl_Preferences::USER, WEBSITE , PACKAGE);
horgand.get("HORBank X",x,1);
horgand.get("HORBank Y",y,1);
HORBank->position(x,y);
HORBank->show();
put_icon(HORBank);
Fl::focus(BClose);
}
void HORGAN::cb_MBank(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_MBank_i(o,v);
}

void HORGAN::cb_Settings_i(Fl_Menu_*, void*) {
  MiraClientes();
MiraConfig();
Settingswindow->position(HORwindow->x(),HORwindow->y());
Settingswindow->show();
put_icon(Settingswindow);
Fl::focus(SClose);
}
void HORGAN::cb_Settings(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Settings_i(o,v);
}

Fl_Menu_Item HORGAN::menu_MenuPrincipal[] = {
 {gettext("&File"), 0,  (Fl_Callback*)HORGAN::cb_MFile, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&New..."), 0,  (Fl_Callback*)HORGAN::cb_New, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Load..."), 0,  (Fl_Callback*)HORGAN::cb_Load, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Save..."), 0,  (Fl_Callback*)HORGAN::cb_Save, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Load Bank..."), 0,  (Fl_Callback*)HORGAN::cb_Load1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Save Bank..."), 0,  (Fl_Callback*)HORGAN::cb_Save1, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Load Rhythm..."), 0,  (Fl_Callback*)HORGAN::cb_Load2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Save Rhythm..."), 0,  (Fl_Callback*)HORGAN::cb_Save2, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&About..."), 0,  (Fl_Callback*)HORGAN::cb_About, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("E&xit"), 0,  (Fl_Callback*)HORGAN::cb_E, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {gettext("&Edit"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Undo"), 0x4007a,  (Fl_Callback*)HORGAN::cb_Undo, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Redo"), 0x40072,  (Fl_Callback*)HORGAN::cb_Redo, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Synthesizer"), 0x40073,  (Fl_Callback*)HORGAN::cb_Synthesizer, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {gettext("&Bank"), 0x80062,  (Fl_Callback*)HORGAN::cb_MBank, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Settings"), 0x80073,  (Fl_Callback*)HORGAN::cb_Settings, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* HORGAN::MFile = HORGAN::menu_MenuPrincipal + 0;
Fl_Menu_Item* HORGAN::MEdit = HORGAN::menu_MenuPrincipal + 11;
Fl_Menu_Item* HORGAN::MBank = HORGAN::menu_MenuPrincipal + 16;

void HORGAN::cb_MT_i(Fl_Box*, void*) {
  // Refresh MIDI Input Level on GUI
if (LastMidiInLevel != MidiInLevel) VUI1->value(MidiInLevel);

      // Refresh Bar Lead of Drum Loops
if (hor->Rhythm_On != 0) if (BarLead != VUI2->value()) VUI2->value(BarLead);

      // Refresh Chord Names

if (changeNameChord == 1)
   {
    ACI->label(NameChord);
    changeNameChord = 0;
    }
      // If MIDI Program Change Message arrives change preset

if (CPrograma->active())
   {
     if (preset != 0)
        {
          PutCombi (preset);
          preset = 0;
        }

    } else preset = 0;
    
    
if (hor->cambiaDriver)
   {
      
   DMIN2->do_callback();   
   hor->cambiaDriver=0;   
      
   };
}
void HORGAN::cb_MT(Fl_Box* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_MT_i(o,v);
}

void HORGAN::cb_CF_i(Fl_Light_Button* o, void*) {
  if (o->value() != 0 ) {
CL->deactivate();
MFile->deactivate();
MBank->deactivate();
MEdit->deactivate();
CPrograma->deactivate();
}
else {
CL->activate();
CPrograma->activate();
MFile->activate();
MBank->activate();
MEdit->activate();
}

if ( o->value() != 0 )
{
 
 GetPrim();
} 
else
{
UndoCount++;
Undo();
};
}
void HORGAN::cb_CF(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_CF_i(o,v);
}

void HORGAN::cb_CL_i(Fl_Light_Button* o, void*) {
  if (o->value() != 0 ) {
CF->deactivate();
MFile->deactivate();
MBank->deactivate();
MEdit->deactivate();
CPrograma->deactivate();
}
else{

CF->activate();
CPrograma->activate();
MFile->activate();
MBank->activate();
MEdit->activate();
}

if ( o->value() != 0 ) Undo(); else Redo();
}
void HORGAN::cb_CL(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_CL_i(o,v);
}

void HORGAN::cb_VUI1_i(Fl_Slider* o, void*) {
  o->value(MidiInLevel);
}
void HORGAN::cb_VUI1(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_VUI1_i(o,v);
}

void HORGAN::cb_DMIN1_i(Fl_Box* o, void*) {
  o->label(hor->MID);
}
void HORGAN::cb_DMIN1(Fl_Box* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_DMIN1_i(o,v);
}

void HORGAN::cb_Transpose_i(Fl_Counter* o, void*) {
  hor->transpose = (int) o->value();
calbtrans();
Actu();
}
void HORGAN::cb_Transpose(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Transpose_i(o,v);
}

void HORGAN::cb_Master_i(Drawbar* o, void*) {
  hor->Master_Volume = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_Master(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Master_i(o,v);
}

void HORGAN::cb_Nombre_i(Fl_Input* o, void*) {
  hor->a[0].nombre=(char*) o->value();
strncpy(hor->a[0].Name,hor->a[0].nombre,24);
Actu();
}
void HORGAN::cb_Nombre(Fl_Input* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Nombre_i(o,v);
}

void HORGAN::cb_MasterT_i(Fl_Counter* o, void*) {
  hor->mastertune = 1 + (float) (o->value() / 1600);
calbtune();
}
void HORGAN::cb_MasterT(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_MasterT_i(o,v);
}

void HORGAN::cb_V1_i(Drawbar* o, void*) {
  hor->a[0].Operator[1].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V1(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V1_i(o,v);
}

void HORGAN::cb_V2_i(Drawbar* o, void*) {
  hor->a[0].Operator[2].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V2(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V2_i(o,v);
}

void HORGAN::cb_V3_i(Drawbar* o, void*) {
  hor->a[0].Operator[3].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V3(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V3_i(o,v);
}

void HORGAN::cb_V4_i(Drawbar* o, void*) {
  hor->a[0].Operator[4].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V4(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V4_i(o,v);
}

void HORGAN::cb_V5_i(Drawbar* o, void*) {
  hor->a[0].Operator[5].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V5(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V5_i(o,v);
}

void HORGAN::cb_V6_i(Drawbar* o, void*) {
  hor->a[0].Operator[6].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V6(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V6_i(o,v);
}

void HORGAN::cb_V7_i(Drawbar* o, void*) {
  hor->a[0].Operator[7].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V7(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V7_i(o,v);
}

void HORGAN::cb_V8_i(Drawbar* o, void*) {
  hor->a[0].Operator[8].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V8(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V8_i(o,v);
}

void HORGAN::cb_V9_i(Drawbar* o, void*) {
  hor->a[0].Operator[9].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V9(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V9_i(o,v);
}

void HORGAN::cb_V10_i(Drawbar* o, void*) {
  hor->a[0].Operator[10].volumen = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_V10(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_V10_i(o,v);
}

void HORGAN::cb_Detune_i(Rueda* o, void*) {
  hor->a[0].detune = (float) o->value();
D_FFval->value(hor->a[0].Operator[(int)D_Freq_F->value()].harmonic_fine);
int i;
float k;
for (i=1; i<=10; i++)
{

k = (16 -hor->a[0].Operator[i].harmonic);
if (k==0) k=1.0;

hor->a[0].Operator[i].harmonic_fine = (float) ((o->value()) / (k * i * 1000.0));
 
}
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_Detune(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Detune_i(o,v);
}

void HORGAN::cb_LFOSpeed_i(Rueda* o, void*) {
  hor->a[0].Rotary_LFO_Speed = (float) o->value();
if (hor->a[0].Speed_Sync) Syncronize(2,(float) o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_LFOSpeed(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_LFOSpeed_i(o,v);
}

void HORGAN::cb_LFOPitch_i(Rueda* o, void*) {
  hor->a[0].LFOpitch = (float) o->value();
hor->Calc_LFO_Frequency();
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_LFOPitch(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_LFOPitch_i(o,v);
}

void HORGAN::cb_PLFOSpeed_i(Rueda* o, void*) {
  hor->a[0].Pitch_LFO_Speed = (float) o->value();

if (hor->a[0].Speed_Sync) Syncronize(1,(float) o->value()); 

if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_PLFOSpeed(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_PLFOSpeed_i(o,v);
}

void HORGAN::cb_PLFODelay_i(Rueda* o, void*) {
  hor->a[0].Pitch_LFO_Delay = (float) o->value() / 10;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_PLFODelay(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_PLFODelay_i(o,v);
}

void HORGAN::cb_EchoVol_i(Fl_Counter* o, void*) {
  hor->a[0].Delay_Volume = (float) o->value() / 100;
Actu();
}
void HORGAN::cb_EchoVol(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_EchoVol_i(o,v);
}

void HORGAN::cb_EchoDelay_i(Fl_Counter* o, void*) {
  hor->a[0].Delay_Delay = (float) o->value() * 65100;
Actu();
}
void HORGAN::cb_EchoDelay(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_EchoDelay_i(o,v);
}

void HORGAN::cb_H1_i(Fl_Slider* o, void*) {
  hor->a[0].Operator[1].harmonic = (int) o->value();
NV1->value(hor->lasfreq[(int) o->value()]);

Actu();
}
void HORGAN::cb_H1(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H1_i(o,v);
}

void HORGAN::cb_H2_i(Fl_Slider* o, void*) {
  hor->a[0].Operator[2].harmonic = (int) o->value();
NV2->value(hor->lasfreq[(int) o->value()]);
Actu();
}
void HORGAN::cb_H2(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H2_i(o,v);
}

void HORGAN::cb_H3_i(Fl_Slider* o, void*) {
  hor->a[0].Operator[3].harmonic = (int) o->value();
NV3->value(hor->lasfreq[(int) o->value()]);

Actu();
}
void HORGAN::cb_H3(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H3_i(o,v);
}

void HORGAN::cb_H4_i(Fl_Slider* o, void*) {
  hor->a[0].Operator[4].harmonic = (int) o->value();
NV4->value(hor->lasfreq[(int) o->value()]);

Actu();
}
void HORGAN::cb_H4(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H4_i(o,v);
}

void HORGAN::cb_H5_i(Fl_Slider* o, void*) {
  hor->a[0].Operator[5].harmonic = (int) o->value();
NV5->value(hor->lasfreq[(int) o->value()]);
Actu();
}
void HORGAN::cb_H5(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H5_i(o,v);
}

void HORGAN::cb_H6_i(Fl_Slider* o, void*) {
  hor->a[0].Operator[6].harmonic = (int) o->value();
NV6->value(hor->lasfreq[(int) o->value()]);
Actu();
}
void HORGAN::cb_H6(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H6_i(o,v);
}

void HORGAN::cb_H7_i(Fl_Slider* o, void*) {
  hor->a[0].Operator[7].harmonic = (int) o->value();
NV7->value(hor->lasfreq[(int) o->value()]);

Actu();
}
void HORGAN::cb_H7(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H7_i(o,v);
}

void HORGAN::cb_H8_i(Fl_Slider* o, void*) {
  hor->a[0].Operator[8].harmonic = (int) o->value();
NV8->value(hor->lasfreq[(int) o->value()]);

Actu();
}
void HORGAN::cb_H8(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H8_i(o,v);
}

void HORGAN::cb_H9_i(Fl_Slider* o, void*) {
  hor->a[0].Operator[9].harmonic = (int) o->value();
NV9->value(hor->lasfreq[(int) o->value()]);
Actu();
}
void HORGAN::cb_H9(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H9_i(o,v);
}

void HORGAN::cb_H10_i(Fl_Slider* o, void*) {
  hor->a[0].Operator[10].harmonic = (int) o->value();
NV10->value(hor->lasfreq[(int) o->value()]);
Actu();
}
void HORGAN::cb_H10(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_H10_i(o,v);
}

void HORGAN::cb_Rota_i(Fl_Button* o, void*) {
  hor->a[0].E_Rotary_On=o->value();
Actu();
}
void HORGAN::cb_Rota(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Rota_i(o,v);
}

void HORGAN::cb_ELFOSpeed_i(Rueda* o, void*) {
  hor->a[0].Chorus_LFO_Speed = (float) o->value();
if (hor->a[0].Speed_Sync) Syncronize(3,(float) o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_ELFOSpeed(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_ELFOSpeed_i(o,v);
}

void HORGAN::cb_ELFOAmplitude_i(Drawbar* o, void*) {
  hor->a[0].Chorus_LFO_Amplitude = (float) o->value();
hor->Calc_Chorus_LFO_Frequency();
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_ELFOAmplitude(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_ELFOAmplitude_i(o,v);
}

void HORGAN::cb_POPO_i(Drawbar* o, void*) {
  hor->a[0].Chorus_Delay = (float) o->value();

if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_POPO(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_POPO_i(o,v);
}

void HORGAN::cb_ChorVol_i(Fl_Counter* o, void*) {
  hor->a[0].Chorus_Volume = (float) o->value() / 100.0;
Actu();
}
void HORGAN::cb_ChorVol(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_ChorVol_i(o,v);
}

void HORGAN::cb_Split_i(Fl_Button* o, void*) {
  hor->split=o->value();
}
void HORGAN::cb_Split(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Split_i(o,v);
}

void HORGAN::cb_DMIN2_i(Fl_Box* o, void*) {
  switch (hor->Salida)
{
 case 1:
        o->label("OSS");
        break;
 case 2:
        o->label("Alsa");
        break;
 case 3:
        o->label("Jack");
        break;
};
}
void HORGAN::cb_DMIN2(Fl_Box* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_DMIN2_i(o,v);
}

void HORGAN::cb_EchoOn_i(Fl_Button* o, void*) {
  hor->a[0].E_Delay_On =  o->value();
hor->Clean_Buffer_Effects();
Actu();
}
void HORGAN::cb_EchoOn(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_EchoOn_i(o,v);
}

void HORGAN::cb_ChorusOn_i(Fl_Button* o, void*) {
  hor->a[0].E_Chorus_On =  o->value();
hor->Clean_Buffer_Effects();
Actu();
}
void HORGAN::cb_ChorusOn(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_ChorusOn_i(o,v);
}

void HORGAN::cb_R1_i(Fl_Button*, void*) {
  hor->a[0].Reverb_Preset = 1;
hor->PutReverb(1);
Actu();
}
void HORGAN::cb_R1(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R1_i(o,v);
}

void HORGAN::cb_R2_i(Fl_Button*, void*) {
  hor->a[0].Reverb_Preset = 2;
hor->PutReverb(2);
Actu();
}
void HORGAN::cb_R2(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R2_i(o,v);
}

void HORGAN::cb_R3_i(Fl_Button*, void*) {
  hor->a[0].Reverb_Preset = 3;
hor->PutReverb(3);
Actu();
}
void HORGAN::cb_R3(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R3_i(o,v);
}

void HORGAN::cb_R4_i(Fl_Button*, void*) {
  hor->a[0].Reverb_Preset = 4;
hor->PutReverb(4);
Actu();
}
void HORGAN::cb_R4(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R4_i(o,v);
}

void HORGAN::cb_R5_i(Fl_Button*, void*) {
  hor->a[0].Reverb_Preset = 5;
hor->PutReverb(5);
Actu();
}
void HORGAN::cb_R5(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R5_i(o,v);
}

void HORGAN::cb_R6_i(Fl_Button*, void*) {
  hor->a[0].Reverb_Preset = 6;
hor->PutReverb(6);
Actu();
}
void HORGAN::cb_R6(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R6_i(o,v);
}

void HORGAN::cb_R7_i(Fl_Button*, void*) {
  hor->a[0].Reverb_Preset = 7;
hor->PutReverb(7);
Actu();
}
void HORGAN::cb_R7(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R7_i(o,v);
}

void HORGAN::cb_R8_i(Fl_Button*, void*) {
  hor->a[0].Reverb_Preset = 8;
hor->PutReverb(8);
Actu();
}
void HORGAN::cb_R8(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_R8_i(o,v);
}

void HORGAN::cb_Rev_i(Fl_Button* o, void*) {
  if (o->value()== 0) 
{
hor->a[0].E_Reverb_On= 0;
R1->value(0);
R2->value(0);
R3->value(0);
R4->value(0);
R5->value(0);
R6->value(0);
R7->value(0);
R8->value(0);
R1->deactivate();
R2->deactivate();
R3->deactivate();
R4->deactivate();
R5->deactivate();
R6->deactivate();
R7->deactivate();
R8->deactivate();


}
else
{
hor->a[0].E_Reverb_On = 1;
R1->activate();
R2->activate();
R3->activate();
R4->activate();
R5->activate();
R6->activate();
R7->activate();
R8->activate();
if (hor->a[0].Reverb_Preset==0) hor->a[0].Reverb_Preset = 1;

switch((int) hor->a[0].Reverb_Preset)
{
case 1:
R1->setonly();
break;
case 2:
R2->setonly();
break;
case 3:
R3->setonly();
break;
case 4:
R4->setonly();
break;
case 5:
R5->setonly();
break;
case 6:
R6->setonly();
break;
case 7:
R7->setonly();
break;
case 8:
R8->setonly();
break;
}
}
hor->Clean_Buffer_Effects();
Actu();
}
void HORGAN::cb_Rev(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Rev_i(o,v);
}

void HORGAN::cb_RitVol_i(Fl_Slider* o, void*) {
  hor->Rhythm_Volume = o->value();
}
void HORGAN::cb_RitVol(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RitVol_i(o,v);
}

void HORGAN::cb_Tempo_i(Fl_Dial* o, void*) {
  hor->tempo = (float) o->value();
hor->frame_total_size = (int) (hor->tempo * hor->sfinfo.frames);
hor->fractional_position = hor->frame_total_size /(4 * hor->quarter_note * hor->bars);
}
void HORGAN::cb_Tempo(Fl_Dial* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Tempo_i(o,v);
}

void HORGAN::cb_VUI2_i(Fl_Slider* o, void*) {
  o->value(BarLead);
}
void HORGAN::cb_VUI2(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_VUI2_i(o,v);
}

void HORGAN::cb_RitOn_i(Fl_Button* o, void*) {
  StStRiton->value(o->value());
BarLead = 0;
hor->Rhythm_On =  o->value();
VUI2->value(0);
}
void HORGAN::cb_RitOn(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RitOn_i(o,v);
}

void HORGAN::cb_StStRiton_i(Fl_Button* o, void*) {
  if (Selected_Rhythm != 0)
{
// int readcounts = sf_seek (hor->infile, 0, SEEK_SET);
RitOn->value(o->value());
BarLead = 0;
hor->Rhythm_On =  o->value();
}

VUI2->value(0);
}
void HORGAN::cb_StStRiton(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_StStRiton_i(o,v);
}

void HORGAN::cb_Rit1_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 1;
if (Fl::event_button()==3) 
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit1(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit1_i(o,v);
}

void HORGAN::cb_Rit2_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 2;
if (Fl::event_button()==3)
{
 GetRit(Selected_Rhythm);
 EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit2(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit2_i(o,v);
}

void HORGAN::cb_Rit3_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 3;
if (Fl::event_button()==3)
{
 GetRit(Selected_Rhythm);
 EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit3(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit3_i(o,v);
}

void HORGAN::cb_Rit4_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 4;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit4(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit4_i(o,v);
}

void HORGAN::cb_Rit5_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 5;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit5(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit5_i(o,v);
}

void HORGAN::cb_Rit6_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 6;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit6(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit6_i(o,v);
}

void HORGAN::cb_Rit7_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 7;
if (Fl::event_button()==3) 
{
EditRit(Selected_Rhythm);
GetRit(Selected_Rhythm);
}

if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit7(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit7_i(o,v);
}

void HORGAN::cb_Rit8_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 8;
if (Fl::event_button()==3)
{
EditRit(Selected_Rhythm);
GetRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit8(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit8_i(o,v);
}

void HORGAN::cb_Rit9_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 9;
if (Fl::event_button()==3)
{
EditRit(Selected_Rhythm);
GetRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit9(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit9_i(o,v);
}

void HORGAN::cb_Rit10_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 10;
if (Fl::event_button()==3)
{
EditRit(Selected_Rhythm);
GetRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit10(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit10_i(o,v);
}

void HORGAN::cb_Rit11_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 11;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit11(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit11_i(o,v);
}

void HORGAN::cb_Rit12_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 12;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit12(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit12_i(o,v);
}

void HORGAN::cb_Rit13_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 13;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit13(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit13_i(o,v);
}

void HORGAN::cb_Rit14_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 14;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit14(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit14_i(o,v);
}

void HORGAN::cb_Rit15_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 15;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit15(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit15_i(o,v);
}

void HORGAN::cb_Rit16_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 16;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit16(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit16_i(o,v);
}

void HORGAN::cb_Rit17_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 17;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit17(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit17_i(o,v);
}

void HORGAN::cb_Rit18_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 18;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit18(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit18_i(o,v);
}

void HORGAN::cb_Rit19_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 19;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit19(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit19_i(o,v);
}

void HORGAN::cb_Rit20_i(Fl_Button* o, void*) {
  ApagaTodo();
o->value(1);
Selected_Rhythm = 20;
if (Fl::event_button()==3)
{
GetRit(Selected_Rhythm);
EditRit(Selected_Rhythm);
}
if (Fl::event_button()==1) GetRit(Selected_Rhythm);
}
void HORGAN::cb_Rit20(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Rit20_i(o,v);
}

void HORGAN::cb_BassVol_i(Fl_Slider* o, void*) {
  hor->Bass_Volume = o->value();
}
void HORGAN::cb_BassVol(Fl_Slider* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_BassVol_i(o,v);
}

void HORGAN::cb_Basson_i(Fl_Button* o, void*) {
  //int readcounts = sf_seek (hor->infileb, 0, SEEK_SET);
BarLead = 0;
hor->split = o->value();
Split->value(o->value());
hor->Bass_On =  o->value();
}
void HORGAN::cb_Basson(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Basson_i(o,v);
}

void HORGAN::cb_Bass1_i(Fl_Button*, void*) {
  SetBassType(0);
}
void HORGAN::cb_Bass1(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Bass1_i(o,v);
}

void HORGAN::cb_Bass2_i(Fl_Button*, void*) {
  SetBassType(1);
}
void HORGAN::cb_Bass2(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Bass2_i(o,v);
}

void HORGAN::cb_Bass3_i(Fl_Button*, void*) {
  SetBassType(2);
}
void HORGAN::cb_Bass3(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_Bass3_i(o,v);
}

void HORGAN::cb_CPrograma_i(Fl_Counter* o, void*) {
  hor->cpreset = (int) o->value();
PutCombi(hor->cpreset);
Actu();
}
void HORGAN::cb_CPrograma(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_CPrograma_i(o,v);
}

void HORGAN::cb_OMaster_i(Drawbar* o, void*) {
  hor->a[0].Organ_Master_Volume = (float) o->value() / 100.0;
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_OMaster(Drawbar* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_OMaster_i(o,v);
}

void HORGAN::cb_Mar1_i(Fl_Light_Button* o, void*) {
  hor->a[0].Operator[1].marimba=o->value();
}
void HORGAN::cb_Mar1(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar1_i(o,v);
}

void HORGAN::cb_Mar2_i(Fl_Light_Button* o, void*) {
  hor->a[0].Operator[2].marimba=o->value();
}
void HORGAN::cb_Mar2(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar2_i(o,v);
}

void HORGAN::cb_Mar3_i(Fl_Light_Button* o, void*) {
  hor->a[0].Operator[3].marimba=o->value();
}
void HORGAN::cb_Mar3(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar3_i(o,v);
}

void HORGAN::cb_Mar4_i(Fl_Light_Button* o, void*) {
  hor->a[0].Operator[4].marimba=o->value();
}
void HORGAN::cb_Mar4(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar4_i(o,v);
}

void HORGAN::cb_Mar5_i(Fl_Light_Button* o, void*) {
  hor->a[0].Operator[5].marimba=o->value();
}
void HORGAN::cb_Mar5(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar5_i(o,v);
}

void HORGAN::cb_Mar6_i(Fl_Light_Button* o, void*) {
  hor->a[0].Operator[6].marimba=o->value();
}
void HORGAN::cb_Mar6(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar6_i(o,v);
}

void HORGAN::cb_Mar7_i(Fl_Light_Button* o, void*) {
  hor->a[0].Operator[7].marimba=o->value();
}
void HORGAN::cb_Mar7(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar7_i(o,v);
}

void HORGAN::cb_Mar8_i(Fl_Light_Button* o, void*) {
  hor->a[0].Operator[8].marimba=o->value();
}
void HORGAN::cb_Mar8(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar8_i(o,v);
}

void HORGAN::cb_Mar9_i(Fl_Light_Button* o, void*) {
  hor->a[0].Operator[9].marimba=o->value();
}
void HORGAN::cb_Mar9(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar9_i(o,v);
}

void HORGAN::cb_Mar10_i(Fl_Light_Button* o, void*) {
  hor->a[0].Operator[10].marimba=o->value();
}
void HORGAN::cb_Mar10(Fl_Light_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Mar10_i(o,v);
}

void HORGAN::cb_BClick_i(Fl_Button* o, void*) {
  hor->a[0].Click=o->value();
Actu();
}
void HORGAN::cb_BClick(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_BClick_i(o,v);
}

void HORGAN::cb_BSync_Speed_i(Fl_Button* o, void*) {
  hor->a[0].Speed_Sync=o->value();
if(o->value()) Syncronize(0,0);
Actu();
}
void HORGAN::cb_BSync_Speed(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_BSync_Speed_i(o,v);
}

void HORGAN::cb_aboutwindow_i(Fl_Double_Window*, void*) {
  aboutwindow->hide();
}
void HORGAN::cb_aboutwindow(Fl_Double_Window* o, void* v) {
  ((HORGAN*)(o->user_data()))->cb_aboutwindow_i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_horgand128[] = {
"128 128 189 2",
"#s c None",
"Qt c None",
"aP c #000000",
"#. c #020505",
"#i c #050b0c",
".Y c #0f1416",
"#c c #120400",
"#3 c #130704",
".9 c #13100f",
"aT c #1a0601",
"ac c #1b0904",
".8 c #1c120e",
".X c #1d1611",
".2 c #1d2222",
"## c #22272a",
"al c #230902",
"#V c #24130c",
".W c #241b17",
".0 c #252322",
"#a c #2a3033",
"aO c #2e1007",
"#j c #2e1c17",
".1 c #2e3330",
"#o c #30150a",
"#d c #302926",
"au c #311912",
"ak c #313535",
"#k c #332317",
"aN c #361307",
"aM c #381609",
"aq c #381b0f",
"#b c #38332f",
".Z c #383c3b",
".3 c #392a24",
"aK c #3f190a",
".x c #3f2f2b",
"aL c #401c0e",
"#9 c #422317",
"#l c #422b22",
"#p c #43291a",
".y c #443d3a",
"ag c #44494a",
"as c #4a1c0c",
"ao c #4b2617",
"#h c #4b352c",
"af c #4b4f4c",
"an c #4c2e22",
"#q c #4c3425",
"#B c #4c4843",
"aJ c #511d0c",
"ap c #525356",
"#K c #533422",
"aH c #542b19",
"#e c #545857",
".v c #553e36",
"#u c #554f4c",
"aw c #57331b",
"aj c #575c5c",
".w c #5a3b2b",
"#F c #5b4530",
".V c #5b493f",
"aI c #5c2d19",
".u c #5c4139",
"a# c #5c5857",
"ad c #5e3522",
"#r c #5e6263",
"ax c #5f331b",
"#A c #5f4539",
"ay c #662f1a",
".t c #664839",
"aF c #673722",
"#2 c #673e2e",
".4 c #676463",
"#U c #676b6a",
"aG c #682d15",
"av c #683d24",
".I c #6a4b3c",
".r c #6e5249",
"aE c #6f3721",
"#T c #6f6c69",
"#S c #6f7374",
"az c #703d24",
"at c #703f2c",
"#1 c #70472e",
".s c #705143",
"#g c #705a53",
".O c #775349",
"aB c #7a441f",
"ar c #7a472c",
".H c #7a594c",
".N c #7a645f",
"#4 c #7b7876",
"#0 c #7c5834",
"aA c #7d3e24",
"aC c #7d502b",
".q c #7d5e51",
"#8 c #80513a",
"#Q c #80807e",
"aD c #814826",
"#C c #816a59",
"#P c #825c3f",
".p c #826356",
"ab c #828585",
"aS c #834a2c",
".o c #83665c",
"#G c #836c61",
"aQ c #854f2e",
"aR c #8e512f",
"aV c #905236",
"aU c #90553e",
".n c #906e60",
"aW c #915939",
"aa c #918888",
"aY c #955a2f",
".G c #95654e",
"#O c #959590",
"aX c #965f3c",
"#f c #967870",
"#n c #968179",
"#7 c #975d40",
"#Z c #976d51",
"ai c #989c9e",
"a2 c #996b3e",
".l c #997767",
"aZ c #9e674c",
"#W c #9f8163",
".k c #a07966",
"a0 c #a1633a",
"ah c #a3a7a8",
".i c #a48173",
"#v c #a4a1a0",
".m c #a57861",
"a5 c #a66d40",
".F c #a77f69",
"#N c #a79a8f",
"a1 c #a87050",
".g c #a88b84",
"#w c #abaaa6",
"#R c #abafb0",
".j c #ac8775",
".M c #ac8b7b",
"#z c #ac957c",
"#m c #ada789",
"a6 c #b27343",
".h c #b48c79",
"#6 c #b57954",
".U c #b5957b",
".L c #b59885",
".f c #b99c89",
".d c #b9a29e",
".a c #bbaca3",
"ae c #bbbcbb",
"#Y c #bc8263",
"#M c #bd9a67",
".D c #bd9d89",
".e c #bfa18f",
"#x c #bfc3c5",
".6 c #c0a793",
".E c #c5a28e",
".c c #c6b6b3",
".C c #c8a893",
"a4 c #c98e6f",
".b c #c9ac9b",
"#t c #c9c0ba",
".J c #c9c5c6",
"#L c #caad77",
"#H c #cab18a",
"#X c #ce9a75",
".B c #ceb1a3",
"#D c #cecfce",
".A c #d1baa9",
"#I c #d3bd88",
".# c #d3d7d9",
"a3 c #d8a57f",
".7 c #dac2b4",
"am c #dad9da",
".K c #ddaa88",
".P c #decbba",
".R c #e2e2e0",
"#5 c #e6eaed",
".z c #e8d4c8",
"#J c #edecee",
".T c #efe6de",
".S c #efe9da",
"a. c #eff3f8",
".5 c #f6f7f3",
"#y c #f6fbff",
"#E c #fefdf8",
".Q c #ffffff",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.#.a.b.c.a.d.\
d.e.e.d.f.f.f.f.e.g.e.f.g.g.h.g.g.i.i.i.j.k.k.k.i.j.i.k.l.l.l.m.l.l.l.n.n.o.p.\
p.q.q.r.r.s.t.t.u.v.u.w.v.v.x.yQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.z.c.A.B.B.B.\
b.B.C.C.e.e.D.E.E.E.e.E.d.E.e.g.h.h.h.h.h.j.F.i.j.F.i.F.k.k.k.k.m.k.l.k.k.l.l.\
n.G.n.p.G.q.H.H.r.I.I.t.I.t.u.yQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.J.b.B.B.K.b.\
B.b.C.E.E.D.D.E.E.D.D.D.E.D.L.D.h.h.h.M.h.j.h.j.i.i.k.i.F.i.k.k.k.l.m.m.l.m.l.\
n.n.p.G.N.q.H.O.O.r.t.u.t.u.v.yQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.P.b.b.b.b.b.\
b.C.C.E.E.e.D.E.E.E.D.D.D.D.h.h.L.g.h.h.j.j.j.j.i.F.i.F.k.k.k.l.l.l.l.n.n.l.n.\
G.p.G.q.O.O.O.r.r.t.u.u.u.v.v.yQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.Q.R.S.z.R.S.z.T.T.T.T.S.S.c.E.C.C.b.b.\
C.C.E.E.e.D.D.E.E.E.D.D.f.h.L.U.M.h.h.M.j.j.F.F.i.i.F.i.k.F.k.l.l.l.n.n.o.p.p.\
p.H.H.O.O.O.r.O.I.V.r.I.r.v.v.x.W.X.Y.Z.0.1.1.2.W.x.3.4QtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.5.6.B.B.B.B.B.B.7.B.B.B.B.b.E.E.C.C.C.\
C.e.E.E.D.D.h.E.h.d.D.h.U.L.M.M.M.M.M.j.j.j.i.i.i.i.F.F.k.k.l.l.l.n.o.G.p.p.p.\
q.H.H.O.O.I.r.I.r.r.t.t.u.v.y.y.8.9#.##.Y#a#b.X#c#d.3#eQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.5.C.7.7.7.7.7.7.7.7.7.7.7.a.e.C.C.C.e.\
b.e.e.d.D.f.f.D.e.L.D.h.L.g.M.M.i.M.M.i.i.i.i.i.i.i.k.m.l#f#f.n#f.n.o.o.N.q.q.\
q.O#g.r.r.r.r.V.r.r.u.V.u.v.y#h.W#i#i.Y.0#b#b#j.W#k#j#eQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.Q.A.P.P.P.z.z.S.z.z.z.z.z.6.e.e.e.e.e.\
e.6.e.f.f.e.e.e.f.f.g.f.L.h.g.M.i.i.i.i.i.i.i.i.i.k#f#f.l#f.l#f#f.n.o.o.q.N.q.\
N.O#g.O.r.r.r.r.V.u.r.u.u.v.v#h#j.8.9.8.W#d.3#k.3#l.3.4QtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.Q.A.z.S.S.S.S.z.z.S.z.S.S.d.f.f.e.e.f.\
e#m.f.f.f.f.L.e.L.L.f.g.L.h.i.i.i.i.i.i.i#n#n.k.i.k.k#f#f.n.n.n.n.o.o.N.q.q.q#\
g.O#g.r.r.r.r.I.t.V.u.u.v.v#h#h.0.X.W.W#o#k#k#k#p#q#k#rQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQt#s.Q.Q.Q.Q.T.C.7#t.P.z.P.z.z.z.z.z.P.b.e.e.e.e.e.\
e.e.f.f.f.f.D.L.D.U.L.L.L.g.i.g.i.i.i.i.i.i.i#f.l.l.n.n.n.n.n.N.o.p.p.N.q.q.q.\
H.q#g.r.r.r.r.I#u.u.u.u.v.u#h#q.0.W.0.W#k#k#j.3#k#p#l.V.a#v#w#xQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQt#s.Q#y.5.Q.Q.T.B#t.z.z.z.z.z.z.z.z.z.z.D.e.e.e.e.C.\
6.6.e.e.f.f.D.f.f.D.h.L.h.g.g.h.M.g.i#z.g.i#n.l#f#f#f.n#f.n.n.n.N.N.n#g.q.N.q.\
q#g.O.O.O.O.O.O.r.t.t#A.u.v.y.y#q#j.3#l#h#B#q#b#q#q#q#C#t.J#D.PQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQt#s.Q.Q#E.5.Q.Q.5#t#t.P.P.z.z.z.z.z.P.A.7.e.E.b.b.C.C.\
b.6.6.6.6.f.D.f.D.h.D.f.D.h.h.g.M.M#z.M.i.i.i.i#n#f#f.n#f#f.n.n.n.N.n.n.n.N.N.\
N.N.N.H.H.H.O.O.O.O.s.r.u.u.u.v#h#q#A#A#A.V.V#F.I#A#B#G.a#H.c.A#I#tQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQt#x#t.5.5.S#E.5.5.R.S.T.T.T.T.T.T#J.T.S.B.b.b.B#H.C.C#\
H.B.C.6.6.6.e.C.e.f.D.D.h.g.L.L#z#z#z.M.M.M.i.g.i.i.i#f#f.n.n#f#f.n.n.n.N.n.n.\
G.n.q.N.q.q.q.H.O.s.I.I.V.u.V.w#K.n#L#M#M#M#M#M#L#L#L#L#I#I#I#M#m.V#BQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQt#s.J#n.5.5.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.T.6.B.A.A.B.B.B.\
A.b.B.C.6#H.C.C.e.f.D.D.D.D.L.L.g.e#N#z.L.M.g.M.g.i.g.i#f#f#f#f#f#f#f.n#f.n.n.\
n.n.N.p.q.G.q.H.H.O.r.s.V.V#A#A#K.t#L#I#L#L#L#L#I#I#I#I#I#I#I#M#L#r#sQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQt#s.J#O.R.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q#t.B.7.B.A.B.B.B.\
B.B.B.b.b.b.C.C.C.e.b.e.e.e.e.f.f.f.f.L#z#z.M.M.M.M.i.i.i.i.i.i.k#f.l.l.l.l.l.\
n#C#G.p.p.q.q#P.s.s.s#A.V.u.u.u.u#q#g#z#z#z.i.i#N.f#z#z#z#m#m#Q#z.v##QtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQt#s#O#G#N#R#S#T#T#U#T#U.4#T#T#T.N.4.4.4.d.B.7.A.A.B.B.B#\
t.B.B.B.b.b.b.b.6.b.e.e.b.e.e.d.e.e.f.f.L.M.i.i.i.i.i.i.i.i.i#f#f.k.l.l.l.n.l#\
G.p#C.q.N.q.H.s#g.s.s.I#A.u.u.u.v.v#j.W.W.2.W.W.W#j.W.9.W.W.W#V.3.W#iQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQt#s#t.l.a#T.y.i#W.i.F.i.j.j.U#z#z.M.M.i.b.b.b.A.B.B.B.b.\
b.b.b.b.d.C.e.e.e.e.L.L.U.U.L.L.M.h#z#z.j.i.i#f.l.l#f#f.l#f.l.l.n.n#G.o#G.q.q.\
q.H.H.s.s.s.s.I#F.V#F.u.u.v.w.v.v.v.3#k.3#j#l#q.w#K#j#V#k#p#p#V#F#q#FQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQt#s#s#D.d#f.0#h.F#M.U#X.U#X#L#X#L.D#L.h.F.k.i.i.j.F#W.k.F.\
k#Y.F.m.F.F.k#W.l#W.m.l.l.m.l.l.m#Z#Z#Z.n.G#Z.G.G.q.G.G.O.G.G.O.G.O.H.H#P#0#P#\
P.s.s.s.s.s.s#0.s.s#A#1.I.I#F.u.I#2.t#F#q#o#q#h#q#l#3.8.8.3#q#3.9#B#4QtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQt#s#y#5#T.8.9#k#P.G#Z#Z#Z#W#Z#Z#W#W#W.G.l.m.G.F.F#6.F.F.F.\
F#W.F.m.m#Z#Z#Z#Z#P#P#7#Z.q.G.G.p.q#Z#P.G.G#Z.q.q#P.G.O.O#8#8#8#8.H#g.s#0#0#0#\
0#F.V#A.I#F#A.w.w.u.u#F#1#F.w#1#F#F#F#F#F#9#q#q#p.3#l#p#b#k#l#o.8.8#BQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQta..5#J#4.0.9#d#C.q#0#W.U.F.F.U#M.U#z.i#G#q.I#A.I.s.i#n.n#F.\
ia#.v.u.y.l.v#A#h.w#F#4#g#G.3.y#4#l.0#d#G#u#j.3#k.3#V.3#j#j.W#n.raa#k#bab.W.Y.\
2#U#U.Y.X.9.9#B#f#n.Vac#O#r#3#3.W#m###q.Iad#F.w.t.w#2#F#P.I.w#b#V.X#oQtQtQtQt#\
sQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQt.R#5.5.d.W.2.9#d.H.V#k.q.F.F.m.U.F.U#W.v#B#i#r#4#4#T#D.J#O#4a\
e#Sabafaf.#ag#r#raf#eae#Oae.2af#D.1.2.Yah#r.Y.Z.X#a.Y.X.2.Y.Xaeaa#x.2.Z#x.2#i#\
iaiai#..Y#i#ia#ah#Raj#i#x#S#.#i.2#R.1.Z#F#A#1#q#A.V.w.s.s#q.v.3#3.8#k#j.v.v#s#\
sQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtaa#v.g.N#j.Y#i.Y#b#b#T#t.l#m.z#T.a#t#C.0.1.2.y.Z#e#e#S#T#U#r#\
Uaj#r.y.Z#Sag#eag.1#a#raf#e####aj.9.Y#i.Z#a.Y.2.Y.Y.Y.Y.Y.Y#iagakaf.Y.Y.Z#i#.#\
i#a.1#i#i#i#.##.Z.Z.2#iag.2#i#i.Y###e#O.Z#T#O#Babaaak#O#4.X.8.Y#i.8.X#k.W#o#V.\
0QtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQt.x#h#q.3.9#.#i.Yag#S#m#D#Uah.##e.R#U#4#R#O#eaeaj.##Sab#xai#Q.\
##r#Oai#r#S#raf#Q.Z#S#Qagaf#r#a#eaj###a#rafag##afaj###a.Z.2#e#e#raj#a#a#e.Y.Z#\
rag#rag.2ag#eag#Uag##.Z#eaf#e.1##ag##ag#eag.1.Z##ag.2###r#r.W.Y#i#i.Y.W.8.8al.\
0QtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtae.P.z#w.Y#i#.#i.1#a#e#Sag.##Oah.##T#r.R#Oah#xab#5#U#x#D#r#x#\
Saea.#x#e.#aj#R#Q#Sa.#5ag#x#Q#Ua..Ragah#S#Qai.Z.S.5af#Uaeaf.S.S#Uabah#e#D.Zae.\
5#m#e#5ag#R.5#R#S#Dagah#U#Q.5#Daf#x#Q#U.Sam#e#m#Q#Q#Oag.R#E#x###i#i#i.W.3.wan#\
hQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQt#naa#N#n.2.2####af#eaf.1#r#D#Uahaeaf.4#Dababahab#D#r.Qa..##y.\
R#y#ya..#.Q#5a..#.R.Q#y.#a..R.R#y#y.#a..##5#5.##y.5.R.#a.am.5.Q.R.#a..##y.#a.#\
y.S.##y.##J.Q#y.#a.ama..S.R.5.5.R.5.5.#.S#E.R.Ra..R.5.R.S.Sa.#R.2#i#i.8#k#k#k#\
dQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtaa.g.g#T.Y###a#a.Zag.1##agagagag#e#aagagag.Zag#aaf#U.Q.Q.Q.Q.\
Q.Q.Q#y.Q.Q#y.Q.Q#y#y#y#y#y#ya.#y#y#y#y#y#ya.#y#ya.a.a.#Ja.a.a.a.a.a.a.a.a.a.a\
.a.a.a.#ya.a.a.a.a.a.a.a.a..R.Ra.a.a.a.a..Sa.a.a.a.a.#5a.a.a..R.Z#i#i.9#j#k#h.\
xQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQt#n.n#f#u#i###e#e#eajaj#e#Uag#U#e#S#e#Sajab#r#Q#e#Q#Sai#Oaiai#\
Oabab#Q#S#U#U#U#Uafagagagagagagagagagagagagagagagag.Z.Z.Z.Z.Z.Z.Z.Z#a.Z.Z#a.Z#\
a#a#a.1.Z#a#a#a.Z#a#a.Z.Z.Z#a.Z#a.Z#a#a.Z#a.Z.Z.Z#a.Z#a.Z#a.Z#a#i#i#.#..W#V.W.\
WQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQt#4#0#g.8#i.Y.2.Zag#e#e#e.1.2.2###a###a#####a.Z.Z.1#eaf#e#aag#\
aag#a#a#a#a##.2.2.Y.Y#i#i.Y#i#i#i#i#i#i#i#i#i.Y#i#i#i#i#.#.#.#.#.#.#.#.#.#.#.#\
i#.#.#.#.#.#.#.#i#i#i.Y#i.Y.Y.Y#i.Y#i#i#i#i#.#i#.#i#i#i.Y.Y#i#i#i#.#.#..9#V#o#\
hQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQt#z#T###i#i#i#aab#Qah#x#R#Uah#S#D#Qae#Rahab#xah.##R#xah.#ah#5a\
e#x.#.##O#xab#U#U#aag#a.2###a.Y.2.2.Y.Y.Y.Y.Y.Y.Y.Y.Y#i#i#.#i#i#i#i#i#i#i#i#i.\
Y#i#.#i#i#i.Y#i#i.Y#i.2.Y.Y####.Y.2.Y#i##.Y#i#i#i#i#i#i.2#a.2.Y#i#.#.#.#3.W#k#\
gQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtab.f#n.1#i#i#i.Y#a#S#O#R#x#r#Q#e#S#Sag#xah#r#Qai#U#Rafaiah#Q#rae.\
Z#m.R#Q.1#O.1#e#a.2agag.Y.Y.2#i.2##.2.Y.Y.Y.Y.Y#i.2.Y#i#i#.#i#i#i#i#i#i#i#i#.#\
i#.#i#.#.#i.Y#i#.#i#.#.#.#i#i.2#i.Y.Y#i.2.Y#.#i#i#i#i#i.2.2.2#i#i#.#i#.#i.8#k#\
h.y#sQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQt.Wao.O#V#i#.#..Y#aabah#R#r#r#D#B#Rabag#U#D#rahah#S#Daf#U#R#r#Saia\
gaiai#4afaiagabagaj#Q#U.2#S#a#e#Q#U.Y#r#a#aaf.X#S#Q#####U.Yapabap.X#U.2afag###\
S#4.2ag#r.Y#S#Qag.2#U###eag.1#Q#S##aj#e.2#Q#Q.Z#a#r.2#r##.1ab#O#B#i#i#i#i.Y#ka\
qac#sQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQt.W#Kar#V#i#.#i.2#4ae#Oah#e.##w#R#5#Q#O#D#Dai#5#Oam#R#m#xahab#D#Sa\
h.Q.##e#x#Q#S#R#e.R.5#Oaj.#ag#R#E#R##.##e#4aiak#5#E#eag#D.1ah.Q#R.1aeag#O#O.Z.\
#a.aj#r.J#a#R.Q#R#aae#eabahag.#.5.4af#Dag#m#Eahag#xag#4#Q.1#t.5.#.1.Y#.#..Y#ka\
qal#sQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQt.Wasatal#i#i.2#eai#R#R#U#D#D#xae.S#m#m.R#D#D.S#D.R.R#ta..#.#.Q.J.\
5.Q#yaea.#x#5am.#.Q.Q.##Da.#x.5.5.S#x.5#x.Ram.J#E#E.R.J#y#D.T#y.5ae.T#D.R.R.J.\
5.5.T#D#y#D.T.Q#J.c#5.Sam.5#D.5#E.R#D#y.#.R#E.5#D.R.##t.S#D.S.5.5#m.Y#i#.#i#o#\
kacQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQt#daq#K.W.Y###a.Z.Zag#aag#T#e#Q#eabaf#S#U#Q#S#T#Q#4#O#D.Q.Q.Q#E.Q.\
Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q#y.Q.Q#y.Q.Q.Q.Q.Q#y#E.5#E.5#E#E.Q.Q#E.Q#E.Q.Q#y.Q.Q.Q.\
Q#E.Q.5.Q.Q.Q.Q.5#ya..Q.Q.Q.Q.Q#E.Q.Q#E.Q.5#E#y#E#E.5#E#E#E#E.5.5.5#e#.#i#.ac#\
o#3QtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQt.y#j#l.8.Wap#eaj#e#r#B#B#T#B#Q#Bab#u#m#U#n#U#e#O#Tae#t#E.T.5.R.S.\
T.R.z#t#D.J.J#x#t.a#w#v#v#Naiai#Nai#O#Oaaaaaaaaaaaaabab#n#naaaaaaabababab#naba\
b#naaabaaaa#Qaaaaaa#nabaaaaababaaabaaabababab#Qabab#Q#Q#Q#Q#Q#Q#Q#4###i#i#.#ca\
c#cQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtapau#9.W#q#g.N.l.p#f.n.l#z#W#W.n#M#W#Q#O#mag#T#m#O#m#O#N.M.L.j.j.\
h.i.k.n.n.G.G.G.G.s.O#8#1.s#1#1.t#2#2atat.t.I.t.t#2av.w.w.w#K#Kaoao#qanao#q#qa\
w#q#qao#Kan#K#hananan#K#K#Kan#h#q#q#q#q#q#q#p.3.3#l#k#k#kaq#k#k#d.W.8#3.9#3aca\
c#.QtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtau#9#j#qawaxaxayayazaAazaBaBaCaB.I.1.8#b###T#B.W.1.8.2#1aDaAaAa\
AazaraAaEaEaAaAaEaFaEaEayayaGaGaHaGaGaGaEaGaGaGaGaGaGaGaIaIaJaJaJaJaJasasaJaJa\
JasasaJaJasasasaJasaJasasaKaLaKasaLaMaMaMaKaN#o#V#o#oaOaNaNaOaOalal.9#3#Vacala\
c#3QtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQt#j#k#j#kaoaHaIaxavayazaEaEayayay.t#k#.#.#.#.#i#.#.aP.9#PaQaRaSa\
SararaAarazaraEatazaEaEaEaEayayayayayayaGayaGaGayaIaIaHaHaJaJaJaJasasasasasasa\
sasasaLaKasaLaKaMaM#o#oau#o#o#o#oaOaOaOaOalal#V#Val#Valalacalalacacac#3#3#3#3a\
l#3QtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQt#j#k#j.3aoaHad#K.wadad.wadavavaw.w.W#.aPaP#.#.#.aPaP#c#F#1#1ava\
vavavavavazararazataEaEaAataEaFaxaIaH#KaHaHaHanaH#KaJasaJasaJasasasasasasaKasa\
saqaLaKaMaNaNaNaNaOaO#oalal#Vacacacacacalacacacacacacacac#c#c#c#.#c#c#.ac#c#ca\
c.9QtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQt.8#k#k.w.t#1.u#c#.#.#cac#V#oaMaqaq#V#3#.#.#.#.#c#c#.#cacacacal#\
ValalalalaOaNaOaOaN#oaNaOaOalalalacalacalalalalalal#Valalacalalalalacacalalaca\
Tacacac#caTaTaTaT#c#c#c#c#c#c#c#.#.#c#.#.#c#.#.#c#.#.aPaPaPaPaPaPaP#3ac#3#3ac.\
9QtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQt.8aq#k#K#Kaoan#.#.aP#.#3#kao#9aoaoaoao#9aqaqalaOalalalalal#VaNa\
NaMaNaMaMaMaOaOalaO#Valalalacalalalalacalacacalalacacacacacac#cac#c#3acacacaca\
lac#caT#c#c#cacac#c#c#c#c#c#c#.#c#.#c#c#.#.#c#c#.#c#.aPaPaPaPaPaPaP#3ac#3#3ac.\
8QtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQt#Vaq#jaoaHaoao#caPaPaP#3aqaoaHaoaJaHaHaIaJasasaLaLaKaMaNaNaMaMa\
MaKaKaMaKaKaNaNaNaN#oaOaOalaOalaOaOaOalalal#Valalalalalalal#Valal#Vacacalalala\
lalalalalalalalalalacacacacacal#3ac#3#3ac#3#3#3#.#.#.#.aPaPaPaPaP#.#V.8#3#cac#\
VQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQt#Vaq.WanaEayaF.9aPaPaP#3#oaoaoaoaoaoaIaIaIaHaJaJaJasaJaKaKaMaKa\
KaMaLaLaKaMaMaNaNaKaNaNaNaO#oalaOaOalalalalalalalalaOalalalalalalalalalalalala\
Tacalalalalalalacacalacacacalacacacacac#cac#3#c#c#.#.#.aPaPaPaPaP#c#oacac#c#V.\
8QtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQt.8aq.WanaEayaF.9aPaPaP#i#VaLaoaoaHaHaHaHaJaJaJaJaJasasasaKaLasa\
LaLaLaLaLaKaLaMaNaNaMaNaNaNaO#oalalaOalalaOaOalaOaOaOaOaOaOalaOalalacalalacala\
calalalalalalalalalalalalalalalalalalacac#3acac#c#c#.aPaPaP#.aPaP#.acacacacala\
cQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQt#Vaq#j#KayayaF#VaPaPaP#..WaqaoaHaoaHaoaHaHaHaoaJaHaJaJasaJasaLa\
saLaLaLaKaKaKaKaKaNaNaMaKaNaNaNaMaNaOaNaNaNaOaOaOaNaOaOaOaOaOaOaOalaOalalaOala\
lalalalaOalalalalalalaOaOalalalaOalacacalacalacac#c#caPaPaPaPaPaP#.#Vacacacala\
cQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQt.XaLaLaHaEaEaE#jaPaPaP#.#V#kaoaoaoaoaHaoaHaHaHaJaoasasasasasasa\
sasaLasaKaKaKaKaNaKaMaMaMaMaNaNaMaMaMaOaOaNaOaOaOaOalaOalaOalalaOalaOalalalala\
Oalalalalalalacalalacacacacacacacacacac#3acacac#3#c#.#.aP#.aPaPaP#cac.9#3#3ac#\
cQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQt.W#9aKaoaAaEaA#9aPaPaP#..8auaLaL#l#9#9aoao#9aoaoaoasasasasasasa\
sasasaLaLaLaKaMaqaOauaO#o#o#VaO#o#o#oaOaOaualaOaOalalalacalacalalalacalacalaca\
cacacacacac#cac#c#c#c#cac#c#c#c#c#c#.#c#c#c#i#c#i#.#.#.#.#i#.aPaPac#Vacac#3#3#\
cQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQt.xaL#9aoaAaEaA#l#.#.aP#..8auaqaqauaqauaqaq#kaqaqaLaLaKaqaqaqaqa\
qaq#oaMaMaM#o#o#oaO#V#V#V#V.8#Vac.9.8acalacacac#cacac#c#cacac#c#.#c#.#c#.#.#c#\
.#.#.#c#.#.#.aP#.#.#.#.#.#.#.#.#.#.#.#.#c#.#.#i#i#.#.#.#.#.#.aP#.acalac#3#3.9#\
.QtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQt.uau#9aoaAaEaAan#.#.#i.W#V#j#k.W.3ap.4#ga##ga#a#a#a#a#a#a#a#a#a\
#ap#ea#a#ajapaja#apa#a#a#a##e#eag.9#.afap.yak#ea#.2#.##ap#eaj#e#e#eapap#eap#ea\
papap#eap#e#eap#eap#e#eajapap#eap#e#e#e#e#e#eag.Y#i#i#i#s#s#.#.#.#V#Vac#3#3.9#\
cQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQt.4aKas#9aFayaEan.9.0#aQt#d#V.8#i#rQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.Y#iQtQtQtQtQtQtag#iQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.Y#.#.#i#sQt#s.Y#iacal#3#cacac#\
iQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQt.yaNao.x#haFaE#K.X.yQtQtak.8#caP#UQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.2#iQtQtQtQtQtQtaf#.QtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.Y#.#.#iQtQtQt.2.8.8acac#c#3#3#\
.QtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQt#baL#2#2aF.t#2.w#bQtQtQt#s.X.9#.#UQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.2#iQtQtQtQtQtQt#e#iQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.Y#.#.#.QtQtQt#s.9.8#V#V#3.9#c#\
.QtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQta#au#K#K#K#KaoaH#sQtQtQtQt.X.9#.#rQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.2#iQtQtQtQtQtQtaj#iQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.Y#.#.#iQtQtQtQt.0#V#V.8#V#3#3#\
.QtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQt.X#V#k#9#K#2anQtQtQtQtQt.8.9#i#rQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.0#iQtQtQtQtQtQtaf#iQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.2#.#i#iQtQtQtQtaP.8.8.9ac.9#i#\
#QtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQt.X#V#j#l#l#kQtQtQtQtQt.9.9ac#b.4a#a#apap#uap#uafaf.y.y.y#h.\
x.x#b#b#d#j#j#k#j#j.W.W.W#V#V.W#Valac#V.W.8.W.W.Wac#j.8#V.8.8#V.8.8.8.8.8.X.X.\
8.8.8.8.8.X.2.2.2.X.X.2.W.W###d###d.1#a#aakagag#i#.#.#iQtQtQtQtQt.9#cac#3#i.2Q\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQt#a.9#j#V#3.0QtQtQtQtQt#V#V#jauau#jaMaqau#jauauauauaqaKaqaLa\
LaqaLaqaLaKaKaLaLaLaqaqauauauau#oauauaqaqaq#oaO#o#oaOalaOaOaO#oaOalal#Valalac#\
VaOalaOalalal#Val#V#Valalac#Vacac#3acac#3#c#c#c#3#.#i#iQtQtQtQtQt.2#..8.9.9.ZQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQt.X#d.W#iQtQtQtQtQtQt#j#9#9aq#laLaqaLaL#9aqaLaLaqaLaLasasa\
s#9aLaLaLaLaLaLaLaqaLaqaLaqaNaqaqaqaMaqaNaqaMaMaMaMaMaMaOaNaOaN#o#oaO#oaO#oaO#\
oaOaOaOaOalaO#V#Valalalalalacacacacacac#3acac#3#3#3#c.2QtQtQtQtQtQt#i.1.Y.YQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtag.W.8#iQtQtQtQtQtQt#kaoao#9aLao#lasas#9aoasaLaoasasaoaoa\
oasaoanasas#lasasasaqaLaLaLaLasasaLaLaLaLaKasaLaLaLaLaLaLaLaqaMaMaMaMaqaMaMaqa\
M#o#oaO#o#jaOaOaOaOaOaM#o#V#V#o#V#V#o#Valacacacacac#3.0QtQtQtQtQt.Z#i.Y#c##QtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQt#a.y#u#c.2QtQtQtQt#s#KaoaoaH#K#KaHaHaHaHaHaHaHaHaJaHaHaHa\
HaH#KaoaJaHaHaHaHaHaoaHasasasaJasaJaoasasaLaLaLaLasaLaLaLaLaLaLaLaLaLaLaoaLasa\
LaqaqaqaqaqaqaqaMaqaqaqaMaM#k#kaqaq#o#oaO#oal#Valalac.9#sQtQtQtQt#i.9.W.9#.QtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQt#j#u#B.9#iQtQtQt#s#KaFaIaxaxad#KadaIaIadadaIayadadaEaFaFa\
FaFay#KaIaI#KayaIayay#KaIaIaHaHaIaHaJaHaJasaJaJaJaHaJaoaJasasaJaHaJaoasaHasasa\
saoaoaoasaoaLaLaLasasaLasaLaLaoaLaqaqauaqaqaqau#o#o#V#o#sQtQtQtaP#i.Y#d.9#.QtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQt.8.3#h#3#3#sQtQt#KatazazataEaEaFaFaFaFaEaEaEaEaEaEaEaEaAa\
EaEaEaFaFaEaEaEaEaEaFayayayayayayayayaIaIaIaIaIaIaIaIaIaIaHaIaIaIaIaIaIaHaIaIa\
IaHaJaHaHaHaIaJaHaJaoaoaJaoaoaHaoaoaoaoasaL#9#9aqaqaqau#sQtQtQt#e#.#..9#c#.QtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQt.X#Vau#3.Y#sQt#s.tarararar#8araSaSaraAazararararararaAara\
raraAaraEaEaEaEaEaEaEaEayaEaEayaEayayayayayaIayaxaIaIayaIayaIaIayayayaIaFaIaIa\
daI#KaIadadadadaIaIadaIaxaIawawawaHaoaoaoaoaoaoaoaoaLaL#s#sQtQt.Z#.#.#.#.#.QtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQt.8#j#j.8.9akQt.t#8#8#8#PaUaUaUaVaWaV#PaQaQaQaVaVaVaVaVaVa\
VaVaVaSaSararararaAazarazaAataEaEaAazazaEaFayaEayayaFayayaEaFayaEayayayayaxaya\
FaFadadaFaFadadaFadadaFaFaFadadad.w#K#Kax#K#KaI#KaIaoao#s#s#sQt##aP#.#.#.aPQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQt.W#j#j#3#c.X.k.G.G.G.GaU.G.GaXaXaXaYaWaVaUaVaVaUaUaVaV#7a\
VaVaV#8aVaSaVaSaSaSaSaDararararatarararazazaEazazaEaEaAaEaEaEaEaEazazaEaFaFaya\
vaFaFaF#2aF#2aFaFaFaF#2at#2#2aF#2aF#2.wadaxad#K#KaH#K#p#p#s#sQt##aP#.#.#.aPQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQt#d#V#o.Wac.V.k#Z.G.GaZaZ.GaZ#ZaZaXaXa0aX#7a1aZaU#7#7#7#7#\
7aVaVaVaVaVaVaRaRaDaDarararararararararararararaAaraAaraAaAaAaraAaAazat#1atata\
ratatatatatatatatatatatat.tat.tat.tatat#2.w.w#Kad#K#K#K#l#l#kQt##aP#.#.#.aPQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQt.y#Vau.W#d#n.Ga1a1aZa1a1a1a1a1a1a1#Z#7a2#7a1aZaZa0#7aV#7#\
7#7aVaVaRaVaRaSaSaSaSaSaRaSararaSaraSaAaAazaAaDaDaAaraBaBaraDaDaBaAaBaraSaSaS#\
8araratarararatataratatatat.t.t.tat.t#2#2avaF.wadad#K#K#9#k#V.v.9aP#.#c#.#iQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQt#u#V#j#V#l.eataZ#Xa3.K.K.K.K.K.K.K#Xa3#X#X#X#Xa3a4a4a4a4#\
X#Xa4a4a4a4#Y#X#Y#Y#Y#Y#Y#Y#6#Y#Y#Y#Ya1#6a1a1a1#6a1#6#6#6a1#6a1a1a1a1a1a1a1a1a\
ZaZaZ#7aZa1aZ#7aXaXaX.GaUaUaUaUaVaUaraVaSaSararatatavaIaL#j#l.3#.#.#c#.#..2QtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQt#V#o.W#3.r.h#Ya4.K.K.K.K.K.K.K.K.K.Ka3.K.Ka3.Ka3a3#Xa3a\
3a4a4#Xa4#Xa3#Xa4a4#Y#Y#Y#Y#Y#Y.m#6#6#Y#6#6#6#6#6#6#6#6#6a1a1#6#6a1a1#6a1a1a1a\
1a1a1aZa1#Za5a1#7aXaXaU.G.GaUaUaVaVaUaS#8arararatatataxao#l#o#s.YaP#.#.aP##QtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtal#o#o#.alataAaVaU#PaUaXa5aZa0#7#7a0#7aVaX#7#7a0aV#7aVa\
XaVaVaVaVaRaRaRaRaBaAaAaAaAaBaAaAaBaAaAaBaraDaDaDaDaSaSaBaBaAaAaAaDaAaAaEaEaEa\
EaEaEayaFaGaEayaIaxaGaGayaHaHaJaHaHaoaHaoasaoaoaoaLaLaL#oal#iQt#aaP#.#.#.#aQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQt.8#o#k#c#c#2aEarar#2aoaVa0#7a0aR#7aRaVaVaRaRaRaAaRaVaRa\
RaRaRaAaVaraBaAaAaDazaAaAaAaAaAaAaBaAazaAazavaEaBazazaEaAazazaEaEazaAaEaFataEa\
yaEatayatavaxaxaIaIaHaHaJaJaoaJaHaHasasasaJasaKaLauaqaLaq#k.9Qt##aP#.#c#.#sQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQt.8#j#j#c#caEaEar#0.taoaYa5aXa0aYaYaRaRaYaWaYaRaRaYaYaYa\
YaYaRaRaRaRaAaBaBaAaAaEaAaAaAaAaAaBaAaAaBavavazazazaEaAaAaEayaEaFaEaEayavataya\
EazatayayazayayaxaIaHaJaHasaHasaJaHaHaLaHaHaJaLaq#oaqaoaLaq.YQt###.#.#c#.QtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtak#j#j#c#.aFaEaB#1.IaoavaDaCaDaDaQaRaQaRaDaDaAaDaSaSaDa\
SaSaDaAaAaAaAaAaAaAaAaAaEaEaAaEaEaGaGaIaGaIaxayayayaGaIaIaIaIayayaGaIayayayaya\
yayayavaGayaxaxaIaHaJaJaHaHaHaJaHaHaoawaHaJasasaLaMaqaLaq#o##Qt##aP#c#c#iQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQt#j#j#c#.aFazaBaB#1asaBaW#0aRaQaBaAaraSaBaSaRaDaRaRaRa\
QaDaBaAaAaAaAaAaAaAazaEaAaEaAaAazaEaAaEaAaIaIaGavaGayaIaGaHaJaIaIaIaGayaIaIaIa\
IaIaIaIaIavaIaoaHaHaHaHaJasaJaJaJaJasaoaIasasaLaM#oaqaqaq#o.1Qt##aP#i#..YQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQt#j#j#3#..waAaBararaoavaD#1azazavaAaAaBaBaAaDaBaRaRaDa\
RaDaBaAaAaAaAaDaAaEaAaAaEaAaEazazazaEaEaEayayayaxaIaGaxaIaIaIaIaIaGaIaIaIaJaIa\
HaIaIaIaHaHaHaHaHaHaJaJaJasasasasasasaoaKaLaLaLaM#o#k#oaq#V#aQt.2aP#.aP##QtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQt#V#o#3#c#AazaB#1aCaHaBaYaBaDaDaAaBaDaDaDaDaBaBaSaRaRa\
DaSaRaDaDaBaQaAaEaAaAaAaAaAaEazaEayaEazaEayaxaGayaxavavayaxayavayayaIaIaIaIaIa\
IaIaIaJaIaIaHaJaJaJaJaHaIaJaJasasasaJaLaKasaKaLaMaqaq#o#o#V#aQt###.#.#.#aQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQt#s#s.W.W#3.9.laFaBaBaraw#1aXaCaRaDaBaDaRaQaRaRaDaDaVaWaRa\
DaRaRaSaAazazatazataAaEaAaEaEaEavaGaFataFayavayaxavaxayavayaIayayaIaGaIaIaIaIa\
IaxaxaIaIaIaHaIaIaJaJaIaIaGaIaJaJaJaJaJaJaJaJasasaLaq#o#V#V##Qt###.#.#iagQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQt#s#j#dac.9Qtaxarazaz#KazaX#PaCaRaDaRaRaRaRaYaVaRaY#7aRa\
RaAaRaRaQ#1azataFarararaD#8aCaraBaDaDaSataAaAaD#1aBaSaAaDaAazaEaEaEaEadayayaFa\
FavayaIaFayaIaIaGayayayaGaGaIaIaIaIaHaHaHaIaJasasaLaM#o#oac#cQt.2aP#.#.QtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQt#j.W.9.9#s#laEav#1#q.waW.GaX.G#PaCar#8#0#8#P#8aR#8#8a\
QaRaYaC#8.I#1#8#1.s#8#8aUaZ#Za1#7aXaX#P.Iar#PaC#1.s#8#8azavaHaxaIaHadaHaHaxad#\
K#9aoaoaoaoaoaoasaoaLasaKasas#9aLasasaqaqaoaLasaLaqaqaq#oac#3#iaPaP#.#iQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQt.W.8.9Qt#KaFavaw#p#gaq#o#3#..X#i#k.s.W.9#.aq#lac#.#\
c#Vao#.#.#.#.al#.#.#.#.#c#.#.#.#.ac#.aPaP#3al#.aP#.#.#.#.aPaP#.#c#.aPaPaP#3#.a\
PaPaP#.#.aPaPaPaPaPaPaPaPac#caPaPalaL#caP#c#cacac#V#kaq#V#3#c#.aPaP#..YQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQt#V.8#iQt.v.w.w#9#j#uaqau#c#..X#..8#0#j#i#.#c.3#c#.#\
.#V.w#.aPaP#..9aPaPaP#..9aPaPaPaP#3#caPaP#i#j#.aPaPaP#.#.aPaP#..8#.aPaP#.#V#.a\
PaPaP#3#.aPaPaP#.aPaPaPaP.W#.aPaP#Vaw#.aP#c#c#c#cac#j#k.W#c#.#.aPaP#.##QtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQt.W.X#.Qt#uao#l#j#dQtauaqac#i.9#iaP#F#K#.aP#.#kaT#c#\
.#o.s#3aPaP#.#o#.aPaP#.#k#caPaPaP#k#3aPaP#c#p#3aPaPaP.8#.aPaP#.#j#caPaP#.#k#.a\
PaP#.#V#.aPaP#.acaPaPaP#.#k#caPaP#oaw#.aP#.#3#3#c#cac#o#V#.aPaPaPaP#.afQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQt#s.X.W.YQt#ban.waq##Qt#l#j#c#j.W#iaPav#1aPaP#.#p.W#i#\
..W#P#oaPaP#.aoacaPaP#caH#caPaPaPao#oaPaP#cawalaPaP#.aq#caPaP#.aoacaPaP#.aoaca\
PaP#.ao#caPaP#c#o#.aPaP#3aq#.aPaPaq#1aPaP#c#3#3#.#.#o#pacaPaPaPaPaP#.QtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQt#s#s.0.W#i.y.W.u.o.u.W#s#haq#c#F#h#.#.#F#PaPaPaP.waw#.a\
P.9#PaqaP#.#cavaM#.aP#caz#VaPaPaP#qaLaPaP#.axaMaPaP#c#K#V#.aP#caIaOaPaP#.aw#Va\
P#.#cav#VaPaP#3aoalaPaP#Vav#caPaPaoaB#.#.#3.9ac#c.8#h.V#k#caPaPaPaP#.QtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQt#sQt.X#d#..8#k.u.l.I#oQt.r#k.8#0#1#.#.#q#6#.aP#.#1#1#ca\
P#c.I#q#.#.#3aC#q#c#.#caQaqaPaPaPavawaPaP#.ayao#.#.acavaq#.aPacaEaqaPaP#cazaq#\
.#.#caCaq#.aPacaz#VaPaP#oaB#i#.aP#qaYac#3#3#3#c#c#V#lan#j.8#s#i#.#i#.QtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQt.X#b#i.8#pad.t#Kaq.yQtau.8.s#C#.#.#q#M#o#.#.#2#P#3#\
.#i#A#1#3.8aT#P#1#c#i#.#Pao#.aPaPavavaPaPaPayaH#.#.#cavao#.aPacaAaoaPaP#.aB#q#\
.aP#caQ#kaPaP#3az#oaP#.aqaC#3#.aPawaC.W.W#3#3.8.8#j#9aq#j.WQt.2aP.Y#.QtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQt.8.0.8.W.wayaEad#l#daP#kal.s#6#3#i#k#Y#K#.aP.va6#V#\
i#.#F#0ac#.#c#8#P#caP#.aQaz#.#.aPaxaB#.aPaPavaE#.aP#cadax#.aP#caAaHaPaP#.azaI#\
.aP#caQaoaPaPacaBaqaP#iaqaB#3#.aPavaC#k#b#c#3.2#bauaLaq#j.XQt##aP#.#.QtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQt#j.3#j#j.wayaraxao.WaP#kac#0#M.8#3.Wa5#1#3#i#ha6aM#\
.#..wa2#V#.#.#1a2#V#.#.#0aC#.aPaPaHaC#caPaPaxaB#.aP#.adav#.aP#caBaw#.aP#.azav#\
.aP#caQawaPaP#3aDaqaP#.aoaC.9aPaPawaY.3#b#3#3#B#s#kao#9#j.0Qt.2#.#i#.QtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQt#j.3#j#k#KaFataF#9.XQt#k#3#0#L#k.8.8a2#P.8#i#k#M#q#\
.#.aoa2#k#.#.ava5#o#.#.#0aC#caPaP#qaYaTaP#.axaD#.aP#..w#1#caP#caCav#.aP#.#1aB#\
caP#caQ#qaPaPacaBaqaP#.#p#0.8aPaPav#0.3#h#3.9QtQt#oao#p#VakQt.X#3#.#iQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQt.W#k.3#d.uadataF#p.WQt.3#V#q#L#F.8.8#P#Y#V#3#Va6#1#\
3#.#oa5#q#i#i#qa5#q#.#c#0aY#3aPaP#qaYalaPaPaxaQ#caPaP#FaC#3aP#caCaB#caP#.azaB#\
caP#caYavaPaPacaBaqaP#.aoa2#VaPaPavaC#q.1#3.9QtQt#kao#9#V.ZQt.2#i#.#.QtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQt#s.W#l#l#daPaJaF#2ao##Qt.3#k#k#M#0.8.2#F#Mao#i.8a5#0#\
3#..9a5#1aP#.aoa5av#.#.#1a0#VaPaPaoaY#oaPaPaIaY#oaPaP#qaYacaP#iaCaC#caP#.azaC#\
3#.#.aYaz#.#.acaBaoaP#.aoa2#VaP#cavaY#F###V.WaP#saqao#9#VQtQt#a#.#.#iQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQt.Z.3.3##Qt#Kav#2#p#dQt.Zac.V#L#0.W.Y.3#M#q.9.8#Pa2.\
8#.#.a5aB#.#.#ka5avaP#.awa2#VaP#.aqa0aqaPaPaoaYaqaPaPaoaY.8aP#.#1aCacaP#.avaY#\
3aP#3aYaB#.aP#3aBaoaPaP#p#P#o#.#.avaD.V#d#3.8QtQt#oao#9#VQtQtQt#.#.#.QtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQt#j#j#dQt.tadavan.yQt.Zal#j#Ma2#3.8#k#MaB.9.8#0a5#\
kaP#.aX#P#c#i#Va2aC#.aP#qa0#o#.#.#Va0aoaPaPaqa0aoaPaPaqa2#oaP#.#1#0#VaP#.azaYa\
caP#.aYaB#.#.acaD#qaP#.#qa2#VaP#.avaC#F.0#3.YQtQt#kaoao.WQtQtQt#i#i#aQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQt#s#s.W#d.2Qt#gaxad#KQtQt.3.3#3#P#M.8#V.8#M#P#i.8#1a1#\
p#.#i#0a0#V#.#3a2aY#c#.aqa5aoaPaP#Va2#qaP#.#Va0aoaPaPaqa2aqaP#.avaY#VaP#cavaYa\
caP#c#0aD#3aP#caBaxaPaP.3#P#VaP#.avaB#h.9.W.8#s#s#Vaoaq.ZQtQtQt#i#iQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQt.0##.2QtQt#K#F#pQtQtaq#V#i#Fa5#k.8#i#Ma2#3#i#q#6a\
w#.#.#Aa5#V#.#.#Pa0#c#.aqa5avaPaP.9aYav#.aP#Va0aHaP#.#Va2aL#.#.avaYaqaPaPaIaYa\
caP#.#0aC#3aP#caBaxaP#.#kaY#kaP#.azaC#F#.#i#.#s#s#Vao#jajQtQtQt#i#iQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtaj#aQtQtQt#Kat#pQtQt.v.3#..8#8#q#3#.a5#Y#3#i#k#Ya\
B#.#i#Fa5aqaPaPaCa5al#.#Va5avaPaPacaXav#caP.9aYav#.aP#VaXaoaPaPawaYaMaP#.aIaY#\
VaP#.aCaC#3aP#caBaxaPaP#paC#kaP#.avaB.3#i#.#c#sQt#kao#VQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.waFanQtQt.w#VaP#Va5.I#3#ia2#Maq#3ac#Ma\
2#..9#q#Yav#.aP#1a5#o#c#ca5aE#.#.acaY#0ac#.#VaYav#.#.aca2axaP#.awa2aqaPaPawaY#\
VaP#.#1aY#caP#caBavaPaP#kaW#kaP#.av#1#k#iaP#c#sQt#o#p#VQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.r#2anQtQt#hal.8#j#1aw#V.Waw#Pao#o#V#P#\
0ac.9aq#0.3#c#c#paB#V#3#cavaw#c#.acavaval#cacawao#c#cac.wao#.#.aqad#V#.#.aMaw.\
8#.#.#q#F#caP#caq#o#.aP#oaw#VaP#.aLao.8#.#.#.#sQt#kao.WQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtaFan.N.l#k.8#V#V#oaMaq#kaqaqaqaqaqaMa\
L#o#o#o#o#V#V#V#Valalacacacacac#3acacac#3#3#calac#caT#3aTaT#3#c#c#c#c#.#.#.#.#\
c#.#.#c#c#.#.#.#c#c#c#.#.#c#c#.#.#c#c#c#.#.#..0Qt#k#p.WQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt#Kao#u.O#V#j#k#oaqaqaqaLaqaLaqaKaLaM#\
o#o#V#V#o#V#oaOalal#Vacacacacacacal#3acacacac#3alacac#cacac#c#c#c#c#c#.#.#c#.#\
.#c#.#c#c#c#.#c#.#.#.#.#c#c#.#.#.#c#.#.#.#c#..8.y#9#k#hQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt#K#K#k.tac#V#V#VaqaMaLaLaLasaKaqaLaMa\
N#o#oaq#o#V#V#Valalacacalacalalacacacacacacacacacacal#3ac#cac#c#c#c#c#c#c#.#c#\
c#c#c#c#c#c#c#c#.#.#.#c#c#c#c#.#c#.#.#.#.#c#.#3#oaq#kapQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt#K#Kau#h.8aqaMaqaLaLaoaoaLaqaLaqaqaq#\
o#o#o#o#o#o#V#o#Valacacalacacacalalalalacalal#3acacal#c#c#c#c#c#c#c#3#c#c#c#c#\
c#c#c#c#c#c#.#.#c#.#.#.#c#.#.#caP#.#.#.#.#.#.#.acaq#Va#QtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.w#Kal.8#VaLasasasasaoaoasasaLaqaLaqa\
qaMaq#o#oaqaM#o#o#V#oal#Valal#Valalalalalacalalacal#cac#cac#cacaT#c#c#c#c#c#c#\
c#c#c#c#c#c#c#c#.#c#c#c#.#c#c#.#c#.#.#.#c#.#.#.acao#k#bQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.u.u#o#3#oaoaoaJaoaoaoaoaoasaoaoaqaKa\
KaKaLaLaMaLaqasaO#j#oaN#VaNaOaOaOaOaOaOaOaOalalalalalalacacalac#cacac#3acac#ca\
c#c#c#cac#c#c#c#cal#3#3ac#c#c#c#c#c#c#c#c#c#.#.alan#k.yQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt#laqac#i.8ao#9#p#9#pao#paoasaoaoaoaoa\
oaoaoaH#Kaoao#laoaoaoaoaoaqaLaMaMaqaLaMaMaMaOaN#o#o#o#V#V#V#V#o#o#o#o#V#Valala\
lacalalalalalacalalacalalalac#c#c#c#c#.#.#.#.aP#caq.8QtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt#k#9#V.9#jaoaq#kauaqaMaMaqaqaMaMaNaMa\
qaMaq#o#o#oaq#j#o#o#oal#oaO#V#Val#oalalalalalalalacacacac#3acacal#Valacacacaca\
calac#cacacacacacac#cacac#cac#c#c#c#c#.#c#c#c#..9#k.XQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtan.u#k.9#l.waxaxad.wavaEavazazaEaFaEa\
E#1#1aEazaEazavazaF#KaHay#K#2adadaHawawawaHawaHawawawawawaw#K#qaHaHaoaHaoaoaoa\
HaHaHaoasaJaJasaJasasasasasaLasaqaKaqaqaq#o#V.9#j#l.W.yQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtan.w#q.8#kadaF.wadaxayayayayayayaEaFa\
EazaAazazazazazaB#1an#KaEaJavataFadadayavavayaIavaIaxavaxayaxaIayaIaHaIawaIaIa\
vaxawawaHaIaIaIaIaIaHaHaHaJasasasasaoaoaLaL#o.8#o#l.8.0QtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt#qaw#h.9#jax#Kad.wadayayavayayavavava\
v#1az#2azavazaEavav#KadaFaHavaFadaIaxadaIaxaxavaxaIaxaxaxaxaxaIaxaIawaHaHaxaIa\
waHaIaHaHaIaHaHaHaoaoaoasaLaLaLaKaL#paLaLaL#o.8#oaL.W.WQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtanaH.wQt#B#ladavaFaxaIayavayavayayava\
vaIaIaIaxayayaFayaIaoaIayaIaIaIaIaHawawawaHaHaHaHawaHaoaoaoaoaoaoaoaJasasaoasa\
saoaHaoaoaoaoasasasaLasasaLaLaLaLaLaLaqaMal#d.Z#j#jal#dQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt#kad#KQtQt#k.w.wavar#1atataA#1#1#1ara\
ravatatazarararaEaFayaEaEazaFayaxayayavaIaxaHaHaHaIawaHawawawaIaIaIawaHaHaxaHa\
xaxavaHaIaHaIaHaHaHaHaHaJaJaHaoaHaHaHaLaq.8.ZQt#k#kal.yQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.yan#lQtQt.0#h.t.t.t.t.O#2#2#2atataFa\
d#K#K#2aF#2atataFadaFaFaEaz#2adaFaFadaxaxaHaHaxaxayaIawawaIaIaIawaxaI#KaoaHaHa\
dayadaJaIaHaIaHaoaHaHaJaJasaJasasaJaHaLau#3agQt#d#j#VQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt#uan#kQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt#j#k.WQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtan#lQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.W.0QtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtan#kQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt#jakQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.r.yQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQt.2.2QtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt",
"QtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQtQ\
tQtQtQtQtQtQtQtQtQtQtQt"
};
static Fl_Pixmap image_horgand128(idata_horgand128);

void HORGAN::cb_OK_i(Fl_Button*, void*) {
  aboutwindow->do_callback();
}
void HORGAN::cb_OK(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

void HORGAN::cb_Settingswindow_i(Fl_Double_Window*, void*) {
  Settingswindow->hide();
}
void HORGAN::cb_Settingswindow(Fl_Double_Window* o, void* v) {
  ((HORGAN*)(o->user_data()))->cb_Settingswindow_i(o,v);
}

void HORGAN::cb_SClose_i(Fl_Button*, void*) {
  Settingswindow->do_callback();
}
void HORGAN::cb_SClose(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_SClose_i(o,v);
}

void HORGAN::cb_Save3_i(Fl_Button*, void*) {
  Guarda_Pref(1);
fl_message("Audio device changes will take effect the next time you restart the program");
Settingswindow->hide();
}
void HORGAN::cb_Save3(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Save3_i(o,v);
}

void HORGAN::cb_BMidiIn_i(Fl_Browser* o, void*) {
  int valor;
valor = (int) o->value();
strcpy(hor->MID,o->text(valor));
o->select(valor,1);
hor->Conecta();
DMIN1->do_callback();
}
void HORGAN::cb_BMidiIn(Fl_Browser* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_BMidiIn_i(o,v);
}

void HORGAN::cb_Browse_i(Fl_Button*, void*) {
  char *filename;
filename=fl_file_chooser("Browse:","(*.horeb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".horeb");
BFiname->value(filename);
strcpy(hor->BankFilename,filename);
}
void HORGAN::cb_Browse(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Browse_i(o,v);
}

void HORGAN::cb_Browse1_i(Fl_Button*, void*) {
  char *filename;
filename=fl_file_chooser("Browse:","(*.txt)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".txt");
RFiname->value(filename);
strcpy(hor->RhythmFilename,filename);
}
void HORGAN::cb_Browse1(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Browse1_i(o,v);
}

void HORGAN::cb_HORBank_i(Fl_Double_Window*, void*) {
  Guarda_Pref(2);
HORBank->hide();
Fl::focus(PANICO);
}
void HORGAN::cb_HORBank(Fl_Double_Window* o, void* v) {
  ((HORGAN*)(o->user_data()))->cb_HORBank_i(o,v);
}

void HORGAN::cb_BClose_i(Fl_Button*, void*) {
  HORBank->do_callback();
}
void HORGAN::cb_BClose(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_BClose_i(o,v);
}

void HORGAN::cb_New1_i(Fl_Menu_*, void*) {
  hor->New_Bank();
metebanco();
Undo();
}
void HORGAN::cb_New1(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_New1_i(o,v);
}

void HORGAN::cb_BLoad_i(Fl_Menu_*, void*) {
  char *filename;
filename=fl_file_chooser("Bank Load:","(*.horeb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".horeb");
hor->loadbank(filename);
metebanco();
PutCombi(1);
}
void HORGAN::cb_BLoad(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_BLoad_i(o,v);
}

void HORGAN::cb_BSave_i(Fl_Menu_*, void*) {
  char *filename;
#define EXT ".horeb"
filename=fl_file_chooser("Bank Save:","(*"EXT")",hor->SavedBank,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT
hor->savebank(filename);
}
void HORGAN::cb_BSave(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_BSave_i(o,v);
}

void HORGAN::cb_Close_i(Fl_Menu_*, void*) {
  HORBank->do_callback();
}
void HORGAN::cb_Close(Fl_Menu_* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

Fl_Menu_Item HORGAN::menu_[] = {
 {gettext("&File"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("New"), 0,  (Fl_Callback*)HORGAN::cb_New1, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Load Bank"), 0,  (Fl_Callback*)HORGAN::cb_BLoad, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Save Bank"), 0,  (Fl_Callback*)HORGAN::cb_BSave, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Close"), 0,  (Fl_Callback*)HORGAN::cb_Close, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* HORGAN::BFile = HORGAN::menu_ + 0;
Fl_Menu_Item* HORGAN::BLoad = HORGAN::menu_ + 2;
Fl_Menu_Item* HORGAN::BSave = HORGAN::menu_ + 3;

void HORGAN::cb_Banco1_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(1);
if (Fl::event_button()==1) PutCombi(1);
o->label(hor->Banco[1].Name);
}
void HORGAN::cb_Banco1(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco1_i(o,v);
}

void HORGAN::cb_Banco2_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(2);
if (Fl::event_button()==1) PutCombi(2);
o->label(hor->Banco[2].Name);
}
void HORGAN::cb_Banco2(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco2_i(o,v);
}

void HORGAN::cb_Banco3_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(3);
if (Fl::event_button()==1) PutCombi(3);
o->label(hor->Banco[3].Name);
}
void HORGAN::cb_Banco3(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco3_i(o,v);
}

void HORGAN::cb_Banco4_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(4);
if (Fl::event_button()==1) PutCombi(4);
o->label(hor->Banco[4].Name);
}
void HORGAN::cb_Banco4(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco4_i(o,v);
}

void HORGAN::cb_Banco5_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(5);
if (Fl::event_button()==1) PutCombi(5);
o->label(hor->Banco[5].Name);
}
void HORGAN::cb_Banco5(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco5_i(o,v);
}

void HORGAN::cb_Banco6_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(6);
if (Fl::event_button()==1) PutCombi(6);
o->label(hor->Banco[6].Name);
}
void HORGAN::cb_Banco6(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco6_i(o,v);
}

void HORGAN::cb_Banco7_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(7);
if (Fl::event_button()==1) PutCombi(7);
o->label(hor->Banco[7].Name);
}
void HORGAN::cb_Banco7(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco7_i(o,v);
}

void HORGAN::cb_Banco8_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(8);
if (Fl::event_button()==1) PutCombi(8);
o->label(hor->Banco[8].Name);
}
void HORGAN::cb_Banco8(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco8_i(o,v);
}

void HORGAN::cb_Banco9_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(9);
if (Fl::event_button()==1) PutCombi(9);
o->label(hor->Banco[9].Name);
}
void HORGAN::cb_Banco9(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco9_i(o,v);
}

void HORGAN::cb_Banco10_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(10);
if (Fl::event_button()==1) PutCombi(10);
o->label(hor->Banco[10].Name);
}
void HORGAN::cb_Banco10(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco10_i(o,v);
}

void HORGAN::cb_Banco11_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(11);
if (Fl::event_button()==1) PutCombi(11);
o->label(hor->Banco[11].Name);
}
void HORGAN::cb_Banco11(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco11_i(o,v);
}

void HORGAN::cb_Banco12_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(12);
if (Fl::event_button()==1) PutCombi(12);
o->label(hor->Banco[12].Name);
}
void HORGAN::cb_Banco12(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco12_i(o,v);
}

void HORGAN::cb_Banco13_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(13);
if (Fl::event_button()==1) PutCombi(13);
o->label(hor->Banco[13].Name);
}
void HORGAN::cb_Banco13(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco13_i(o,v);
}

void HORGAN::cb_Banco14_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(14);
if (Fl::event_button()==1) PutCombi(14);
o->label(hor->Banco[14].Name);
}
void HORGAN::cb_Banco14(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco14_i(o,v);
}

void HORGAN::cb_Banco15_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(15);
if (Fl::event_button()==1) PutCombi(15);
o->label(hor->Banco[15].Name);
}
void HORGAN::cb_Banco15(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco15_i(o,v);
}

void HORGAN::cb_Banco16_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(16);
if (Fl::event_button()==1) PutCombi(16);
o->label(hor->Banco[16].Name);
}
void HORGAN::cb_Banco16(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco16_i(o,v);
}

void HORGAN::cb_Banco17_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(17);
if (Fl::event_button()==1) PutCombi(17);
o->label(hor->Banco[17].Name);
}
void HORGAN::cb_Banco17(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco17_i(o,v);
}

void HORGAN::cb_Banco18_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(18);
if (Fl::event_button()==1) PutCombi(18);
o->label(hor->Banco[18].Name);
}
void HORGAN::cb_Banco18(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco18_i(o,v);
}

void HORGAN::cb_Banco19_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(19);
if (Fl::event_button()==1) PutCombi(19);
o->label(hor->Banco[19].Name);
}
void HORGAN::cb_Banco19(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco19_i(o,v);
}

void HORGAN::cb_Banco20_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(20);
if (Fl::event_button()==1) PutCombi(20);
o->label(hor->Banco[20].Name);
}
void HORGAN::cb_Banco20(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco20_i(o,v);
}

void HORGAN::cb_Banco21_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(21);
if (Fl::event_button()==1) PutCombi(21);
o->label(hor->Banco[21].Name);
}
void HORGAN::cb_Banco21(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco21_i(o,v);
}

void HORGAN::cb_Banco22_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(22);
if (Fl::event_button()==1) PutCombi(22);
o->label(hor->Banco[22].Name);
}
void HORGAN::cb_Banco22(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco22_i(o,v);
}

void HORGAN::cb_Banco23_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(23);
if (Fl::event_button()==1) PutCombi(23);
o->label(hor->Banco[23].Name);
}
void HORGAN::cb_Banco23(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco23_i(o,v);
}

void HORGAN::cb_Banco24_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(24);
if (Fl::event_button()==1) PutCombi(24);
o->label(hor->Banco[24].Name);
}
void HORGAN::cb_Banco24(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco24_i(o,v);
}

void HORGAN::cb_Banco25_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(25);
if (Fl::event_button()==1) PutCombi(25);
o->label(hor->Banco[25].Name);
}
void HORGAN::cb_Banco25(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco25_i(o,v);
}

void HORGAN::cb_Banco26_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(26);
if (Fl::event_button()==1) PutCombi(26);
o->label(hor->Banco[26].Name);
}
void HORGAN::cb_Banco26(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco26_i(o,v);
}

void HORGAN::cb_Banco27_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(27);
if (Fl::event_button()==1) PutCombi(27);
o->label(hor->Banco[27].Name);
}
void HORGAN::cb_Banco27(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco27_i(o,v);
}

void HORGAN::cb_Banco28_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(28);
if (Fl::event_button()==1) PutCombi(28);
o->label(hor->Banco[28].Name);
}
void HORGAN::cb_Banco28(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco28_i(o,v);
}

void HORGAN::cb_Banco29_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(29);
if (Fl::event_button()==1) PutCombi(29);
o->label(hor->Banco[29].Name);
}
void HORGAN::cb_Banco29(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco29_i(o,v);
}

void HORGAN::cb_Banco30_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(30);
if (Fl::event_button()==1) PutCombi(30);
o->label(hor->Banco[30].Name);
}
void HORGAN::cb_Banco30(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco30_i(o,v);
}

void HORGAN::cb_Banco31_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(31);
if (Fl::event_button()==1) PutCombi(31);
o->label(hor->Banco[31].Name);
}
void HORGAN::cb_Banco31(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco31_i(o,v);
}

void HORGAN::cb_Banco32_i(Fl_Button* o, void*) {
  if (Fl::event_button()==3) GetCombi(32);
if (Fl::event_button()==1) PutCombi(32);
o->label(hor->Banco[32].Name);
}
void HORGAN::cb_Banco32(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Banco32_i(o,v);
}

void HORGAN::cb_Load3_i(Fl_Button*, void*) {
  if (MoreSounds->size()>2)
{
hor->LoadSoundBank(MoreSounds->value()-2);
PutLoaded();

};
}
void HORGAN::cb_Load3(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->user_data()))->cb_Load3_i(o,v);
}

void HORGAN::cb_Rescan_i(Fl_Button*, void*) {
  hor->ScanDir();
putmoresounds();
}
void HORGAN::cb_Rescan(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->parent()->user_data()))->cb_Rescan_i(o,v);
}

void HORGAN::cb_RitEdit_i(Fl_Double_Window*, void*) {
  if((hor->Rt[hor->ae].bars < 1) || (hor->Rt[hor->ae].bars > 4))
{
fl_alert("Bars error.");
return;
}  

if((hor->Rt[hor->ae].quarter_note < 2) || (hor->Rt[hor->ae].quarter_note > 4))
{
fl_alert("Nom. error");
return;
}  
if (hor->file_ok == 1)
{
GetRit(hor->ae);
}
RitEdit->hide();
}
void HORGAN::cb_RitEdit(Fl_Double_Window* o, void* v) {
  ((HORGAN*)(o->user_data()))->cb_RitEdit_i(o,v);
}

void HORGAN::cb_RtName_i(Fl_Input* o, void*) {
  strcpy(hor->Rt[hor->ae].Nom , o->value());
}
void HORGAN::cb_RtName(Fl_Input* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RtName_i(o,v);
}

void HORGAN::cb_RtFile_i(Fl_Input* o, void*) {
  strcpy(hor->Rt[hor->ae].Nfile, o->value());
}
void HORGAN::cb_RtFile(Fl_Input* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RtFile_i(o,v);
}

void HORGAN::cb_RtBars_i(Fl_Value_Input* o, void*) {
  hor->Rt[hor->ae].bars = (int) o->value();
}
void HORGAN::cb_RtBars(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RtBars_i(o,v);
}

void HORGAN::cb_RtDen_i(Fl_Value_Input* o, void*) {
  hor->Rt[hor->ae].quarter_note = (int)o->value();
QuitaPon();
}
void HORGAN::cb_RtDen(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_RtDen_i(o,v);
}

void HORGAN::cb_lb1_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 1;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb1(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb1_i(o,v);
}

void HORGAN::cb_lb2_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 2;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb2(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb2_i(o,v);
}

void HORGAN::cb_lb3_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 3;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb3(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb3_i(o,v);
}

void HORGAN::cb_lb4_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 4;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb4(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb4_i(o,v);
}

void HORGAN::cb_lbv1_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 1;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv1(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv1_i(o,v);
}

void HORGAN::cb_lbv2_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 2;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv2(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv2_i(o,v);
}

void HORGAN::cb_lbv3_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 3;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv3(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv3_i(o,v);
}

void HORGAN::cb_lbv4_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 4;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv4(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv4_i(o,v);
}

void HORGAN::cb_lb5_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 5;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb5(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb5_i(o,v);
}

void HORGAN::cb_lb6_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 6;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb6(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb6_i(o,v);
}

void HORGAN::cb_lb7_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 7;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb7(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb7_i(o,v);
}

void HORGAN::cb_lb8_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 8;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb8(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb8_i(o,v);
}

void HORGAN::cb_lbv5_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 5;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv5(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv5_i(o,v);
}

void HORGAN::cb_lbv6_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 6;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv6(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv6_i(o,v);
}

void HORGAN::cb_lbv7_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 7;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv7(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv7_i(o,v);
}

void HORGAN::cb_lbv8_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 8;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv8(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv8_i(o,v);
}

void HORGAN::cb_lb9_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 9;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb9(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb9_i(o,v);
}

void HORGAN::cb_lb10_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 10;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb10(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb10_i(o,v);
}

void HORGAN::cb_lb11_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 11;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb11(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb11_i(o,v);
}

void HORGAN::cb_lb12_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 12;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb12(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb12_i(o,v);
}

void HORGAN::cb_lbv9_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 9;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv9(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv9_i(o,v);
}

void HORGAN::cb_lbv10_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 10;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv10(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv10_i(o,v);
}

void HORGAN::cb_lbv11_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 11;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv11(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv11_i(o,v);
}

void HORGAN::cb_lbv12_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 12;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv12(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv12_i(o,v);
}

void HORGAN::cb_lb13_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 13;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb13(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb13_i(o,v);
}

void HORGAN::cb_lb14_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 14;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb14(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb14_i(o,v);
}

void HORGAN::cb_lb15_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 15;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb15(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb15_i(o,v);
}

void HORGAN::cb_lb16_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 16;
hor->Rt[hor->ae].Line_Bass_Note[pos] = (int) o->value();
}
void HORGAN::cb_lb16(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lb16_i(o,v);
}

void HORGAN::cb_lbv13_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 13;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv13(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv13_i(o,v);
}

void HORGAN::cb_lbv14_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 14;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv14(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv14_i(o,v);
}

void HORGAN::cb_lbv15_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 15;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv15(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv15_i(o,v);
}

void HORGAN::cb_lbv16_i(Fl_Value_Input* o, void*) {
  int pos;
pos = ((hor->pattern_bars - 1) * (4 * hor->Rt[hor->ae].quarter_note)) + 16;
hor->Rt[hor->ae].Line_Bass_Velocity[pos] = (int) o->value();
}
void HORGAN::cb_lbv16(Fl_Value_Input* o, void* v) {
  ((HORGAN*)(o->parent()->parent()->user_data()))->cb_lbv16_i(o,v);
}

void HORGAN::cb_SBar_i(Fl_Counter* o, void*) {
  if (o->value() > hor->Rt[hor->ae].bars) o->value(hor->Rt[hor->ae].bars);
hor->pattern_bars = (int) o->value();
meteval();
}
void HORGAN::cb_SBar(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_SBar_i(o,v);
}

void HORGAN::cb_CloRit_i(Fl_Button*, void*) {
  RitEdit->do_callback();
}
void HORGAN::cb_CloRit(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_CloRit_i(o,v);
}

void HORGAN::cb_Browse2_i(Fl_Button*, void*) {
  char *filename;
filename=fl_file_chooser("Browse:","(*.wav)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".wav");
RtFile->value(filename);
}
void HORGAN::cb_Browse2(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_Browse2_i(o,v);
}

void HORGAN::cb_ADSRwin_i(Fl_Double_Window* o, void*) {
  Guarda_Pref(3);
o->hide();
}
void HORGAN::cb_ADSRwin(Fl_Double_Window* o, void* v) {
  ((HORGAN*)(o->user_data()))->cb_ADSRwin_i(o,v);
}

void HORGAN::cb_D_attack_i(Rueda* o, void*) {
  hor->a[0].attack=o->value();
hor->u_attack = 1.0 / hor->a[0].attack;
ponvalor(o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_D_attack(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_attack_i(o,v);
}

void HORGAN::cb_D_decay_i(Rueda* o, void*) {
  hor->a[0].decay=o->value();
hor->u_decay= 1.0 / hor->a[0].decay;
ponvalor(o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_D_decay(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_decay_i(o,v);
}

void HORGAN::cb_D_sustain_i(Rueda* o, void*) {
  hor->a[0].sustain=o->value();
ponvalor(o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_D_sustain(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_sustain_i(o,v);
}

void HORGAN::cb_D_p_attack_i(Rueda* o, void*) {
  hor->a[0].p_attack=o->value();
hor->u_p_attack= 1.0 / hor->a[0].p_attack;
ponvalor(o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_D_p_attack(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_p_attack_i(o,v);
}

void HORGAN::cb_D_p_decay_i(Rueda* o, void*) {
  hor->a[0].p_decay=o->value();
hor->u_p_decay= 1.0 / hor->a[0].p_decay;
ponvalor(o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_D_p_decay(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_p_decay_i(o,v);
}

void HORGAN::cb_D_Freq_i(Fl_Counter* o, void*) {
  D_Att->value(hor->a[0].Normalize[(int)o->value()]);

char temp[32];
bzero(temp,sizeof(temp));
sprintf(temp,"Frequency %.1f",hor->lasfreq[(int)o->value()]);
Saca->copy_label(temp);
}
void HORGAN::cb_D_Freq(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Freq_i(o,v);
}

void HORGAN::cb_D_Att_i(Fl_Counter* o, void*) {
  hor->a[0].Normalize[(int) D_Freq->value()]=o->value();
Actu();
}
void HORGAN::cb_D_Att(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Att_i(o,v);
}

void HORGAN::cb_D_Freq_F_i(Fl_Counter* o, void*) {
  D_FFval->value(hor->a[0].Operator[(int)o->value()].harmonic_fine);

char temp[32];
bzero(temp,sizeof(temp));
sprintf(temp,"Drawbar %d",(int)o->value());
Saca->copy_label(temp);
}
void HORGAN::cb_D_Freq_F(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Freq_F_i(o,v);
}

void HORGAN::cb_D_FFval_i(Fl_Counter* o, void*) {
  hor->a[0].Operator[(int) D_Freq_F->value()].harmonic_fine=o->value();
Actu();
}
void HORGAN::cb_D_FFval(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_FFval_i(o,v);
}

void HORGAN::cb_D_Rot_Amp_i(Fl_Counter* o, void*) {
  hor->a[0].Rotary_LFO_Amplitude=o->value();
Actu();
}
void HORGAN::cb_D_Rot_Amp(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Rot_Amp_i(o,v);
}

void HORGAN::cb_D_O_Transpose_i(Fl_Counter* o, void*) {
  hor->a[0].organ_transpose=(int)o->value();
Actu();
}
void HORGAN::cb_D_O_Transpose(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_O_Transpose_i(o,v);
}

void HORGAN::cb_D_c_attack_i(Rueda* o, void*) {
  hor->a[0].c_attack=o->value();
hor->u_c_attack= 1.0 / hor->a[0].c_attack;
ponvalor(o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_D_c_attack(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_c_attack_i(o,v);
}

void HORGAN::cb_D_c_decay_i(Rueda* o, void*) {
  hor->a[0].c_decay=o->value();
hor->u_c_decay= 1.0 / hor->a[0].c_decay;
ponvalor(o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_D_c_decay(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_c_decay_i(o,v);
}

void HORGAN::cb_D_Click_Freq_i(Fl_Counter* o, void*) {
  hor->a[0].Click_Freq=o->value();
Actu();
}
void HORGAN::cb_D_Click_Freq(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Click_Freq_i(o,v);
}

void HORGAN::cb_D_Click_Vol_i(Rueda* o, void*) {
  hor->a[0].Click_Vol=o->value();
ponvalor(o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_D_Click_Vol(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Click_Vol_i(o,v);
}

void HORGAN::cb_D_Click2_Vol_i(Rueda* o, void*) {
  hor->a[0].Click2_Vol=o->value();
ponvalor(o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_D_Click2_Vol(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Click2_Vol_i(o,v);
}

void HORGAN::cb_D_Click_Freq2_i(Fl_Counter* o, void*) {
  hor->a[0].Click_Freq2=o->value();
Actu();
}
void HORGAN::cb_D_Click_Freq2(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Click_Freq2_i(o,v);
}

void HORGAN::cb_D_Click_Vol1_i(Rueda* o, void*) {
  hor->a[0].Click_Vol1=o->value();
ponvalor(o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_D_Click_Vol1(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Click_Vol1_i(o,v);
}

void HORGAN::cb_D_Click_Vol2_i(Rueda* o, void*) {
  hor->a[0].Click_Vol2=o->value();
ponvalor(o->value());
if (Signal_for_Cb_Sliders == 1)
{ 
Actu();
Signal_for_Cb_Sliders = 0;
};
}
void HORGAN::cb_D_Click_Vol2(Rueda* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Click_Vol2_i(o,v);
}

void HORGAN::cb_D_Wave_Type_i(Fl_Counter* o, void*) {
  D_Wave_Type_Val->value(hor->a[0].Operator[(int)o->value()].wave);

char temp[32];
bzero(temp,sizeof(temp));
sprintf(temp,"Drawbar %d",(int)o->value());
Saca->copy_label(temp);
}
void HORGAN::cb_D_Wave_Type(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Wave_Type_i(o,v);
}

void HORGAN::cb_D_Wave_Type_Val_i(Fl_Counter* o, void*) {
  hor->a[0].Operator[(int)D_Wave_Type->value()].wave=(int)o->value();
Actu();
}
void HORGAN::cb_D_Wave_Type_Val(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Wave_Type_Val_i(o,v);
}

void HORGAN::cb_D_KeybS_i(Fl_Button* o, void*) {
  hor->a[0].scaling=o->value();
Actu();
}
void HORGAN::cb_D_KeybS(Fl_Button* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_KeybS_i(o,v);
}

void HORGAN::cb_D_Wave_Type_LFO_i(Fl_Counter* o, void*) {
  hor->a[0].LFO_Wave=(int)o->value();
Actu();
}
void HORGAN::cb_D_Wave_Type_LFO(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Wave_Type_LFO_i(o,v);
}

void HORGAN::cb_D_Wave_Type_Chorus_i(Fl_Counter* o, void*) {
  hor->a[0].Chorus_Wave=(int)o->value();
Actu();
}
void HORGAN::cb_D_Wave_Type_Chorus(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Wave_Type_Chorus_i(o,v);
}

void HORGAN::cb_D_Wave_Type_Rotary_i(Fl_Counter* o, void*) {
  hor->a[0].Rotary_Wave=(int)o->value();
Actu();
}
void HORGAN::cb_D_Wave_Type_Rotary(Fl_Counter* o, void* v) {
  ((HORGAN*)(o->parent()->user_data()))->cb_D_Wave_Type_Rotary_i(o,v);
}

Fl_Double_Window* HORGAN::make_window() {
  { HORwindow = new Fl_Double_Window(825, 595);
    HORwindow->color((Fl_Color)33);
    HORwindow->selection_color(FL_DARK1);
    HORwindow->callback((Fl_Callback*)cb_HORwindow, (void*)(this));
    { Fl_Box* o = new Fl_Box(595, 405, 230, 190);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(0, 310, 595, 285);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(385, 235, 80, 75);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(530, 90, 65, 220);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(0, 90, 105, 220);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(19);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(-30, 25, 855, 65);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(465, 90, 65, 220);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(105, 90, 65, 220);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(19);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(235, 235, 150, 75);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(385, 90, 80, 145);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(170, 90, 65, 220);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(19);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { PANICO = new Fl_Button(5, 275, 95, 30, gettext("Panic!!"));
      PANICO->box(FL_PLASTIC_UP_BOX);
      PANICO->shortcut(0xff0d);
      PANICO->color((Fl_Color)1);
      PANICO->labelcolor(FL_BACKGROUND2_COLOR);
      PANICO->callback((Fl_Callback*)cb_PANICO);
    } // Fl_Button* PANICO
    { MenuPrincipal = new Fl_Menu_Bar(0, 0, 1030, 25);
      MenuPrincipal->box(FL_THIN_UP_BOX);
      MenuPrincipal->menu(menu_MenuPrincipal);
    } // Fl_Menu_Bar* MenuPrincipal
    { Fl_Box* o = new Fl_Box(240, 139, 46, 46);
      o->box(FL_OVAL_FRAME);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(305, 115, 31, 90);
      o->box(FL_DOWN_FRAME);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(235, 90, 150, 145);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(19);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(250, 210, 55, 20, gettext("Volume"));
      o->labelsize(10);
      o->labelcolor((Fl_Color)208);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { MT = new Fl_Box(385, 240, 75, 15, gettext("Master Tune"));
      MT->labelsize(10);
      MT->labelcolor((Fl_Color)208);
      MT->callback((Fl_Callback*)cb_MT);
      MT->align(192|FL_ALIGN_INSIDE);
    } // Fl_Box* MT
    { Fl_Box* o = new Fl_Box(320, 240, 45, 15, gettext("Delay"));
      o->labelsize(10);
      o->labelcolor((Fl_Color)208);
      o->align(192|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(385, 273, 75, 15, gettext("Transpose"));
      o->labelsize(10);
      o->labelcolor((Fl_Color)208);
      o->align(192|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(315, 273, 50, 15, gettext("Volume"));
      o->labelsize(10);
      o->labelcolor((Fl_Color)208);
      o->align(192|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { CF = new Fl_Light_Button(5, 235, 95, 40, gettext("Compare First"));
      CF->box(FL_PLASTIC_UP_BOX);
      CF->color(FL_FOREGROUND_COLOR);
      CF->labelsize(12);
      CF->labelcolor(FL_BACKGROUND2_COLOR);
      CF->callback((Fl_Callback*)cb_CF);
      CF->align(196|FL_ALIGN_INSIDE);
      CF->when(FL_WHEN_CHANGED);
    } // Fl_Light_Button* CF
    { CL = new Fl_Light_Button(5, 195, 95, 40, gettext("Compare Last"));
      CL->box(FL_PLASTIC_UP_BOX);
      CL->color(FL_FOREGROUND_COLOR);
      CL->labelsize(12);
      CL->labelcolor(FL_BACKGROUND2_COLOR);
      CL->callback((Fl_Callback*)cb_CL);
      CL->align(196|FL_ALIGN_INSIDE);
      CL->when(FL_WHEN_CHANGED);
    } // Fl_Light_Button* CL
    { VUI1 = new Fl_Slider(795, 35, 25, 50);
      VUI1->type(2);
      VUI1->color((Fl_Color)30);
      VUI1->selection_color((Fl_Color)79);
      VUI1->minimum(127);
      VUI1->maximum(0);
      VUI1->step(1);
      VUI1->callback((Fl_Callback*)cb_VUI1);
    } // Fl_Slider* VUI1
    { Fl_Box* o = new Fl_Box(725, 65, 65, 20, gettext("MIDI IN"));
      o->labelsize(9);
      o->align(FL_ALIGN_CLIP);
    } // Fl_Box* o
    { Fl_Box* o = DMIN1 = new Fl_Box(530, 35, 260, 25);
      DMIN1->box(FL_PLASTIC_DOWN_BOX);
      DMIN1->color((Fl_Color)40);
      DMIN1->labelsize(12);
      DMIN1->callback((Fl_Callback*)cb_DMIN1);
      DMIN1->align(68|FL_ALIGN_INSIDE);
      o->label(hor->MID);
    } // Fl_Box* DMIN1
    { DispNumber = new Fl_Box(15, 100, 75, 60, gettext("--"));
      DispNumber->box(FL_SHADOW_BOX);
      DispNumber->color(FL_FOREGROUND_COLOR);
      DispNumber->selection_color(FL_BACKGROUND2_COLOR);
      DispNumber->labeltype(FL_ENGRAVED_LABEL);
      DispNumber->labelfont(14);
      DispNumber->labelsize(37);
      DispNumber->labelcolor((Fl_Color)128);
      DispNumber->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* DispNumber
    { Transpose = new Fl_Counter(395, 285, 60, 20);
      Transpose->type(1);
      Transpose->labeltype(FL_EMBOSSED_LABEL);
      Transpose->labelcolor((Fl_Color)208);
      Transpose->minimum(-48);
      Transpose->maximum(48);
      Transpose->step(1);
      Transpose->callback((Fl_Callback*)cb_Transpose);
      Transpose->align(FL_ALIGN_LEFT);
      Transpose->when(FL_WHEN_RELEASE);
    } // Fl_Counter* Transpose
    { Master = new Drawbar(535, 100, 55, 190, gettext("Master"));
      Master->type(4);
      Master->box(FL_PLASTIC_DOWN_BOX);
      Master->color(FL_FOREGROUND_COLOR);
      Master->selection_color((Fl_Color)1);
      Master->labeltype(FL_NORMAL_LABEL);
      Master->labelfont(0);
      Master->labelsize(10);
      Master->labelcolor((Fl_Color)4);
      Master->minimum(100);
      Master->maximum(0);
      Master->step(1);
      Master->value(70);
      Master->callback((Fl_Callback*)cb_Master);
      Master->align(FL_ALIGN_BOTTOM);
      Master->when(FL_WHEN_CHANGED);
    } // Drawbar* Master
    { Nombre = new Fl_Input(5, 35, 300, 50, gettext("  "));
      Nombre->box(FL_PLASTIC_DOWN_BOX);
      Nombre->color((Fl_Color)219);
      Nombre->labeltype(FL_ENGRAVED_LABEL);
      Nombre->labelsize(21);
      Nombre->labelcolor((Fl_Color)208);
      Nombre->textsize(29);
      Nombre->textcolor(88);
      Nombre->callback((Fl_Callback*)cb_Nombre);
      Nombre->align(68);
    } // Fl_Input* Nombre
    { MasterT = new Fl_Counter(395, 255, 60, 20);
      MasterT->type(1);
      MasterT->labeltype(FL_EMBOSSED_LABEL);
      MasterT->labelcolor((Fl_Color)208);
      MasterT->minimum(-99);
      MasterT->maximum(99);
      MasterT->step(1);
      MasterT->callback((Fl_Callback*)cb_MasterT);
      MasterT->align(FL_ALIGN_LEFT);
    } // Fl_Counter* MasterT
    { V1 = new Drawbar(2, 335, 55, 205);
      V1->type(4);
      V1->box(FL_PLASTIC_DOWN_BOX);
      V1->color(FL_FOREGROUND_COLOR);
      V1->selection_color(FL_GREEN);
      V1->labeltype(FL_ENGRAVED_LABEL);
      V1->labelfont(0);
      V1->labelsize(14);
      V1->labelcolor((Fl_Color)4);
      V1->maximum(99);
      V1->step(1);
      V1->callback((Fl_Callback*)cb_V1);
      V1->align(66);
      V1->when(FL_WHEN_CHANGED);
    } // Drawbar* V1
    { V2 = new Drawbar(61, 335, 55, 205);
      V2->type(4);
      V2->box(FL_PLASTIC_DOWN_BOX);
      V2->color(FL_FOREGROUND_COLOR);
      V2->selection_color(FL_GREEN);
      V2->labeltype(FL_ENGRAVED_LABEL);
      V2->labelfont(0);
      V2->labelsize(14);
      V2->labelcolor((Fl_Color)4);
      V2->maximum(99);
      V2->step(1);
      V2->callback((Fl_Callback*)cb_V2);
      V2->align(66);
      V2->when(FL_WHEN_CHANGED);
    } // Drawbar* V2
    { V3 = new Drawbar(120, 335, 55, 205);
      V3->type(4);
      V3->box(FL_PLASTIC_DOWN_BOX);
      V3->color(FL_FOREGROUND_COLOR);
      V3->selection_color(FL_GREEN);
      V3->labeltype(FL_ENGRAVED_LABEL);
      V3->labelfont(0);
      V3->labelsize(14);
      V3->labelcolor((Fl_Color)4);
      V3->maximum(99);
      V3->step(1);
      V3->callback((Fl_Callback*)cb_V3);
      V3->align(66);
      V3->when(FL_WHEN_CHANGED);
    } // Drawbar* V3
    { V4 = new Drawbar(179, 335, 55, 205);
      V4->type(4);
      V4->box(FL_PLASTIC_DOWN_BOX);
      V4->color(FL_FOREGROUND_COLOR);
      V4->selection_color(FL_GREEN);
      V4->labeltype(FL_ENGRAVED_LABEL);
      V4->labelfont(0);
      V4->labelsize(14);
      V4->labelcolor((Fl_Color)4);
      V4->maximum(99);
      V4->step(1);
      V4->callback((Fl_Callback*)cb_V4);
      V4->align(66);
      V4->when(FL_WHEN_CHANGED);
    } // Drawbar* V4
    { V5 = new Drawbar(238, 335, 55, 205);
      V5->type(4);
      V5->box(FL_PLASTIC_DOWN_BOX);
      V5->color(FL_FOREGROUND_COLOR);
      V5->selection_color(FL_GREEN);
      V5->labeltype(FL_ENGRAVED_LABEL);
      V5->labelfont(0);
      V5->labelsize(14);
      V5->labelcolor((Fl_Color)4);
      V5->maximum(99);
      V5->step(1);
      V5->callback((Fl_Callback*)cb_V5);
      V5->align(66);
      V5->when(FL_WHEN_CHANGED);
    } // Drawbar* V5
    { V6 = new Drawbar(297, 335, 55, 205);
      V6->type(4);
      V6->box(FL_PLASTIC_DOWN_BOX);
      V6->color(FL_FOREGROUND_COLOR);
      V6->selection_color(FL_GREEN);
      V6->labeltype(FL_ENGRAVED_LABEL);
      V6->labelfont(0);
      V6->labelsize(14);
      V6->labelcolor((Fl_Color)4);
      V6->maximum(99);
      V6->step(1);
      V6->callback((Fl_Callback*)cb_V6);
      V6->align(66);
      V6->when(FL_WHEN_CHANGED);
    } // Drawbar* V6
    { V7 = new Drawbar(356, 335, 55, 205);
      V7->type(4);
      V7->box(FL_PLASTIC_DOWN_BOX);
      V7->color(FL_FOREGROUND_COLOR);
      V7->selection_color(FL_GREEN);
      V7->labeltype(FL_ENGRAVED_LABEL);
      V7->labelfont(0);
      V7->labelsize(14);
      V7->labelcolor((Fl_Color)4);
      V7->maximum(99);
      V7->step(1);
      V7->callback((Fl_Callback*)cb_V7);
      V7->align(66);
      V7->when(FL_WHEN_CHANGED);
    } // Drawbar* V7
    { V8 = new Drawbar(415, 335, 55, 205);
      V8->type(4);
      V8->box(FL_PLASTIC_DOWN_BOX);
      V8->color(FL_FOREGROUND_COLOR);
      V8->selection_color(FL_GREEN);
      V8->labeltype(FL_ENGRAVED_LABEL);
      V8->labelfont(0);
      V8->labelsize(14);
      V8->labelcolor((Fl_Color)4);
      V8->maximum(99);
      V8->step(1);
      V8->callback((Fl_Callback*)cb_V8);
      V8->align(66);
      V8->when(FL_WHEN_CHANGED);
    } // Drawbar* V8
    { V9 = new Drawbar(474, 335, 55, 205);
      V9->type(4);
      V9->box(FL_PLASTIC_DOWN_BOX);
      V9->color(FL_FOREGROUND_COLOR);
      V9->selection_color(FL_GREEN);
      V9->labeltype(FL_ENGRAVED_LABEL);
      V9->labelfont(0);
      V9->labelsize(14);
      V9->labelcolor((Fl_Color)4);
      V9->maximum(99);
      V9->step(1);
      V9->callback((Fl_Callback*)cb_V9);
      V9->align(66);
      V9->when(FL_WHEN_CHANGED);
    } // Drawbar* V9
    { V10 = new Drawbar(533, 335, 55, 205);
      V10->type(4);
      V10->box(FL_PLASTIC_DOWN_BOX);
      V10->color(FL_FOREGROUND_COLOR);
      V10->selection_color(FL_GREEN);
      V10->labeltype(FL_ENGRAVED_LABEL);
      V10->labelfont(0);
      V10->labelsize(14);
      V10->labelcolor((Fl_Color)4);
      V10->maximum(99);
      V10->step(1);
      V10->callback((Fl_Callback*)cb_V10);
      V10->align(66);
      V10->when(FL_WHEN_CHANGED);
    } // Drawbar* V10
    { Detune = new Rueda(180, 250, 45, 45, gettext("Detune"));
      Detune->box(FL_OSHADOW_BOX);
      Detune->color(FL_DARK1);
      Detune->selection_color(FL_INACTIVE_COLOR);
      Detune->labeltype(FL_NORMAL_LABEL);
      Detune->labelfont(0);
      Detune->labelsize(10);
      Detune->labelcolor((Fl_Color)4);
      Detune->maximum(100);
      Detune->step(0.1);
      Detune->callback((Fl_Callback*)cb_Detune);
      Detune->align(FL_ALIGN_BOTTOM);
      Detune->when(FL_WHEN_RELEASE);
    } // Rueda* Detune
    { LFOSpeed = new Rueda(180, 95, 45, 45, gettext("Speed"));
      LFOSpeed->box(FL_OSHADOW_BOX);
      LFOSpeed->color(FL_DARK1);
      LFOSpeed->selection_color(FL_INACTIVE_COLOR);
      LFOSpeed->labeltype(FL_NORMAL_LABEL);
      LFOSpeed->labelfont(0);
      LFOSpeed->labelsize(10);
      LFOSpeed->labelcolor((Fl_Color)4);
      LFOSpeed->maximum(40);
      LFOSpeed->step(0.1);
      LFOSpeed->callback((Fl_Callback*)cb_LFOSpeed);
      LFOSpeed->align(FL_ALIGN_BOTTOM);
      LFOSpeed->when(FL_WHEN_CHANGED);
    } // Rueda* LFOSpeed
    { LFOPitch = new Rueda(115, 250, 45, 45, gettext("Tremolo"));
      LFOPitch->box(FL_OSHADOW_BOX);
      LFOPitch->color(FL_DARK1);
      LFOPitch->selection_color(FL_INACTIVE_COLOR);
      LFOPitch->labeltype(FL_NORMAL_LABEL);
      LFOPitch->labelfont(0);
      LFOPitch->labelsize(10);
      LFOPitch->labelcolor((Fl_Color)4);
      LFOPitch->maximum(200);
      LFOPitch->step(1);
      LFOPitch->callback((Fl_Callback*)cb_LFOPitch);
      LFOPitch->align(FL_ALIGN_BOTTOM);
      LFOPitch->when(FL_WHEN_CHANGED);
    } // Rueda* LFOPitch
    { PLFOSpeed = new Rueda(115, 95, 45, 45, gettext("Speed"));
      PLFOSpeed->box(FL_OSHADOW_BOX);
      PLFOSpeed->color(FL_DARK1);
      PLFOSpeed->selection_color(FL_INACTIVE_COLOR);
      PLFOSpeed->labeltype(FL_NORMAL_LABEL);
      PLFOSpeed->labelfont(0);
      PLFOSpeed->labelsize(10);
      PLFOSpeed->labelcolor((Fl_Color)4);
      PLFOSpeed->maximum(40);
      PLFOSpeed->step(0.01);
      PLFOSpeed->callback((Fl_Callback*)cb_PLFOSpeed);
      PLFOSpeed->align(FL_ALIGN_BOTTOM);
      PLFOSpeed->when(FL_WHEN_CHANGED);
    } // Rueda* PLFOSpeed
    { PLFODelay = new Rueda(115, 190, 45, 45, gettext("Delay"));
      PLFODelay->box(FL_OSHADOW_BOX);
      PLFODelay->color(FL_DARK1);
      PLFODelay->selection_color(FL_INACTIVE_COLOR);
      PLFODelay->labeltype(FL_NORMAL_LABEL);
      PLFODelay->labelfont(0);
      PLFODelay->labelsize(10);
      PLFODelay->labelcolor((Fl_Color)4);
      PLFODelay->maximum(99);
      PLFODelay->step(1);
      PLFODelay->callback((Fl_Callback*)cb_PLFODelay);
      PLFODelay->align(FL_ALIGN_BOTTOM);
      PLFODelay->when(FL_WHEN_CHANGED);
    } // Rueda* PLFODelay
    { EchoVol = new Fl_Counter(310, 285, 65, 20);
      EchoVol->type(1);
      EchoVol->labelcolor((Fl_Color)208);
      EchoVol->minimum(0);
      EchoVol->maximum(99);
      EchoVol->step(1);
      EchoVol->callback((Fl_Callback*)cb_EchoVol);
      EchoVol->when(FL_WHEN_RELEASE);
    } // Fl_Counter* EchoVol
    { EchoDelay = new Fl_Counter(310, 255, 65, 20);
      EchoDelay->type(1);
      EchoDelay->labelcolor((Fl_Color)208);
      EchoDelay->minimum(0);
      EchoDelay->maximum(1);
      EchoDelay->step(0.01);
      EchoDelay->callback((Fl_Callback*)cb_EchoDelay);
      EchoDelay->when(FL_WHEN_RELEASE);
    } // Fl_Counter* EchoDelay
    { H1 = new Fl_Slider(2, 563, 55, 25);
      H1->type(5);
      H1->box(FL_PLASTIC_DOWN_BOX);
      H1->color(FL_FOREGROUND_COLOR);
      H1->selection_color((Fl_Color)3);
      H1->labeltype(FL_ENGRAVED_LABEL);
      H1->labelcolor((Fl_Color)4);
      H1->minimum(1);
      H1->maximum(22);
      H1->step(1);
      H1->callback((Fl_Callback*)cb_H1);
      H1->align(FL_ALIGN_TOP);
      H1->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H1
    { H2 = new Fl_Slider(61, 563, 55, 25);
      H2->type(5);
      H2->box(FL_PLASTIC_DOWN_BOX);
      H2->color(FL_FOREGROUND_COLOR);
      H2->selection_color((Fl_Color)3);
      H2->labeltype(FL_ENGRAVED_LABEL);
      H2->labelcolor((Fl_Color)4);
      H2->minimum(1);
      H2->maximum(22);
      H2->step(1);
      H2->callback((Fl_Callback*)cb_H2);
      H2->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H2
    { H3 = new Fl_Slider(120, 565, 55, 25);
      H3->type(5);
      H3->box(FL_PLASTIC_DOWN_BOX);
      H3->color(FL_FOREGROUND_COLOR);
      H3->selection_color((Fl_Color)3);
      H3->labeltype(FL_ENGRAVED_LABEL);
      H3->labelcolor((Fl_Color)4);
      H3->minimum(1);
      H3->maximum(22);
      H3->step(1);
      H3->callback((Fl_Callback*)cb_H3);
      H3->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H3
    { H4 = new Fl_Slider(179, 565, 55, 25);
      H4->type(5);
      H4->box(FL_PLASTIC_DOWN_BOX);
      H4->color(FL_FOREGROUND_COLOR);
      H4->selection_color((Fl_Color)3);
      H4->labeltype(FL_ENGRAVED_LABEL);
      H4->labelcolor((Fl_Color)4);
      H4->minimum(1);
      H4->maximum(22);
      H4->step(1);
      H4->callback((Fl_Callback*)cb_H4);
      H4->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H4
    { H5 = new Fl_Slider(238, 565, 55, 25);
      H5->type(5);
      H5->box(FL_PLASTIC_DOWN_BOX);
      H5->color(FL_FOREGROUND_COLOR);
      H5->selection_color((Fl_Color)3);
      H5->labeltype(FL_ENGRAVED_LABEL);
      H5->labelcolor((Fl_Color)4);
      H5->minimum(1);
      H5->maximum(22);
      H5->step(1);
      H5->callback((Fl_Callback*)cb_H5);
      H5->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H5
    { H6 = new Fl_Slider(297, 565, 55, 25);
      H6->type(5);
      H6->box(FL_PLASTIC_DOWN_BOX);
      H6->color(FL_FOREGROUND_COLOR);
      H6->selection_color((Fl_Color)3);
      H6->labeltype(FL_ENGRAVED_LABEL);
      H6->labelcolor((Fl_Color)4);
      H6->minimum(1);
      H6->maximum(22);
      H6->step(1);
      H6->callback((Fl_Callback*)cb_H6);
      H6->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H6
    { H7 = new Fl_Slider(356, 565, 55, 25);
      H7->type(5);
      H7->box(FL_PLASTIC_DOWN_BOX);
      H7->color(FL_FOREGROUND_COLOR);
      H7->selection_color((Fl_Color)3);
      H7->labeltype(FL_ENGRAVED_LABEL);
      H7->labelcolor((Fl_Color)4);
      H7->minimum(1);
      H7->maximum(22);
      H7->step(1);
      H7->callback((Fl_Callback*)cb_H7);
      H7->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H7
    { H8 = new Fl_Slider(415, 565, 55, 25);
      H8->type(5);
      H8->box(FL_PLASTIC_DOWN_BOX);
      H8->color(FL_FOREGROUND_COLOR);
      H8->selection_color((Fl_Color)3);
      H8->labeltype(FL_ENGRAVED_LABEL);
      H8->labelcolor((Fl_Color)4);
      H8->minimum(1);
      H8->maximum(22);
      H8->step(1);
      H8->callback((Fl_Callback*)cb_H8);
      H8->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H8
    { H9 = new Fl_Slider(474, 565, 55, 25);
      H9->type(5);
      H9->box(FL_PLASTIC_DOWN_BOX);
      H9->color(FL_FOREGROUND_COLOR);
      H9->selection_color((Fl_Color)3);
      H9->labeltype(FL_ENGRAVED_LABEL);
      H9->labelcolor((Fl_Color)4);
      H9->minimum(1);
      H9->maximum(22);
      H9->step(1);
      H9->callback((Fl_Callback*)cb_H9);
      H9->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H9
    { H10 = new Fl_Slider(533, 565, 55, 25);
      H10->type(5);
      H10->box(FL_PLASTIC_DOWN_BOX);
      H10->color(FL_FOREGROUND_COLOR);
      H10->selection_color((Fl_Color)3);
      H10->labeltype(FL_ENGRAVED_LABEL);
      H10->labelcolor((Fl_Color)4);
      H10->minimum(1);
      H10->maximum(22);
      H10->step(1);
      H10->callback((Fl_Callback*)cb_H10);
      H10->when(FL_WHEN_RELEASE);
    } // Fl_Slider* H10
    { Rota = new Fl_Button(180, 160, 45, 30, gettext("Rotary"));
      Rota->type(1);
      Rota->box(FL_PLASTIC_UP_BOX);
      Rota->color((Fl_Color)31);
      Rota->selection_color((Fl_Color)135);
      Rota->labelsize(9);
      Rota->callback((Fl_Callback*)cb_Rota);
      Rota->align(FL_ALIGN_CLIP);
    } // Fl_Button* Rota
    { ELFOSpeed = new Rueda(245, 140, 45, 45, gettext("Speed"));
      ELFOSpeed->box(FL_OSHADOW_BOX);
      ELFOSpeed->color(FL_DARK1);
      ELFOSpeed->selection_color(FL_INACTIVE_COLOR);
      ELFOSpeed->labeltype(FL_NORMAL_LABEL);
      ELFOSpeed->labelfont(0);
      ELFOSpeed->labelsize(10);
      ELFOSpeed->labelcolor((Fl_Color)4);
      ELFOSpeed->maximum(40);
      ELFOSpeed->step(0.01);
      ELFOSpeed->callback((Fl_Callback*)cb_ELFOSpeed);
      ELFOSpeed->align(FL_ALIGN_BOTTOM);
      ELFOSpeed->when(FL_WHEN_CHANGED);
    } // Rueda* ELFOSpeed
    { ELFOAmplitude = new Drawbar(310, 115, 30, 90, gettext("Amp"));
      ELFOAmplitude->type(4);
      ELFOAmplitude->box(FL_PLASTIC_DOWN_BOX);
      ELFOAmplitude->color(FL_FOREGROUND_COLOR);
      ELFOAmplitude->selection_color((Fl_Color)1);
      ELFOAmplitude->labeltype(FL_NORMAL_LABEL);
      ELFOAmplitude->labelfont(0);
      ELFOAmplitude->labelsize(10);
      ELFOAmplitude->labelcolor((Fl_Color)4);
      ELFOAmplitude->maximum(99);
      ELFOAmplitude->step(1);
      ELFOAmplitude->callback((Fl_Callback*)cb_ELFOAmplitude);
      ELFOAmplitude->align(65);
      ELFOAmplitude->when(FL_WHEN_CHANGED);
    } // Drawbar* ELFOAmplitude
    { POPO = new Drawbar(345, 115, 30, 90, gettext("Del."));
      POPO->type(4);
      POPO->box(FL_PLASTIC_DOWN_BOX);
      POPO->color(FL_FOREGROUND_COLOR);
      POPO->selection_color((Fl_Color)3);
      POPO->labeltype(FL_NORMAL_LABEL);
      POPO->labelfont(0);
      POPO->labelsize(10);
      POPO->labelcolor((Fl_Color)4);
      POPO->maximum(99);
      POPO->step(0.1);
      POPO->callback((Fl_Callback*)cb_POPO);
      POPO->align(65);
      POPO->when(FL_WHEN_CHANGED);
    } // Drawbar* POPO
    { ChorVol = new Fl_Counter(310, 210, 65, 20);
      ChorVol->type(1);
      ChorVol->labelcolor((Fl_Color)208);
      ChorVol->minimum(0);
      ChorVol->maximum(99);
      ChorVol->step(1);
      ChorVol->callback((Fl_Callback*)cb_ChorVol);
      ChorVol->when(FL_WHEN_RELEASE);
    } // Fl_Counter* ChorVol
    { Split = new Fl_Button(765, 555, 45, 30, gettext("Split"));
      Split->type(1);
      Split->box(FL_PLASTIC_UP_BOX);
      Split->color((Fl_Color)31);
      Split->selection_color((Fl_Color)135);
      Split->labelsize(9);
      Split->callback((Fl_Callback*)cb_Split);
      Split->align(FL_ALIGN_CLIP);
    } // Fl_Button* Split
    { DMIN2 = new Fl_Box(530, 60, 85, 25);
      DMIN2->box(FL_PLASTIC_DOWN_BOX);
      DMIN2->color((Fl_Color)40);
      DMIN2->labelsize(12);
      DMIN2->callback((Fl_Callback*)cb_DMIN2);
      DMIN2->align(68|FL_ALIGN_INSIDE);
    } // Fl_Box* DMIN2
    { EchoOn = new Fl_Button(240, 245, 55, 30, gettext("Delay"));
      EchoOn->type(1);
      EchoOn->box(FL_PLASTIC_UP_BOX);
      EchoOn->color((Fl_Color)31);
      EchoOn->selection_color((Fl_Color)135);
      EchoOn->labelsize(9);
      EchoOn->callback((Fl_Callback*)cb_EchoOn);
      EchoOn->align(FL_ALIGN_CLIP);
    } // Fl_Button* EchoOn
    { ChorusOn = new Fl_Button(240, 100, 55, 30, gettext("Chorus"));
      ChorusOn->type(1);
      ChorusOn->box(FL_PLASTIC_UP_BOX);
      ChorusOn->color((Fl_Color)31);
      ChorusOn->selection_color((Fl_Color)135);
      ChorusOn->labelsize(8);
      ChorusOn->callback((Fl_Callback*)cb_ChorusOn);
      ChorusOn->align(FL_ALIGN_CLIP);
    } // Fl_Button* ChorusOn
    { Fl_Group* o = new Fl_Group(390, 135, 72, 100);
      { R1 = new Fl_Button(397, 135, 25, 20, gettext("1"));
        R1->type(102);
        R1->box(FL_PLASTIC_UP_BOX);
        R1->color((Fl_Color)31);
        R1->selection_color((Fl_Color)1);
        R1->labeltype(FL_ENGRAVED_LABEL);
        R1->labelsize(9);
        R1->callback((Fl_Callback*)cb_R1);
        R1->deactivate();
      } // Fl_Button* R1
      { R2 = new Fl_Button(427, 135, 25, 20, gettext("2"));
        R2->type(102);
        R2->box(FL_PLASTIC_UP_BOX);
        R2->color((Fl_Color)31);
        R2->selection_color((Fl_Color)1);
        R2->labeltype(FL_ENGRAVED_LABEL);
        R2->labelsize(9);
        R2->callback((Fl_Callback*)cb_R2);
        R2->deactivate();
      } // Fl_Button* R2
      { R3 = new Fl_Button(397, 160, 25, 20, gettext("3"));
        R3->type(102);
        R3->box(FL_PLASTIC_UP_BOX);
        R3->color((Fl_Color)31);
        R3->selection_color((Fl_Color)1);
        R3->labeltype(FL_ENGRAVED_LABEL);
        R3->labelsize(9);
        R3->callback((Fl_Callback*)cb_R3);
        R3->deactivate();
      } // Fl_Button* R3
      { R4 = new Fl_Button(427, 160, 25, 20, gettext("4"));
        R4->type(102);
        R4->box(FL_PLASTIC_UP_BOX);
        R4->color((Fl_Color)31);
        R4->selection_color((Fl_Color)1);
        R4->labeltype(FL_ENGRAVED_LABEL);
        R4->labelsize(9);
        R4->callback((Fl_Callback*)cb_R4);
        R4->deactivate();
      } // Fl_Button* R4
      { R5 = new Fl_Button(397, 185, 25, 20, gettext("5"));
        R5->type(102);
        R5->box(FL_PLASTIC_UP_BOX);
        R5->color((Fl_Color)31);
        R5->selection_color((Fl_Color)1);
        R5->labeltype(FL_ENGRAVED_LABEL);
        R5->labelsize(9);
        R5->callback((Fl_Callback*)cb_R5);
        R5->deactivate();
      } // Fl_Button* R5
      { R6 = new Fl_Button(427, 185, 25, 20, gettext("6"));
        R6->type(102);
        R6->box(FL_PLASTIC_UP_BOX);
        R6->color((Fl_Color)31);
        R6->selection_color((Fl_Color)1);
        R6->labeltype(FL_ENGRAVED_LABEL);
        R6->labelsize(9);
        R6->callback((Fl_Callback*)cb_R6);
        R6->deactivate();
      } // Fl_Button* R6
      { R7 = new Fl_Button(397, 210, 25, 20, gettext("7"));
        R7->type(102);
        R7->box(FL_PLASTIC_UP_BOX);
        R7->color((Fl_Color)31);
        R7->selection_color((Fl_Color)1);
        R7->labeltype(FL_ENGRAVED_LABEL);
        R7->labelsize(9);
        R7->callback((Fl_Callback*)cb_R7);
        R7->deactivate();
      } // Fl_Button* R7
      { R8 = new Fl_Button(427, 210, 25, 20, gettext("8"));
        R8->type(102);
        R8->box(FL_PLASTIC_UP_BOX);
        R8->color((Fl_Color)31);
        R8->selection_color((Fl_Color)1);
        R8->labeltype(FL_ENGRAVED_LABEL);
        R8->labelsize(9);
        R8->callback((Fl_Callback*)cb_R8);
        R8->deactivate();
      } // Fl_Button* R8
      o->end();
    } // Fl_Group* o
    { Rev = new Fl_Button(397, 100, 55, 30, gettext("Reverb"));
      Rev->type(1);
      Rev->box(FL_PLASTIC_UP_BOX);
      Rev->color((Fl_Color)31);
      Rev->selection_color((Fl_Color)3);
      Rev->labelsize(8);
      Rev->callback((Fl_Callback*)cb_Rev);
      Rev->align(FL_ALIGN_CLIP);
    } // Fl_Button* Rev
    { RitVol = new Fl_Slider(600, 415, 40, 155, gettext("Drums"));
      RitVol->type(4);
      RitVol->box(FL_PLASTIC_DOWN_BOX);
      RitVol->color(FL_FOREGROUND_COLOR);
      RitVol->selection_color((Fl_Color)3);
      RitVol->labelsize(10);
      RitVol->labelcolor((Fl_Color)4);
      RitVol->minimum(0.99);
      RitVol->maximum(0);
      RitVol->step(0.01);
      RitVol->value(0.5);
      RitVol->callback((Fl_Callback*)cb_RitVol);
      RitVol->align(194);
    } // Fl_Slider* RitVol
    { Tempo = new Fl_Dial(650, 525, 45, 45, gettext("Tempo"));
      Tempo->box(FL_OSHADOW_BOX);
      Tempo->color(FL_DARK1);
      Tempo->labelsize(10);
      Tempo->labelcolor((Fl_Color)4);
      Tempo->minimum(1.7);
      Tempo->maximum(2.7);
      Tempo->step(0.01);
      Tempo->value(2);
      Tempo->callback((Fl_Callback*)cb_Tempo);
      Tempo->align(194);
      Tempo->deactivate();
    } // Fl_Dial* Tempo
    { VUI2 = new Fl_Slider(645, 510, 15, 15);
      VUI2->type(2);
      VUI2->color((Fl_Color)30);
      VUI2->selection_color((Fl_Color)1);
      VUI2->minimum(127);
      VUI2->maximum(0);
      VUI2->step(1);
      VUI2->callback((Fl_Callback*)cb_VUI2);
    } // Fl_Slider* VUI2
    { RitOn = new Fl_Button(645, 465, 60, 35, gettext("Stop/Cont"));
      RitOn->type(1);
      RitOn->box(FL_PLASTIC_UP_BOX);
      RitOn->color((Fl_Color)31);
      RitOn->selection_color((Fl_Color)135);
      RitOn->labelsize(8);
      RitOn->callback((Fl_Callback*)cb_RitOn);
      RitOn->align(FL_ALIGN_CLIP);
    } // Fl_Button* RitOn
    { StStRiton = new Fl_Button(645, 425, 60, 35, gettext("Start/Stop"));
      StStRiton->type(1);
      StStRiton->box(FL_PLASTIC_UP_BOX);
      StStRiton->color((Fl_Color)31);
      StStRiton->selection_color((Fl_Color)135);
      StStRiton->labelsize(8);
      StStRiton->callback((Fl_Callback*)cb_StStRiton);
      StStRiton->align(FL_ALIGN_CLIP);
    } // Fl_Button* StStRiton
    { Fl_Box* o = new Fl_Box(595, 95, 230, 310);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(17);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP);
    } // Fl_Box* o
    { RitButtons = new Fl_Group(595, 88, 230, 317);
      RitButtons->box(FL_PLASTIC_UP_BOX);
      RitButtons->color(FL_FOREGROUND_COLOR);
      { Rit1 = new Fl_Button(605, 105, 95, 25);
        Rit1->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit1->type(1);
        Rit1->box(FL_PLASTIC_UP_BOX);
        Rit1->color((Fl_Color)31);
        Rit1->selection_color(FL_GREEN);
        Rit1->labeltype(FL_ENGRAVED_LABEL);
        Rit1->labelsize(11);
        Rit1->callback((Fl_Callback*)cb_Rit1);
        Rit1->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit1
      { Rit2 = new Fl_Button(605, 135, 95, 25);
        Rit2->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit2->type(1);
        Rit2->box(FL_PLASTIC_UP_BOX);
        Rit2->color((Fl_Color)31);
        Rit2->selection_color(FL_GREEN);
        Rit2->labeltype(FL_ENGRAVED_LABEL);
        Rit2->labelsize(11);
        Rit2->callback((Fl_Callback*)cb_Rit2);
        Rit2->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit2
      { Rit3 = new Fl_Button(605, 165, 95, 25);
        Rit3->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit3->type(1);
        Rit3->box(FL_PLASTIC_UP_BOX);
        Rit3->color((Fl_Color)31);
        Rit3->selection_color(FL_GREEN);
        Rit3->labeltype(FL_ENGRAVED_LABEL);
        Rit3->labelsize(11);
        Rit3->callback((Fl_Callback*)cb_Rit3);
        Rit3->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit3
      { Rit4 = new Fl_Button(605, 195, 95, 25);
        Rit4->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit4->type(1);
        Rit4->box(FL_PLASTIC_UP_BOX);
        Rit4->color((Fl_Color)31);
        Rit4->selection_color(FL_GREEN);
        Rit4->labeltype(FL_ENGRAVED_LABEL);
        Rit4->labelsize(11);
        Rit4->callback((Fl_Callback*)cb_Rit4);
        Rit4->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit4
      { Rit5 = new Fl_Button(605, 225, 95, 25);
        Rit5->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit5->type(1);
        Rit5->box(FL_PLASTIC_UP_BOX);
        Rit5->color((Fl_Color)31);
        Rit5->selection_color(FL_GREEN);
        Rit5->labeltype(FL_ENGRAVED_LABEL);
        Rit5->labelsize(11);
        Rit5->callback((Fl_Callback*)cb_Rit5);
        Rit5->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit5
      { Rit6 = new Fl_Button(605, 255, 95, 25);
        Rit6->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit6->type(1);
        Rit6->box(FL_PLASTIC_UP_BOX);
        Rit6->color((Fl_Color)31);
        Rit6->selection_color(FL_GREEN);
        Rit6->labeltype(FL_ENGRAVED_LABEL);
        Rit6->labelsize(11);
        Rit6->callback((Fl_Callback*)cb_Rit6);
        Rit6->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit6
      { Rit7 = new Fl_Button(605, 285, 95, 25);
        Rit7->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit7->type(1);
        Rit7->box(FL_PLASTIC_UP_BOX);
        Rit7->color((Fl_Color)31);
        Rit7->selection_color(FL_GREEN);
        Rit7->labeltype(FL_ENGRAVED_LABEL);
        Rit7->labelsize(11);
        Rit7->callback((Fl_Callback*)cb_Rit7);
        Rit7->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit7
      { Rit8 = new Fl_Button(605, 315, 95, 25);
        Rit8->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit8->type(1);
        Rit8->box(FL_PLASTIC_UP_BOX);
        Rit8->color((Fl_Color)31);
        Rit8->selection_color(FL_GREEN);
        Rit8->labeltype(FL_ENGRAVED_LABEL);
        Rit8->labelsize(11);
        Rit8->callback((Fl_Callback*)cb_Rit8);
        Rit8->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit8
      { Rit9 = new Fl_Button(605, 345, 95, 25);
        Rit9->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit9->type(1);
        Rit9->box(FL_PLASTIC_UP_BOX);
        Rit9->color((Fl_Color)31);
        Rit9->selection_color(FL_GREEN);
        Rit9->labeltype(FL_ENGRAVED_LABEL);
        Rit9->labelsize(11);
        Rit9->callback((Fl_Callback*)cb_Rit9);
        Rit9->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit9
      { Rit10 = new Fl_Button(605, 375, 95, 25);
        Rit10->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit10->type(1);
        Rit10->box(FL_PLASTIC_UP_BOX);
        Rit10->color((Fl_Color)31);
        Rit10->selection_color(FL_GREEN);
        Rit10->labeltype(FL_ENGRAVED_LABEL);
        Rit10->labelsize(11);
        Rit10->callback((Fl_Callback*)cb_Rit10);
        Rit10->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit10
      { Rit11 = new Fl_Button(720, 105, 95, 25);
        Rit11->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit11->type(1);
        Rit11->box(FL_PLASTIC_UP_BOX);
        Rit11->color((Fl_Color)31);
        Rit11->selection_color(FL_GREEN);
        Rit11->labeltype(FL_ENGRAVED_LABEL);
        Rit11->labelsize(11);
        Rit11->callback((Fl_Callback*)cb_Rit11);
        Rit11->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit11
      { Rit12 = new Fl_Button(720, 135, 95, 25);
        Rit12->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit12->type(1);
        Rit12->box(FL_PLASTIC_UP_BOX);
        Rit12->color((Fl_Color)31);
        Rit12->selection_color(FL_GREEN);
        Rit12->labeltype(FL_ENGRAVED_LABEL);
        Rit12->labelsize(11);
        Rit12->callback((Fl_Callback*)cb_Rit12);
        Rit12->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit12
      { Rit13 = new Fl_Button(720, 165, 95, 25);
        Rit13->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit13->type(1);
        Rit13->box(FL_PLASTIC_UP_BOX);
        Rit13->color((Fl_Color)31);
        Rit13->selection_color(FL_GREEN);
        Rit13->labeltype(FL_ENGRAVED_LABEL);
        Rit13->labelsize(11);
        Rit13->callback((Fl_Callback*)cb_Rit13);
        Rit13->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit13
      { Rit14 = new Fl_Button(720, 195, 95, 25);
        Rit14->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit14->type(1);
        Rit14->box(FL_PLASTIC_UP_BOX);
        Rit14->color((Fl_Color)31);
        Rit14->selection_color(FL_GREEN);
        Rit14->labeltype(FL_ENGRAVED_LABEL);
        Rit14->labelsize(11);
        Rit14->callback((Fl_Callback*)cb_Rit14);
        Rit14->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit14
      { Rit15 = new Fl_Button(720, 226, 95, 25);
        Rit15->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit15->type(1);
        Rit15->box(FL_PLASTIC_UP_BOX);
        Rit15->color((Fl_Color)31);
        Rit15->selection_color(FL_GREEN);
        Rit15->labeltype(FL_ENGRAVED_LABEL);
        Rit15->labelsize(11);
        Rit15->callback((Fl_Callback*)cb_Rit15);
        Rit15->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit15
      { Rit16 = new Fl_Button(720, 255, 95, 25);
        Rit16->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit16->type(1);
        Rit16->box(FL_PLASTIC_UP_BOX);
        Rit16->color((Fl_Color)31);
        Rit16->selection_color(FL_GREEN);
        Rit16->labeltype(FL_ENGRAVED_LABEL);
        Rit16->labelsize(11);
        Rit16->callback((Fl_Callback*)cb_Rit16);
        Rit16->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit16
      { Rit17 = new Fl_Button(720, 285, 95, 25);
        Rit17->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit17->type(1);
        Rit17->box(FL_PLASTIC_UP_BOX);
        Rit17->color((Fl_Color)31);
        Rit17->selection_color(FL_GREEN);
        Rit17->labeltype(FL_ENGRAVED_LABEL);
        Rit17->labelsize(11);
        Rit17->callback((Fl_Callback*)cb_Rit17);
        Rit17->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit17
      { Rit18 = new Fl_Button(720, 315, 95, 25);
        Rit18->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit18->type(1);
        Rit18->box(FL_PLASTIC_UP_BOX);
        Rit18->color((Fl_Color)31);
        Rit18->selection_color(FL_GREEN);
        Rit18->labeltype(FL_ENGRAVED_LABEL);
        Rit18->labelsize(11);
        Rit18->callback((Fl_Callback*)cb_Rit18);
        Rit18->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit18
      { Rit19 = new Fl_Button(720, 345, 95, 25);
        Rit19->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit19->type(1);
        Rit19->box(FL_PLASTIC_UP_BOX);
        Rit19->color((Fl_Color)31);
        Rit19->selection_color(FL_GREEN);
        Rit19->labeltype(FL_ENGRAVED_LABEL);
        Rit19->labelsize(11);
        Rit19->callback((Fl_Callback*)cb_Rit19);
        Rit19->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit19
      { Rit20 = new Fl_Button(720, 375, 95, 25);
        Rit20->tooltip(gettext("Right Click Edit -  Left Click Select"));
        Rit20->type(1);
        Rit20->box(FL_PLASTIC_UP_BOX);
        Rit20->color((Fl_Color)31);
        Rit20->selection_color(FL_GREEN);
        Rit20->labeltype(FL_ENGRAVED_LABEL);
        Rit20->labelsize(11);
        Rit20->callback((Fl_Callback*)cb_Rit20);
        Rit20->align(FL_ALIGN_CLIP);
      } // Fl_Button* Rit20
      RitButtons->end();
    } // Fl_Group* RitButtons
    { BassVol = new Fl_Slider(710, 415, 40, 155, gettext("Bass"));
      BassVol->type(4);
      BassVol->box(FL_PLASTIC_DOWN_BOX);
      BassVol->color(FL_FOREGROUND_COLOR);
      BassVol->selection_color((Fl_Color)3);
      BassVol->labelsize(10);
      BassVol->labelcolor((Fl_Color)4);
      BassVol->minimum(0.99);
      BassVol->maximum(0);
      BassVol->step(0.01);
      BassVol->value(0.5);
      BassVol->callback((Fl_Callback*)cb_BassVol);
      BassVol->align(194);
    } // Fl_Slider* BassVol
    { Basson = new Fl_Button(755, 425, 65, 35, gettext("Bass"));
      Basson->type(1);
      Basson->box(FL_PLASTIC_UP_BOX);
      Basson->color((Fl_Color)31);
      Basson->selection_color((Fl_Color)135);
      Basson->labelsize(8);
      Basson->callback((Fl_Callback*)cb_Basson);
      Basson->align(FL_ALIGN_CLIP);
    } // Fl_Button* Basson
    { Fl_Group* o = new Fl_Group(755, 465, 70, 95);
      { Bass1 = new Fl_Button(755, 465, 65, 25, gettext("Acoustic"));
        Bass1->type(102);
        Bass1->box(FL_PLASTIC_UP_BOX);
        Bass1->color((Fl_Color)31);
        Bass1->selection_color(FL_GREEN);
        Bass1->labeltype(FL_ENGRAVED_LABEL);
        Bass1->labelsize(11);
        Bass1->callback((Fl_Callback*)cb_Bass1);
        Bass1->align(FL_ALIGN_CLIP);
      } // Fl_Button* Bass1
      { Bass2 = new Fl_Button(755, 495, 65, 25, gettext("Electric"));
        Bass2->type(102);
        Bass2->box(FL_PLASTIC_UP_BOX);
        Bass2->color((Fl_Color)31);
        Bass2->selection_color(FL_GREEN);
        Bass2->labeltype(FL_ENGRAVED_LABEL);
        Bass2->labelsize(11);
        Bass2->callback((Fl_Callback*)cb_Bass2);
        Bass2->align(FL_ALIGN_CLIP);
      } // Fl_Button* Bass2
      { Bass3 = new Fl_Button(755, 525, 65, 25, gettext("Fretless"));
        Bass3->type(102);
        Bass3->box(FL_PLASTIC_UP_BOX);
        Bass3->color((Fl_Color)31);
        Bass3->selection_color(FL_GREEN);
        Bass3->labeltype(FL_ENGRAVED_LABEL);
        Bass3->labelsize(11);
        Bass3->callback((Fl_Callback*)cb_Bass3);
        Bass3->align(FL_ALIGN_CLIP);
      } // Fl_Button* Bass3
      o->end();
    } // Fl_Group* o
    { ACI = new Fl_Box(315, 35, 205, 50);
      ACI->box(FL_PLASTIC_DOWN_BOX);
      ACI->color((Fl_Color)219);
      ACI->labeltype(FL_ENGRAVED_LABEL);
      ACI->labelfont(1);
      ACI->labelsize(22);
      ACI->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* ACI
    { NV1 = new Fl_Value_Output(2, 543, 55, 20);
      NV1->color(FL_DARK1);
      NV1->selection_color((Fl_Color)1);
      NV1->maximum(16);
      NV1->step(0.5);
      NV1->textsize(12);
      NV1->textcolor(4);
      NV1->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV1
    { NV2 = new Fl_Value_Output(61, 543, 55, 20);
      NV2->color(FL_DARK1);
      NV2->selection_color((Fl_Color)1);
      NV2->maximum(16);
      NV2->step(0.5);
      NV2->textsize(12);
      NV2->textcolor(4);
      NV2->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV2
    { NV3 = new Fl_Value_Output(120, 543, 55, 20);
      NV3->color(FL_DARK1);
      NV3->selection_color((Fl_Color)1);
      NV3->maximum(16);
      NV3->step(0.5);
      NV3->textsize(12);
      NV3->textcolor(4);
      NV3->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV3
    { NV4 = new Fl_Value_Output(179, 543, 55, 20);
      NV4->color(FL_DARK1);
      NV4->selection_color((Fl_Color)1);
      NV4->maximum(16);
      NV4->step(0.5);
      NV4->textsize(12);
      NV4->textcolor(4);
      NV4->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV4
    { NV5 = new Fl_Value_Output(238, 543, 55, 20);
      NV5->color(FL_DARK1);
      NV5->selection_color((Fl_Color)1);
      NV5->maximum(16);
      NV5->step(0.5);
      NV5->textsize(12);
      NV5->textcolor(4);
      NV5->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV5
    { NV6 = new Fl_Value_Output(297, 543, 55, 20);
      NV6->color(FL_DARK1);
      NV6->selection_color((Fl_Color)1);
      NV6->maximum(16);
      NV6->step(0.5);
      NV6->textsize(12);
      NV6->textcolor(4);
      NV6->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV6
    { NV7 = new Fl_Value_Output(356, 543, 55, 20);
      NV7->color(FL_DARK1);
      NV7->selection_color((Fl_Color)1);
      NV7->maximum(16);
      NV7->step(0.5);
      NV7->textsize(12);
      NV7->textcolor(4);
      NV7->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV7
    { NV8 = new Fl_Value_Output(415, 543, 55, 20);
      NV8->color(FL_DARK1);
      NV8->selection_color((Fl_Color)1);
      NV8->maximum(16);
      NV8->step(0.5);
      NV8->textsize(12);
      NV8->textcolor(4);
      NV8->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV8
    { NV9 = new Fl_Value_Output(474, 543, 55, 20);
      NV9->color(FL_DARK1);
      NV9->selection_color((Fl_Color)1);
      NV9->maximum(16);
      NV9->step(0.5);
      NV9->textsize(12);
      NV9->textcolor(4);
      NV9->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV9
    { NV10 = new Fl_Value_Output(533, 543, 55, 20);
      NV10->color(FL_DARK1);
      NV10->selection_color((Fl_Color)1);
      NV10->maximum(16);
      NV10->step(0.5);
      NV10->textsize(12);
      NV10->textcolor(4);
      NV10->align(200|FL_ALIGN_INSIDE);
    } // Fl_Value_Output* NV10
    { CPrograma = new Fl_Counter(15, 165, 75, 25);
      CPrograma->type(1);
      CPrograma->labeltype(FL_EMBOSSED_LABEL);
      CPrograma->labelcolor((Fl_Color)208);
      CPrograma->minimum(1);
      CPrograma->maximum(32);
      CPrograma->step(1);
      CPrograma->callback((Fl_Callback*)cb_CPrograma);
      CPrograma->align(FL_ALIGN_LEFT);
      CPrograma->when(FL_WHEN_RELEASE);
    } // Fl_Counter* CPrograma
    { OMaster = new Drawbar(470, 100, 55, 190, gettext("Organ"));
      OMaster->type(4);
      OMaster->box(FL_PLASTIC_DOWN_BOX);
      OMaster->color(FL_FOREGROUND_COLOR);
      OMaster->selection_color((Fl_Color)2);
      OMaster->labeltype(FL_NORMAL_LABEL);
      OMaster->labelfont(0);
      OMaster->labelsize(10);
      OMaster->labelcolor((Fl_Color)4);
      OMaster->minimum(100);
      OMaster->maximum(0);
      OMaster->step(1);
      OMaster->value(70);
      OMaster->callback((Fl_Callback*)cb_OMaster);
      OMaster->align(FL_ALIGN_BOTTOM);
      OMaster->when(FL_WHEN_CHANGED);
    } // Drawbar* OMaster
    { Mar1 = new Fl_Light_Button(2, 317, 55, 15, gettext("Perc"));
      Mar1->box(FL_PLASTIC_UP_BOX);
      Mar1->labelsize(9);
      Mar1->callback((Fl_Callback*)cb_Mar1);
      Mar1->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar1
    { Mar2 = new Fl_Light_Button(61, 317, 55, 15, gettext("Perc"));
      Mar2->box(FL_PLASTIC_UP_BOX);
      Mar2->labelsize(9);
      Mar2->callback((Fl_Callback*)cb_Mar2);
      Mar2->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar2
    { Mar3 = new Fl_Light_Button(120, 317, 55, 15, gettext("Perc"));
      Mar3->box(FL_PLASTIC_UP_BOX);
      Mar3->labelsize(9);
      Mar3->callback((Fl_Callback*)cb_Mar3);
      Mar3->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar3
    { Mar4 = new Fl_Light_Button(179, 317, 55, 15, gettext("Perc"));
      Mar4->box(FL_PLASTIC_UP_BOX);
      Mar4->labelsize(9);
      Mar4->callback((Fl_Callback*)cb_Mar4);
      Mar4->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar4
    { Mar5 = new Fl_Light_Button(238, 317, 55, 15, gettext("Perc"));
      Mar5->box(FL_PLASTIC_UP_BOX);
      Mar5->labelsize(9);
      Mar5->callback((Fl_Callback*)cb_Mar5);
      Mar5->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar5
    { Mar6 = new Fl_Light_Button(297, 317, 55, 15, gettext("Perc"));
      Mar6->box(FL_PLASTIC_UP_BOX);
      Mar6->labelsize(9);
      Mar6->callback((Fl_Callback*)cb_Mar6);
      Mar6->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar6
    { Mar7 = new Fl_Light_Button(356, 317, 55, 15, gettext("Perc"));
      Mar7->box(FL_PLASTIC_UP_BOX);
      Mar7->labelsize(9);
      Mar7->callback((Fl_Callback*)cb_Mar7);
      Mar7->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar7
    { Mar8 = new Fl_Light_Button(415, 317, 55, 15, gettext("Perc"));
      Mar8->box(FL_PLASTIC_UP_BOX);
      Mar8->labelsize(9);
      Mar8->callback((Fl_Callback*)cb_Mar8);
      Mar8->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar8
    { Mar9 = new Fl_Light_Button(474, 317, 55, 15, gettext("Perc"));
      Mar9->box(FL_PLASTIC_UP_BOX);
      Mar9->labelsize(9);
      Mar9->callback((Fl_Callback*)cb_Mar9);
      Mar9->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar9
    { Mar10 = new Fl_Light_Button(533, 317, 55, 15, gettext("Perc"));
      Mar10->box(FL_PLASTIC_UP_BOX);
      Mar10->labelsize(9);
      Mar10->callback((Fl_Callback*)cb_Mar10);
      Mar10->align(196|FL_ALIGN_INSIDE);
    } // Fl_Light_Button* Mar10
    { BClick = new Fl_Button(180, 205, 45, 30, gettext("Click"));
      BClick->type(1);
      BClick->box(FL_PLASTIC_UP_BOX);
      BClick->color((Fl_Color)31);
      BClick->selection_color((Fl_Color)5);
      BClick->labelsize(9);
      BClick->callback((Fl_Callback*)cb_BClick);
      BClick->align(FL_ALIGN_CLIP);
    } // Fl_Button* BClick
    { BSync_Speed = new Fl_Button(115, 160, 45, 20, gettext("Sync"));
      BSync_Speed->type(1);
      BSync_Speed->box(FL_PLASTIC_UP_BOX);
      BSync_Speed->color((Fl_Color)31);
      BSync_Speed->selection_color((Fl_Color)4);
      BSync_Speed->labelsize(9);
      BSync_Speed->callback((Fl_Callback*)cb_BSync_Speed);
      BSync_Speed->align(FL_ALIGN_CLIP);
    } // Fl_Button* BSync_Speed
    HORwindow->end();
    HORwindow->resizable(HORwindow);
  } // Fl_Double_Window* HORwindow
  { aboutwindow = new Fl_Double_Window(380, 375, gettext("About..."));
    aboutwindow->box(FL_PLASTIC_DOWN_BOX);
    aboutwindow->color(FL_GRAY0);
    aboutwindow->callback((Fl_Callback*)cb_aboutwindow, (void*)(this));
    { Fl_Box* o = new Fl_Box(175, 13, 195, 107);
      o->image(image_horgand128);
      o->labelsize(18);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(55, 35, 135, 40, gettext("Horgand"));
      o->labelfont(1);
      o->labelsize(24);
      o->align(FL_ALIGN_CLIP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(10, 115, 345, 70, gettext("Copyright (C) 2003-2007 by Josep Andreu\n     (Holborn) \n      holborn@@tele\
fonica.net "));
      o->labelfont(1);
      o->labelcolor((Fl_Color)18);
      o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(20, 210, 340, 115, gettext("This is free software. you may redistribute and/or modify it under the terms \
of the version 2 of the GNU General Public License as published by the Free So\
ftware Fundation.\n This program comes with \n ABSOLUTE NO WARRANTY. \n See th\
e version 2 of the \n GNU General Public License for details."));
      o->labelfont(1);
      o->labelsize(11);
      o->align(194|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(160, 330, 65, 40, gettext("OK"));
      o->shortcut(0xff0d);
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Button* o
    { Fl_Box* o = new Fl_Box(15, 180, 345, 20, gettext("http://horgand.berlios.de"));
      o->labelfont(1);
      o->labelsize(16);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_CLIP);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(20, 195, 345, 20, gettext("(Visite the website for new sounds)"));
      o->labelfont(1);
      o->labelsize(10);
      o->align(FL_ALIGN_CLIP);
    } // Fl_Box* o
    aboutwindow->end();
  } // Fl_Double_Window* aboutwindow
  { Settingswindow = new Fl_Double_Window(495, 310, gettext("Settings"));
    Settingswindow->callback((Fl_Callback*)cb_Settingswindow, (void*)(this));
    { new Fl_Box(5, 0, 151, 30, gettext("Midi Input to:"));
    } // Fl_Box* o
    { SClose = new Fl_Button(350, 180, 120, 30, gettext("Close"));
      SClose->shortcut(0xff0d);
      SClose->callback((Fl_Callback*)cb_SClose);
    } // Fl_Button* SClose
    { Fl_Button* o = new Fl_Button(350, 145, 120, 30, gettext("Save"));
      o->callback((Fl_Callback*)cb_Save3);
    } // Fl_Button* o
    { BMidiIn = new Fl_Browser(5, 25, 295, 185);
      BMidiIn->type(2);
      BMidiIn->selection_color(FL_FOREGROUND_COLOR);
      BMidiIn->callback((Fl_Callback*)cb_BMidiIn);
    } // Fl_Browser* BMidiIn
    { Fl_Group* o = new Fl_Group(315, 25, 155, 95, gettext("Audio Output"));
      o->box(FL_DOWN_BOX);
      o->color((Fl_Color)25);
      { OSS = new Fl_Check_Button(340, 30, 100, 25, gettext(" OSS"));
        OSS->type(102);
        OSS->down_box(FL_DOWN_BOX);
        OSS->align(68|FL_ALIGN_INSIDE);
      } // Fl_Check_Button* OSS
      { Alsa = new Fl_Check_Button(340, 60, 100, 25, gettext(" Alsa"));
        Alsa->type(102);
        Alsa->down_box(FL_DOWN_BOX);
        Alsa->align(68|FL_ALIGN_INSIDE);
      } // Fl_Check_Button* Alsa
      { Jack = new Fl_Check_Button(340, 90, 100, 25, gettext(" Jack"));
        Jack->type(102);
        Jack->down_box(FL_DOWN_BOX);
        Jack->align(68|FL_ALIGN_INSIDE);
      } // Fl_Check_Button* Jack
      o->end();
    } // Fl_Group* o
    { BFiname = new Fl_File_Input(0, 230, 390, 30, gettext("  Bank Filename"));
      BFiname->labelsize(12);
      BFiname->align(FL_ALIGN_TOP_LEFT);
    } // Fl_File_Input* BFiname
    { Fl_Button* o = new Fl_Button(405, 230, 65, 30, gettext("Browse"));
      o->callback((Fl_Callback*)cb_Browse);
    } // Fl_Button* o
    { RFiname = new Fl_File_Input(0, 280, 390, 30, gettext("  Rhythm Filename"));
      RFiname->labelsize(12);
      RFiname->align(FL_ALIGN_TOP_LEFT);
    } // Fl_File_Input* RFiname
    { Fl_Button* o = new Fl_Button(405, 270, 65, 30, gettext("Browse"));
      o->callback((Fl_Callback*)cb_Browse1);
    } // Fl_Button* o
    Settingswindow->end();
  } // Fl_Double_Window* Settingswindow
  { HORBank = new Fl_Double_Window(745, 420, gettext("horgand Bank"));
    HORBank->tooltip(gettext("Right Click Get  - Left Click Put"));
    HORBank->callback((Fl_Callback*)cb_HORBank, (void*)(this));
    { BClose = new Fl_Button(330, 375, 145, 40, gettext("Close"));
      BClose->box(FL_PLASTIC_UP_BOX);
      BClose->shortcut(0xff0d);
      BClose->labeltype(FL_ENGRAVED_LABEL);
      BClose->callback((Fl_Callback*)cb_BClose);
    } // Fl_Button* BClose
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 745, 30);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { Fl_Tabs* o = new Fl_Tabs(0, 30, 745, 335);
      o->labelsize(18);
      { Fl_Group* o = new Fl_Group(10, 55, 720, 305, gettext("Active Bank"));
        { Fl_Group* o = new Fl_Group(20, 125, 710, 235);
          { Banco1 = new Fl_Button(60, 125, 145, 25);
            Banco1->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco1->box(FL_PLASTIC_UP_BOX);
            Banco1->color((Fl_Color)6);
            Banco1->labeltype(FL_ENGRAVED_LABEL);
            Banco1->labelsize(12);
            Banco1->callback((Fl_Callback*)cb_Banco1);
            Banco1->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco1
          { Fl_Box* o = new Fl_Box(20, 125, 30, 25, gettext("1"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco2 = new Fl_Button(235, 125, 145, 25);
            Banco2->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco2->box(FL_PLASTIC_UP_BOX);
            Banco2->color((Fl_Color)6);
            Banco2->labeltype(FL_ENGRAVED_LABEL);
            Banco2->labelsize(12);
            Banco2->callback((Fl_Callback*)cb_Banco2);
            Banco2->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco2
          { Fl_Box* o = new Fl_Box(205, 125, 30, 25, gettext("2"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco3 = new Fl_Button(410, 125, 145, 25);
            Banco3->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco3->box(FL_PLASTIC_UP_BOX);
            Banco3->color((Fl_Color)6);
            Banco3->labeltype(FL_ENGRAVED_LABEL);
            Banco3->labelsize(12);
            Banco3->callback((Fl_Callback*)cb_Banco3);
            Banco3->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco3
          { Fl_Box* o = new Fl_Box(380, 125, 30, 25, gettext("3"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco4 = new Fl_Button(585, 125, 145, 25);
            Banco4->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco4->box(FL_PLASTIC_UP_BOX);
            Banco4->color((Fl_Color)6);
            Banco4->labeltype(FL_ENGRAVED_LABEL);
            Banco4->labelsize(12);
            Banco4->callback((Fl_Callback*)cb_Banco4);
            Banco4->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco4
          { Fl_Box* o = new Fl_Box(555, 125, 30, 25, gettext("4"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco5 = new Fl_Button(60, 155, 145, 25);
            Banco5->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco5->box(FL_PLASTIC_UP_BOX);
            Banco5->color((Fl_Color)6);
            Banco5->labeltype(FL_ENGRAVED_LABEL);
            Banco5->labelsize(12);
            Banco5->callback((Fl_Callback*)cb_Banco5);
            Banco5->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco5
          { Fl_Box* o = new Fl_Box(20, 155, 30, 25, gettext("5"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco6 = new Fl_Button(235, 155, 145, 25);
            Banco6->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco6->box(FL_PLASTIC_UP_BOX);
            Banco6->color((Fl_Color)6);
            Banco6->labeltype(FL_ENGRAVED_LABEL);
            Banco6->labelsize(12);
            Banco6->callback((Fl_Callback*)cb_Banco6);
            Banco6->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco6
          { Fl_Box* o = new Fl_Box(205, 155, 30, 25, gettext("6"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco7 = new Fl_Button(410, 155, 145, 25);
            Banco7->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco7->box(FL_PLASTIC_UP_BOX);
            Banco7->color((Fl_Color)6);
            Banco7->labeltype(FL_ENGRAVED_LABEL);
            Banco7->labelsize(12);
            Banco7->callback((Fl_Callback*)cb_Banco7);
            Banco7->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco7
          { Fl_Box* o = new Fl_Box(380, 155, 30, 25, gettext("7"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco8 = new Fl_Button(585, 155, 145, 25);
            Banco8->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco8->box(FL_PLASTIC_UP_BOX);
            Banco8->color((Fl_Color)6);
            Banco8->labeltype(FL_ENGRAVED_LABEL);
            Banco8->labelsize(12);
            Banco8->callback((Fl_Callback*)cb_Banco8);
            Banco8->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco8
          { Fl_Box* o = new Fl_Box(555, 155, 30, 25, gettext("8"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco9 = new Fl_Button(60, 185, 145, 25);
            Banco9->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco9->box(FL_PLASTIC_UP_BOX);
            Banco9->color((Fl_Color)6);
            Banco9->labeltype(FL_ENGRAVED_LABEL);
            Banco9->labelsize(12);
            Banco9->callback((Fl_Callback*)cb_Banco9);
            Banco9->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco9
          { Fl_Box* o = new Fl_Box(20, 185, 30, 25, gettext("9"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco10 = new Fl_Button(235, 185, 145, 25);
            Banco10->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco10->box(FL_PLASTIC_UP_BOX);
            Banco10->color((Fl_Color)6);
            Banco10->labeltype(FL_ENGRAVED_LABEL);
            Banco10->labelsize(12);
            Banco10->callback((Fl_Callback*)cb_Banco10);
            Banco10->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco10
          { Fl_Box* o = new Fl_Box(205, 185, 30, 25, gettext("10"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco11 = new Fl_Button(410, 185, 145, 25);
            Banco11->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco11->box(FL_PLASTIC_UP_BOX);
            Banco11->color((Fl_Color)6);
            Banco11->labeltype(FL_ENGRAVED_LABEL);
            Banco11->labelsize(12);
            Banco11->callback((Fl_Callback*)cb_Banco11);
            Banco11->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco11
          { Fl_Box* o = new Fl_Box(380, 185, 30, 25, gettext("11"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco12 = new Fl_Button(585, 185, 145, 25);
            Banco12->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco12->box(FL_PLASTIC_UP_BOX);
            Banco12->color((Fl_Color)6);
            Banco12->labeltype(FL_ENGRAVED_LABEL);
            Banco12->labelsize(12);
            Banco12->callback((Fl_Callback*)cb_Banco12);
            Banco12->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco12
          { Fl_Box* o = new Fl_Box(555, 185, 30, 25, gettext("12"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco13 = new Fl_Button(60, 215, 145, 25);
            Banco13->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco13->box(FL_PLASTIC_UP_BOX);
            Banco13->color((Fl_Color)6);
            Banco13->labeltype(FL_ENGRAVED_LABEL);
            Banco13->labelsize(12);
            Banco13->callback((Fl_Callback*)cb_Banco13);
            Banco13->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco13
          { Fl_Box* o = new Fl_Box(20, 215, 30, 25, gettext("13"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco14 = new Fl_Button(235, 215, 145, 25);
            Banco14->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco14->box(FL_PLASTIC_UP_BOX);
            Banco14->color((Fl_Color)6);
            Banco14->labeltype(FL_ENGRAVED_LABEL);
            Banco14->labelsize(12);
            Banco14->callback((Fl_Callback*)cb_Banco14);
            Banco14->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco14
          { Fl_Box* o = new Fl_Box(205, 215, 30, 25, gettext("14"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco15 = new Fl_Button(410, 215, 145, 25);
            Banco15->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco15->box(FL_PLASTIC_UP_BOX);
            Banco15->color((Fl_Color)6);
            Banco15->labeltype(FL_ENGRAVED_LABEL);
            Banco15->labelsize(12);
            Banco15->callback((Fl_Callback*)cb_Banco15);
            Banco15->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco15
          { Fl_Box* o = new Fl_Box(380, 215, 30, 25, gettext("15"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco16 = new Fl_Button(585, 215, 145, 25);
            Banco16->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco16->box(FL_PLASTIC_UP_BOX);
            Banco16->color((Fl_Color)6);
            Banco16->labeltype(FL_ENGRAVED_LABEL);
            Banco16->labelsize(12);
            Banco16->callback((Fl_Callback*)cb_Banco16);
            Banco16->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco16
          { Fl_Box* o = new Fl_Box(555, 215, 30, 25, gettext("16"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco17 = new Fl_Button(60, 245, 145, 25);
            Banco17->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco17->box(FL_PLASTIC_UP_BOX);
            Banco17->color((Fl_Color)6);
            Banco17->labeltype(FL_ENGRAVED_LABEL);
            Banco17->labelsize(12);
            Banco17->callback((Fl_Callback*)cb_Banco17);
            Banco17->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco17
          { Fl_Box* o = new Fl_Box(20, 245, 30, 25, gettext("17"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco18 = new Fl_Button(235, 245, 145, 25);
            Banco18->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco18->box(FL_PLASTIC_UP_BOX);
            Banco18->color((Fl_Color)6);
            Banco18->labeltype(FL_ENGRAVED_LABEL);
            Banco18->labelsize(12);
            Banco18->callback((Fl_Callback*)cb_Banco18);
            Banco18->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco18
          { Fl_Box* o = new Fl_Box(205, 245, 30, 25, gettext("18"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco19 = new Fl_Button(410, 245, 145, 25);
            Banco19->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco19->box(FL_PLASTIC_UP_BOX);
            Banco19->color((Fl_Color)6);
            Banco19->labeltype(FL_ENGRAVED_LABEL);
            Banco19->labelsize(12);
            Banco19->callback((Fl_Callback*)cb_Banco19);
            Banco19->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco19
          { Fl_Box* o = new Fl_Box(380, 245, 30, 25, gettext("19"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco20 = new Fl_Button(585, 245, 145, 25);
            Banco20->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco20->box(FL_PLASTIC_UP_BOX);
            Banco20->color((Fl_Color)6);
            Banco20->labeltype(FL_ENGRAVED_LABEL);
            Banco20->labelsize(12);
            Banco20->callback((Fl_Callback*)cb_Banco20);
            Banco20->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco20
          { Fl_Box* o = new Fl_Box(555, 245, 30, 25, gettext("20"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco21 = new Fl_Button(60, 275, 145, 25);
            Banco21->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco21->box(FL_PLASTIC_UP_BOX);
            Banco21->color((Fl_Color)6);
            Banco21->labeltype(FL_ENGRAVED_LABEL);
            Banco21->labelsize(12);
            Banco21->callback((Fl_Callback*)cb_Banco21);
            Banco21->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco21
          { Fl_Box* o = new Fl_Box(20, 275, 30, 25, gettext("21"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco22 = new Fl_Button(235, 275, 145, 25);
            Banco22->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco22->box(FL_PLASTIC_UP_BOX);
            Banco22->color((Fl_Color)6);
            Banco22->labeltype(FL_ENGRAVED_LABEL);
            Banco22->labelsize(12);
            Banco22->callback((Fl_Callback*)cb_Banco22);
            Banco22->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco22
          { Fl_Box* o = new Fl_Box(205, 275, 30, 25, gettext("22"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco23 = new Fl_Button(410, 275, 145, 25);
            Banco23->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco23->box(FL_PLASTIC_UP_BOX);
            Banco23->color((Fl_Color)6);
            Banco23->labeltype(FL_ENGRAVED_LABEL);
            Banco23->labelsize(12);
            Banco23->callback((Fl_Callback*)cb_Banco23);
            Banco23->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco23
          { Fl_Box* o = new Fl_Box(380, 275, 30, 25, gettext("23"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco24 = new Fl_Button(585, 275, 145, 25);
            Banco24->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco24->box(FL_PLASTIC_UP_BOX);
            Banco24->color((Fl_Color)6);
            Banco24->labeltype(FL_ENGRAVED_LABEL);
            Banco24->labelsize(12);
            Banco24->callback((Fl_Callback*)cb_Banco24);
            Banco24->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco24
          { Fl_Box* o = new Fl_Box(555, 275, 30, 25, gettext("24"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco25 = new Fl_Button(60, 305, 145, 25);
            Banco25->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco25->box(FL_PLASTIC_UP_BOX);
            Banco25->color((Fl_Color)6);
            Banco25->labeltype(FL_ENGRAVED_LABEL);
            Banco25->labelsize(12);
            Banco25->callback((Fl_Callback*)cb_Banco25);
            Banco25->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco25
          { Fl_Box* o = new Fl_Box(20, 305, 30, 25, gettext("25"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco26 = new Fl_Button(235, 305, 145, 25);
            Banco26->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco26->box(FL_PLASTIC_UP_BOX);
            Banco26->color((Fl_Color)6);
            Banco26->labeltype(FL_ENGRAVED_LABEL);
            Banco26->labelsize(12);
            Banco26->callback((Fl_Callback*)cb_Banco26);
            Banco26->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco26
          { Fl_Box* o = new Fl_Box(205, 305, 30, 25, gettext("26"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco27 = new Fl_Button(410, 305, 145, 25);
            Banco27->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco27->box(FL_PLASTIC_UP_BOX);
            Banco27->color((Fl_Color)6);
            Banco27->labeltype(FL_ENGRAVED_LABEL);
            Banco27->labelsize(12);
            Banco27->callback((Fl_Callback*)cb_Banco27);
            Banco27->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco27
          { Fl_Box* o = new Fl_Box(380, 305, 30, 25, gettext("27"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco28 = new Fl_Button(585, 305, 145, 25);
            Banco28->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco28->box(FL_PLASTIC_UP_BOX);
            Banco28->color((Fl_Color)6);
            Banco28->labeltype(FL_ENGRAVED_LABEL);
            Banco28->labelsize(12);
            Banco28->callback((Fl_Callback*)cb_Banco28);
            Banco28->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco28
          { Fl_Box* o = new Fl_Box(555, 305, 30, 25, gettext("28"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco29 = new Fl_Button(60, 335, 145, 25);
            Banco29->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco29->box(FL_PLASTIC_UP_BOX);
            Banco29->color((Fl_Color)6);
            Banco29->labeltype(FL_ENGRAVED_LABEL);
            Banco29->labelsize(12);
            Banco29->callback((Fl_Callback*)cb_Banco29);
            Banco29->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco29
          { Fl_Box* o = new Fl_Box(20, 335, 30, 25, gettext("29"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco30 = new Fl_Button(235, 335, 145, 25);
            Banco30->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco30->box(FL_PLASTIC_UP_BOX);
            Banco30->color((Fl_Color)6);
            Banco30->labeltype(FL_ENGRAVED_LABEL);
            Banco30->labelsize(12);
            Banco30->callback((Fl_Callback*)cb_Banco30);
            Banco30->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco30
          { Fl_Box* o = new Fl_Box(205, 335, 30, 25, gettext("30"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco31 = new Fl_Button(410, 335, 145, 25);
            Banco31->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco31->box(FL_PLASTIC_UP_BOX);
            Banco31->color((Fl_Color)6);
            Banco31->labeltype(FL_ENGRAVED_LABEL);
            Banco31->labelsize(12);
            Banco31->callback((Fl_Callback*)cb_Banco31);
            Banco31->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco31
          { Fl_Box* o = new Fl_Box(380, 335, 30, 25, gettext("31"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          { Banco32 = new Fl_Button(585, 335, 145, 25);
            Banco32->tooltip(gettext("Right Click Get -  Left Click Put"));
            Banco32->box(FL_PLASTIC_UP_BOX);
            Banco32->color((Fl_Color)6);
            Banco32->labeltype(FL_ENGRAVED_LABEL);
            Banco32->labelsize(12);
            Banco32->callback((Fl_Callback*)cb_Banco32);
            Banco32->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Button* Banco32
          { Fl_Box* o = new Fl_Box(555, 335, 30, 25, gettext("32"));
            o->labeltype(FL_ENGRAVED_LABEL);
            o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
          } // Fl_Box* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(10, 55, 720, 305, gettext("More Sounds"));
        o->hide();
        { MoreSounds = new Fl_Browser(30, 60, 514, 295);
          MoreSounds->type(2);
        } // Fl_Browser* MoreSounds
        { Fl_Button* o = new Fl_Button(575, 90, 90, 25, gettext("Load"));
          o->callback((Fl_Callback*)cb_Load3);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(575, 130, 90, 25, gettext("Rescan"));
          o->callback((Fl_Callback*)cb_Rescan);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    HORBank->end();
  } // Fl_Double_Window* HORBank
  { RitEdit = new Fl_Double_Window(615, 175);
    RitEdit->callback((Fl_Callback*)cb_RitEdit, (void*)(this));
    { RtName = new Fl_Input(50, 20, 115, 25, gettext("Name"));
      RtName->labeltype(FL_ENGRAVED_LABEL);
      RtName->callback((Fl_Callback*)cb_RtName);
    } // Fl_Input* RtName
    { RtFile = new Fl_Input(195, 20, 215, 25, gettext("File"));
      RtFile->labeltype(FL_ENGRAVED_LABEL);
      RtFile->callback((Fl_Callback*)cb_RtFile);
    } // Fl_Input* RtFile
    { RtBars = new Fl_Value_Input(520, 20, 20, 25, gettext("Bars"));
      RtBars->labeltype(FL_ENGRAVED_LABEL);
      RtBars->minimum(1);
      RtBars->maximum(4);
      RtBars->step(1);
      RtBars->value(1);
      RtBars->callback((Fl_Callback*)cb_RtBars);
    } // Fl_Value_Input* RtBars
    { RtDen = new Fl_Value_Input(585, 20, 20, 25, gettext("Nom."));
      RtDen->labeltype(FL_ENGRAVED_LABEL);
      RtDen->minimum(2);
      RtDen->maximum(4);
      RtDen->step(1);
      RtDen->value(4);
      RtDen->callback((Fl_Callback*)cb_RtDen);
    } // Fl_Value_Input* RtDen
    { B1G1 = new Fl_Group(40, 115, 140, 60);
      { lb1 = new Fl_Value_Input(50, 120, 25, 20);
        lb1->maximum(12);
        lb1->step(1);
        lb1->callback((Fl_Callback*)cb_lb1);
      } // Fl_Value_Input* lb1
      { lb2 = new Fl_Value_Input(80, 120, 25, 20);
        lb2->maximum(12);
        lb2->step(1);
        lb2->callback((Fl_Callback*)cb_lb2);
      } // Fl_Value_Input* lb2
      { lb3 = new Fl_Value_Input(110, 120, 25, 20);
        lb3->maximum(12);
        lb3->step(1);
        lb3->callback((Fl_Callback*)cb_lb3);
      } // Fl_Value_Input* lb3
      { lb4 = new Fl_Value_Input(140, 120, 25, 20);
        lb4->maximum(12);
        lb4->step(1);
        lb4->callback((Fl_Callback*)cb_lb4);
      } // Fl_Value_Input* lb4
      { lbv1 = new Fl_Value_Input(50, 145, 25, 20);
        lbv1->maximum(88);
        lbv1->step(1);
        lbv1->callback((Fl_Callback*)cb_lbv1);
      } // Fl_Value_Input* lbv1
      { lbv2 = new Fl_Value_Input(80, 145, 25, 20);
        lbv2->maximum(99);
        lbv2->step(1);
        lbv2->callback((Fl_Callback*)cb_lbv2);
      } // Fl_Value_Input* lbv2
      { lbv3 = new Fl_Value_Input(110, 145, 25, 20);
        lbv3->maximum(99);
        lbv3->step(1);
        lbv3->callback((Fl_Callback*)cb_lbv3);
      } // Fl_Value_Input* lbv3
      { lbv4 = new Fl_Value_Input(140, 145, 25, 20);
        lbv4->maximum(99);
        lbv4->step(1);
        lbv4->callback((Fl_Callback*)cb_lbv4);
      } // Fl_Value_Input* lbv4
      B1G1->end();
    } // Fl_Group* B1G1
    { B1G2 = new Fl_Group(180, 115, 140, 60);
      { lb5 = new Fl_Value_Input(190, 120, 25, 20);
        lb5->maximum(12);
        lb5->step(1);
        lb5->callback((Fl_Callback*)cb_lb5);
      } // Fl_Value_Input* lb5
      { lb6 = new Fl_Value_Input(220, 120, 25, 20);
        lb6->maximum(12);
        lb6->step(1);
        lb6->callback((Fl_Callback*)cb_lb6);
      } // Fl_Value_Input* lb6
      { lb7 = new Fl_Value_Input(250, 120, 25, 20);
        lb7->maximum(12);
        lb7->step(1);
        lb7->callback((Fl_Callback*)cb_lb7);
      } // Fl_Value_Input* lb7
      { lb8 = new Fl_Value_Input(280, 120, 25, 20);
        lb8->maximum(12);
        lb8->step(1);
        lb8->callback((Fl_Callback*)cb_lb8);
      } // Fl_Value_Input* lb8
      { lbv5 = new Fl_Value_Input(190, 145, 25, 20);
        lbv5->maximum(99);
        lbv5->step(1);
        lbv5->callback((Fl_Callback*)cb_lbv5);
      } // Fl_Value_Input* lbv5
      { lbv6 = new Fl_Value_Input(220, 145, 25, 20);
        lbv6->maximum(99);
        lbv6->step(1);
        lbv6->callback((Fl_Callback*)cb_lbv6);
      } // Fl_Value_Input* lbv6
      { lbv7 = new Fl_Value_Input(250, 145, 25, 20);
        lbv7->maximum(99);
        lbv7->step(1);
        lbv7->callback((Fl_Callback*)cb_lbv7);
      } // Fl_Value_Input* lbv7
      { lbv8 = new Fl_Value_Input(280, 145, 25, 20);
        lbv8->maximum(99);
        lbv8->step(1);
        lbv8->callback((Fl_Callback*)cb_lbv8);
      } // Fl_Value_Input* lbv8
      B1G2->end();
    } // Fl_Group* B1G2
    { B1G3 = new Fl_Group(325, 115, 140, 60);
      { lb9 = new Fl_Value_Input(335, 120, 25, 20);
        lb9->maximum(12);
        lb9->step(1);
        lb9->callback((Fl_Callback*)cb_lb9);
      } // Fl_Value_Input* lb9
      { lb10 = new Fl_Value_Input(365, 120, 25, 20);
        lb10->maximum(12);
        lb10->step(1);
        lb10->callback((Fl_Callback*)cb_lb10);
      } // Fl_Value_Input* lb10
      { lb11 = new Fl_Value_Input(395, 120, 25, 20);
        lb11->maximum(12);
        lb11->step(1);
        lb11->callback((Fl_Callback*)cb_lb11);
      } // Fl_Value_Input* lb11
      { lb12 = new Fl_Value_Input(425, 120, 25, 20);
        lb12->maximum(12);
        lb12->step(1);
        lb12->callback((Fl_Callback*)cb_lb12);
      } // Fl_Value_Input* lb12
      { lbv9 = new Fl_Value_Input(335, 145, 25, 20);
        lbv9->maximum(99);
        lbv9->step(1);
        lbv9->callback((Fl_Callback*)cb_lbv9);
      } // Fl_Value_Input* lbv9
      { lbv10 = new Fl_Value_Input(365, 145, 25, 20);
        lbv10->maximum(99);
        lbv10->step(1);
        lbv10->callback((Fl_Callback*)cb_lbv10);
      } // Fl_Value_Input* lbv10
      { lbv11 = new Fl_Value_Input(395, 145, 25, 20);
        lbv11->maximum(99);
        lbv11->step(1);
        lbv11->callback((Fl_Callback*)cb_lbv11);
      } // Fl_Value_Input* lbv11
      { lbv12 = new Fl_Value_Input(425, 145, 25, 20);
        lbv12->maximum(99);
        lbv12->step(1);
        lbv12->callback((Fl_Callback*)cb_lbv12);
      } // Fl_Value_Input* lbv12
      B1G3->end();
    } // Fl_Group* B1G3
    { B1G4 = new Fl_Group(470, 115, 140, 60);
      { lb13 = new Fl_Value_Input(480, 120, 25, 20);
        lb13->maximum(12);
        lb13->step(1);
        lb13->callback((Fl_Callback*)cb_lb13);
      } // Fl_Value_Input* lb13
      { lb14 = new Fl_Value_Input(510, 120, 25, 20);
        lb14->maximum(12);
        lb14->step(1);
        lb14->callback((Fl_Callback*)cb_lb14);
      } // Fl_Value_Input* lb14
      { lb15 = new Fl_Value_Input(540, 120, 25, 20);
        lb15->maximum(12);
        lb15->step(1);
        lb15->callback((Fl_Callback*)cb_lb15);
      } // Fl_Value_Input* lb15
      { lb16 = new Fl_Value_Input(570, 120, 25, 20);
        lb16->maximum(12);
        lb16->step(1);
        lb16->callback((Fl_Callback*)cb_lb16);
      } // Fl_Value_Input* lb16
      { lbv13 = new Fl_Value_Input(480, 145, 25, 20);
        lbv13->maximum(99);
        lbv13->step(1);
        lbv13->callback((Fl_Callback*)cb_lbv13);
      } // Fl_Value_Input* lbv13
      { lbv14 = new Fl_Value_Input(510, 145, 25, 20);
        lbv14->maximum(99);
        lbv14->step(1);
        lbv14->callback((Fl_Callback*)cb_lbv14);
      } // Fl_Value_Input* lbv14
      { lbv15 = new Fl_Value_Input(540, 145, 25, 20);
        lbv15->maximum(99);
        lbv15->step(1);
        lbv15->callback((Fl_Callback*)cb_lbv15);
      } // Fl_Value_Input* lbv15
      { lbv16 = new Fl_Value_Input(570, 145, 25, 20);
        lbv16->maximum(99);
        lbv16->step(1);
        lbv16->callback((Fl_Callback*)cb_lbv16);
      } // Fl_Value_Input* lbv16
      B1G4->end();
    } // Fl_Group* B1G4
    { Fl_Counter* o = SBar = new Fl_Counter(35, 70, 65, 25, gettext("Bar "));
      SBar->type(1);
      SBar->labeltype(FL_ENGRAVED_LABEL);
      SBar->minimum(1);
      SBar->maximum(4);
      SBar->step(1);
      SBar->value(1);
      SBar->callback((Fl_Callback*)cb_SBar);
      SBar->align(FL_ALIGN_LEFT);
      o->value(hor->pattern_bars);
    } // Fl_Counter* SBar
    { CloRit = new Fl_Button(130, 70, 80, 25, gettext("Ok"));
      CloRit->shortcut(0xff0d);
      CloRit->labeltype(FL_ENGRAVED_LABEL);
      CloRit->callback((Fl_Callback*)cb_CloRit);
    } // Fl_Button* CloRit
    { Fl_Box* o = new Fl_Box(5, 120, 40, 25, gettext("Note"));
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(5, 140, 40, 25, gettext("Vol."));
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(390, 50, 215, 65);
      o->box(FL_DOWN_BOX);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(395, 50, 45, 25, gettext("1=1   "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(395, 70, 45, 25, gettext("2=2m "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(395, 90, 45, 25, gettext("3=2M  "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(445, 50, 45, 25, gettext("4=3m "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(445, 70, 45, 25, gettext("5=3M "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(445, 90, 45, 25, gettext("6=4J  "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(500, 50, 45, 25, gettext("7=4#   "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(500, 70, 45, 25, gettext("8=5J "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(500, 90, 45, 25, gettext("9=6m"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(550, 50, 45, 25, gettext("10=6M"));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(550, 70, 45, 25, gettext("11=7m "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(550, 90, 45, 25, gettext("12=7M   "));
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelcolor(FL_RED);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(325, 65, 50, 25, gettext("Notes:"));
      o->labeltype(FL_ENGRAVED_LABEL);
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(415, 20, 60, 25, gettext("Browse"));
      o->callback((Fl_Callback*)cb_Browse2);
    } // Fl_Button* o
    RitEdit->end();
  } // Fl_Double_Window* RitEdit
  { ADSRwin = new Fl_Double_Window(330, 480, gettext("Synthesizer"));
    ADSRwin->callback((Fl_Callback*)cb_ADSRwin, (void*)(this));
    { Fl_Box* o = new Fl_Box(1, 1, 140, 76, gettext("Drawbar"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_GRAY0);
      o->labelsize(13);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { D_attack = new Rueda(5, 25, 40, 40, gettext("Attack"));
      D_attack->box(FL_OSHADOW_BOX);
      D_attack->color(FL_BACKGROUND_COLOR);
      D_attack->selection_color(FL_INACTIVE_COLOR);
      D_attack->labeltype(FL_NORMAL_LABEL);
      D_attack->labelfont(0);
      D_attack->labelsize(9);
      D_attack->labelcolor(FL_FOREGROUND_COLOR);
      D_attack->minimum(0.001);
      D_attack->maximum(0.2);
      D_attack->step(0.001);
      D_attack->value(0.001);
      D_attack->callback((Fl_Callback*)cb_D_attack);
      D_attack->align(FL_ALIGN_BOTTOM);
      D_attack->when(FL_WHEN_CHANGED);
    } // Rueda* D_attack
    { D_decay = new Rueda(50, 25, 40, 40, gettext("Decay"));
      D_decay->box(FL_OSHADOW_BOX);
      D_decay->color(FL_BACKGROUND_COLOR);
      D_decay->selection_color(FL_INACTIVE_COLOR);
      D_decay->labeltype(FL_NORMAL_LABEL);
      D_decay->labelfont(0);
      D_decay->labelsize(9);
      D_decay->labelcolor(FL_FOREGROUND_COLOR);
      D_decay->minimum(0.1);
      D_decay->maximum(0.9);
      D_decay->step(0.01);
      D_decay->value(0.2);
      D_decay->callback((Fl_Callback*)cb_D_decay);
      D_decay->align(FL_ALIGN_BOTTOM);
      D_decay->when(FL_WHEN_CHANGED);
    } // Rueda* D_decay
    { D_sustain = new Rueda(95, 25, 40, 40, gettext("Sustain"));
      D_sustain->box(FL_OSHADOW_BOX);
      D_sustain->color(FL_BACKGROUND_COLOR);
      D_sustain->selection_color(FL_INACTIVE_COLOR);
      D_sustain->labeltype(FL_NORMAL_LABEL);
      D_sustain->labelfont(0);
      D_sustain->labelsize(9);
      D_sustain->labelcolor(FL_FOREGROUND_COLOR);
      D_sustain->maximum(0.99);
      D_sustain->step(0.01);
      D_sustain->value(0.8);
      D_sustain->callback((Fl_Callback*)cb_D_sustain);
      D_sustain->align(FL_ALIGN_BOTTOM);
      D_sustain->when(FL_WHEN_CHANGED);
    } // Rueda* D_sustain
    { Fl_Box* o = new Fl_Box(140, 1, 95, 76, gettext("Percussion"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_GRAY0);
      o->labelsize(13);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { D_p_attack = new Rueda(145, 25, 40, 40, gettext("Attack"));
      D_p_attack->box(FL_OSHADOW_BOX);
      D_p_attack->color(FL_BACKGROUND_COLOR);
      D_p_attack->selection_color(FL_INACTIVE_COLOR);
      D_p_attack->labeltype(FL_NORMAL_LABEL);
      D_p_attack->labelfont(0);
      D_p_attack->labelsize(9);
      D_p_attack->labelcolor(FL_FOREGROUND_COLOR);
      D_p_attack->minimum(5e-05);
      D_p_attack->maximum(0.01);
      D_p_attack->step(1e-05);
      D_p_attack->value(0.0001);
      D_p_attack->callback((Fl_Callback*)cb_D_p_attack);
      D_p_attack->align(FL_ALIGN_BOTTOM);
      D_p_attack->when(FL_WHEN_CHANGED);
    } // Rueda* D_p_attack
    { D_p_decay = new Rueda(190, 25, 40, 40, gettext("Decay"));
      D_p_decay->box(FL_OSHADOW_BOX);
      D_p_decay->color(FL_BACKGROUND_COLOR);
      D_p_decay->selection_color(FL_FOREGROUND_COLOR);
      D_p_decay->labeltype(FL_NORMAL_LABEL);
      D_p_decay->labelfont(0);
      D_p_decay->labelsize(9);
      D_p_decay->labelcolor(FL_FOREGROUND_COLOR);
      D_p_decay->minimum(0.001);
      D_p_decay->maximum(0.7);
      D_p_decay->step(0.001);
      D_p_decay->value(0.24);
      D_p_decay->callback((Fl_Callback*)cb_D_p_decay);
      D_p_decay->align(FL_ALIGN_BOTTOM);
      D_p_decay->when(FL_WHEN_CHANGED);
    } // Rueda* D_p_decay
    { Saca = new Fl_Box(0, 78, 330, 32);
      Saca->box(FL_DOWN_BOX);
      Saca->color(FL_FOREGROUND_COLOR);
      Saca->selection_color(FL_GRAY0);
      Saca->labelcolor((Fl_Color)1);
    } // Fl_Box* Saca
    { Fl_Box* o = new Fl_Box(0, 110, 140, 100, gettext("Normalize"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labelsize(13);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { D_Freq = new Fl_Counter(5, 139, 70, 25, gettext("Frequency"));
      D_Freq->type(1);
      D_Freq->labelsize(9);
      D_Freq->minimum(1);
      D_Freq->maximum(22);
      D_Freq->step(1);
      D_Freq->value(1);
      D_Freq->callback((Fl_Callback*)cb_D_Freq);
      D_Freq->align(FL_ALIGN_RIGHT);
    } // Fl_Counter* D_Freq
    { D_Att = new Fl_Counter(5, 174, 70, 25, gettext("Attenuation"));
      D_Att->type(1);
      D_Att->labelsize(9);
      D_Att->minimum(0.001);
      D_Att->maximum(1);
      D_Att->step(0.01);
      D_Att->value(1);
      D_Att->callback((Fl_Callback*)cb_D_Att);
      D_Att->align(FL_ALIGN_RIGHT);
      D_Att->when(FL_WHEN_RELEASE);
    } // Fl_Counter* D_Att
    { Fl_Box* o = new Fl_Box(140, 110, 190, 100, gettext("F.Fine"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labelsize(13);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { D_Freq_F = new Fl_Counter(180, 140, 70, 25, gettext("Drawbar"));
      D_Freq_F->type(1);
      D_Freq_F->labelsize(9);
      D_Freq_F->minimum(1);
      D_Freq_F->maximum(10);
      D_Freq_F->step(1);
      D_Freq_F->value(1);
      D_Freq_F->callback((Fl_Callback*)cb_D_Freq_F);
      D_Freq_F->align(FL_ALIGN_RIGHT);
    } // Fl_Counter* D_Freq_F
    { D_FFval = new Fl_Counter(150, 175, 145, 25, gettext("F.Fine"));
      D_FFval->labelsize(9);
      D_FFval->minimum(-0.5);
      D_FFval->maximum(0.5);
      D_FFval->step(1e-05);
      D_FFval->callback((Fl_Callback*)cb_D_FFval);
      D_FFval->align(FL_ALIGN_RIGHT);
      D_FFval->when(FL_WHEN_RELEASE);
    } // Fl_Counter* D_FFval
    { Fl_Box* o = new Fl_Box(0, 280, 170, 55, gettext("Rotary Amplitude"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labelsize(13);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { D_Rot_Amp = new Fl_Counter(10, 305, 90, 25, gettext("Amplitude"));
      D_Rot_Amp->type(1);
      D_Rot_Amp->labelsize(9);
      D_Rot_Amp->minimum(100);
      D_Rot_Amp->maximum(14100);
      D_Rot_Amp->step(100);
      D_Rot_Amp->value(12800);
      D_Rot_Amp->callback((Fl_Callback*)cb_D_Rot_Amp);
      D_Rot_Amp->align(FL_ALIGN_RIGHT);
      D_Rot_Amp->when(FL_WHEN_RELEASE);
    } // Fl_Counter* D_Rot_Amp
    { Fl_Box* o = new Fl_Box(170, 280, 160, 55, gettext("Transpose"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labelsize(13);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { D_O_Transpose = new Fl_Counter(215, 305, 70, 25);
      D_O_Transpose->type(1);
      D_O_Transpose->labelsize(9);
      D_O_Transpose->minimum(-36);
      D_O_Transpose->maximum(24);
      D_O_Transpose->step(1);
      D_O_Transpose->callback((Fl_Callback*)cb_D_O_Transpose);
      D_O_Transpose->align(FL_ALIGN_RIGHT);
      D_O_Transpose->when(FL_WHEN_RELEASE);
    } // Fl_Counter* D_O_Transpose
    { Fl_Box* o = new Fl_Box(235, 1, 95, 76, gettext("Click"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_GRAY0);
      o->labelsize(13);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { D_c_attack = new Rueda(240, 25, 40, 40, gettext("Attack"));
      D_c_attack->box(FL_OSHADOW_BOX);
      D_c_attack->color(FL_BACKGROUND_COLOR);
      D_c_attack->selection_color(FL_INACTIVE_COLOR);
      D_c_attack->labeltype(FL_NORMAL_LABEL);
      D_c_attack->labelfont(0);
      D_c_attack->labelsize(9);
      D_c_attack->labelcolor(FL_FOREGROUND_COLOR);
      D_c_attack->minimum(5e-05);
      D_c_attack->maximum(0.0005);
      D_c_attack->step(1e-05);
      D_c_attack->value(0.0001);
      D_c_attack->callback((Fl_Callback*)cb_D_c_attack);
      D_c_attack->align(FL_ALIGN_BOTTOM);
      D_c_attack->when(FL_WHEN_CHANGED);
    } // Rueda* D_c_attack
    { D_c_decay = new Rueda(285, 25, 40, 41, gettext("Decay"));
      D_c_decay->box(FL_OSHADOW_BOX);
      D_c_decay->color(FL_BACKGROUND_COLOR);
      D_c_decay->selection_color(FL_INACTIVE_COLOR);
      D_c_decay->labeltype(FL_NORMAL_LABEL);
      D_c_decay->labelfont(0);
      D_c_decay->labelsize(9);
      D_c_decay->labelcolor(FL_FOREGROUND_COLOR);
      D_c_decay->minimum(0.001);
      D_c_decay->maximum(0.02);
      D_c_decay->step(0.001);
      D_c_decay->value(0.001);
      D_c_decay->callback((Fl_Callback*)cb_D_c_decay);
      D_c_decay->align(FL_ALIGN_BOTTOM);
      D_c_decay->when(FL_WHEN_CHANGED);
    } // Rueda* D_c_decay
    { Fl_Box* o = new Fl_Box(0, 335, 330, 100, gettext("Click"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labelsize(13);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { D_Click_Freq = new Fl_Counter(115, 365, 150, 25, gettext("Frequency1"));
      D_Click_Freq->labelsize(9);
      D_Click_Freq->minimum(10);
      D_Click_Freq->maximum(20000);
      D_Click_Freq->step(10);
      D_Click_Freq->value(200);
      D_Click_Freq->callback((Fl_Callback*)cb_D_Click_Freq);
      D_Click_Freq->align(FL_ALIGN_RIGHT);
      D_Click_Freq->when(FL_WHEN_RELEASE);
    } // Fl_Counter* D_Click_Freq
    { D_Click_Vol = new Rueda(5, 340, 35, 35, gettext("V.Attack"));
      D_Click_Vol->box(FL_OSHADOW_BOX);
      D_Click_Vol->color(FL_BACKGROUND_COLOR);
      D_Click_Vol->selection_color(FL_INACTIVE_COLOR);
      D_Click_Vol->labeltype(FL_NORMAL_LABEL);
      D_Click_Vol->labelfont(0);
      D_Click_Vol->labelsize(9);
      D_Click_Vol->labelcolor(FL_FOREGROUND_COLOR);
      D_Click_Vol->step(0.01);
      D_Click_Vol->value(0.1);
      D_Click_Vol->callback((Fl_Callback*)cb_D_Click_Vol);
      D_Click_Vol->align(FL_ALIGN_BOTTOM);
      D_Click_Vol->when(FL_WHEN_CHANGED);
    } // Rueda* D_Click_Vol
    { D_Click2_Vol = new Rueda(65, 340, 35, 35, gettext("V.Release"));
      D_Click2_Vol->box(FL_OSHADOW_BOX);
      D_Click2_Vol->color(FL_BACKGROUND_COLOR);
      D_Click2_Vol->selection_color(FL_INACTIVE_COLOR);
      D_Click2_Vol->labeltype(FL_NORMAL_LABEL);
      D_Click2_Vol->labelfont(0);
      D_Click2_Vol->labelsize(9);
      D_Click2_Vol->labelcolor(FL_FOREGROUND_COLOR);
      D_Click2_Vol->step(0.01);
      D_Click2_Vol->value(0.1);
      D_Click2_Vol->callback((Fl_Callback*)cb_D_Click2_Vol);
      D_Click2_Vol->align(FL_ALIGN_BOTTOM);
      D_Click2_Vol->when(FL_WHEN_CHANGED);
    } // Rueda* D_Click2_Vol
    { D_Click_Freq2 = new Fl_Counter(115, 400, 150, 25, gettext("Frequency2"));
      D_Click_Freq2->labelsize(9);
      D_Click_Freq2->minimum(10);
      D_Click_Freq2->maximum(20000);
      D_Click_Freq2->step(10);
      D_Click_Freq2->value(6700);
      D_Click_Freq2->callback((Fl_Callback*)cb_D_Click_Freq2);
      D_Click_Freq2->align(FL_ALIGN_RIGHT);
      D_Click_Freq2->when(FL_WHEN_RELEASE);
    } // Fl_Counter* D_Click_Freq2
    { D_Click_Vol1 = new Rueda(5, 385, 35, 35, gettext("V.Freq 1"));
      D_Click_Vol1->box(FL_OSHADOW_BOX);
      D_Click_Vol1->color(FL_BACKGROUND_COLOR);
      D_Click_Vol1->selection_color(FL_INACTIVE_COLOR);
      D_Click_Vol1->labeltype(FL_NORMAL_LABEL);
      D_Click_Vol1->labelfont(0);
      D_Click_Vol1->labelsize(9);
      D_Click_Vol1->labelcolor(FL_FOREGROUND_COLOR);
      D_Click_Vol1->step(0.01);
      D_Click_Vol1->value(1);
      D_Click_Vol1->callback((Fl_Callback*)cb_D_Click_Vol1);
      D_Click_Vol1->align(FL_ALIGN_BOTTOM);
      D_Click_Vol1->when(FL_WHEN_CHANGED);
    } // Rueda* D_Click_Vol1
    { D_Click_Vol2 = new Rueda(65, 385, 35, 35, gettext("V.Freq 2"));
      D_Click_Vol2->box(FL_OSHADOW_BOX);
      D_Click_Vol2->color(FL_BACKGROUND_COLOR);
      D_Click_Vol2->selection_color(FL_INACTIVE_COLOR);
      D_Click_Vol2->labeltype(FL_NORMAL_LABEL);
      D_Click_Vol2->labelfont(0);
      D_Click_Vol2->labelsize(9);
      D_Click_Vol2->labelcolor(FL_FOREGROUND_COLOR);
      D_Click_Vol2->step(0.01);
      D_Click_Vol2->value(1);
      D_Click_Vol2->callback((Fl_Callback*)cb_D_Click_Vol2);
      D_Click_Vol2->align(FL_ALIGN_BOTTOM);
      D_Click_Vol2->when(FL_WHEN_CHANGED);
    } // Rueda* D_Click_Vol2
    { Fl_Box* o = new Fl_Box(0, 210, 230, 70, gettext("Wave Type"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labelsize(13);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { D_Wave_Type = new Fl_Counter(5, 240, 70, 25, gettext("Drawbar"));
      D_Wave_Type->type(1);
      D_Wave_Type->labelsize(9);
      D_Wave_Type->minimum(1);
      D_Wave_Type->maximum(10);
      D_Wave_Type->step(1);
      D_Wave_Type->value(1);
      D_Wave_Type->callback((Fl_Callback*)cb_D_Wave_Type);
      D_Wave_Type->align(FL_ALIGN_RIGHT);
    } // Fl_Counter* D_Wave_Type
    { D_Wave_Type_Val = new Fl_Counter(125, 240, 70, 25, gettext("Wave"));
      D_Wave_Type_Val->type(1);
      D_Wave_Type_Val->labelsize(9);
      D_Wave_Type_Val->minimum(1);
      D_Wave_Type_Val->maximum(9);
      D_Wave_Type_Val->step(1);
      D_Wave_Type_Val->value(1);
      D_Wave_Type_Val->callback((Fl_Callback*)cb_D_Wave_Type_Val);
      D_Wave_Type_Val->align(FL_ALIGN_RIGHT);
      D_Wave_Type_Val->when(FL_WHEN_RELEASE);
    } // Fl_Counter* D_Wave_Type_Val
    { Fl_Box* o = new Fl_Box(230, 210, 100, 70, gettext("Keyboard Scaling"));
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labelsize(13);
      o->labelcolor((Fl_Color)4);
      o->align(129|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { D_KeybS = new Fl_Button(255, 250, 55, 25, gettext("On"));
      D_KeybS->type(1);
      D_KeybS->box(FL_PLASTIC_UP_BOX);
      D_KeybS->selection_color((Fl_Color)3);
      D_KeybS->labelsize(12);
      D_KeybS->callback((Fl_Callback*)cb_D_KeybS);
    } // Fl_Button* D_KeybS
    { Fl_Box* o = new Fl_Box(0, 435, 330, 45);
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labelsize(13);
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { D_Wave_Type_LFO = new Fl_Counter(30, 450, 70, 25, gettext("Tremolo Wave"));
      D_Wave_Type_LFO->type(1);
      D_Wave_Type_LFO->labelsize(9);
      D_Wave_Type_LFO->minimum(1);
      D_Wave_Type_LFO->maximum(9);
      D_Wave_Type_LFO->step(1);
      D_Wave_Type_LFO->value(1);
      D_Wave_Type_LFO->callback((Fl_Callback*)cb_D_Wave_Type_LFO);
      D_Wave_Type_LFO->align(FL_ALIGN_TOP);
      D_Wave_Type_LFO->when(FL_WHEN_RELEASE);
    } // Fl_Counter* D_Wave_Type_LFO
    { D_Wave_Type_Chorus = new Fl_Counter(230, 450, 70, 25, gettext("Chorus Wave"));
      D_Wave_Type_Chorus->type(1);
      D_Wave_Type_Chorus->labelsize(9);
      D_Wave_Type_Chorus->minimum(1);
      D_Wave_Type_Chorus->maximum(9);
      D_Wave_Type_Chorus->step(1);
      D_Wave_Type_Chorus->value(1);
      D_Wave_Type_Chorus->callback((Fl_Callback*)cb_D_Wave_Type_Chorus);
      D_Wave_Type_Chorus->align(FL_ALIGN_TOP);
      D_Wave_Type_Chorus->when(FL_WHEN_RELEASE);
    } // Fl_Counter* D_Wave_Type_Chorus
    { D_Wave_Type_Rotary = new Fl_Counter(130, 450, 70, 25, gettext("Rotary Wave"));
      D_Wave_Type_Rotary->type(1);
      D_Wave_Type_Rotary->labelsize(9);
      D_Wave_Type_Rotary->minimum(1);
      D_Wave_Type_Rotary->maximum(9);
      D_Wave_Type_Rotary->step(1);
      D_Wave_Type_Rotary->value(1);
      D_Wave_Type_Rotary->callback((Fl_Callback*)cb_D_Wave_Type_Rotary);
      D_Wave_Type_Rotary->align(FL_ALIGN_TOP);
      D_Wave_Type_Rotary->when(FL_WHEN_RELEASE);
    } // Fl_Counter* D_Wave_Type_Rotary
    ADSRwin->end();
  } // Fl_Double_Window* ADSRwin
  return ADSRwin;
}

HORGAN::HORGAN(int argc, char **argv,HOR *hor_) {
  Fl::scheme("gtk+");
fl_open_display();
XpmCreatePixmapFromData(fl_display, DefaultRootWindow(fl_display),(char **)horgand128,&p ,&mask, NULL);
Fl::visual(FL_RGB);
Fl::visual(FL_DOUBLE|FL_INDEX);

hor=hor_;
make_window();
HORwindow->icon((char *)p);
HORBank->icon((char *)p);
RitEdit->icon((char *)p);
ADSRwin->icon((char *)p);
aboutwindow->icon((char *)p);
Settingswindow->icon((char *)p);
char tmp[64];
sprintf(tmp,"%s v%s",PACKAGE,VERSION); 
HORwindow->copy_label(tmp);
Fl::focus(PANICO);
metebanco();
putmoresounds();
metelo();
Actu();
hor->PutPrim();
meteritmos();
Fl::background(163,163,163);
HORwindow->show(argc,argv);
put_icon(HORwindow);

void * v=MT;

Fl::add_timeout(1.0 * 0.04,tick,v);
}

void HORGAN::metelo() {
  char *temp;
int val=1;
float valf=0;
int x,y,w,h;

Fl_Preferences horgand (Fl_Preferences::USER, WEBSITE , PACKAGE);

horgand.get("Audio Out device",temp,"");
DMIN2->label(temp);

horgand.get("Rhythm Selected",val,2);
Fl_Button *pepe;
pepe = (Fl_Button*) RitButtons->child(val-1);
pepe->value(1);

Selected_Rhythm = val;
GetRit(Selected_Rhythm);

horgand.get("Rhythm Volume",valf,.5);        
hor->Rhythm_Volume=valf;


horgand.get("Bass Selected",val,1);
SetBassType(val);

switch (val)
        {
          case 0:
          Bass1->value(1);
          break;          
          case 1:
          Bass2->value(1);
          break; 
          case 2:
          Bass3->value(1);
        }        
        
horgand.get("Bass Volume",valf,.5);        
hor->Bass_Volume=valf;

horgand.get("Preset",val,0);
hor->cpreset=val;
if(commandline != 1) PutCombi(hor->cpreset);
else meteprog();

horgand.get("Split Point",val,0);
hor->split=val;
Split->value(hor->split);

horgand.get("Master_Tune",valf,1);
hor->mastertune=valf;
MasterT->value((int) ((hor->mastertune -1) * 1600));
calbtune();

horgand.get("Master Volume",valf,.7);
Master->value((int)(valf*100));
hor->Master_Volume=valf;

horgand.get("HORwindow X",x,1);
horgand.get("HORwindow Y",y,1);
horgand.get("HORwindow W",w,800);
horgand.get("HORwindow H",h,600);

HORwindow->resize(x,y,w,h);
}

void HORGAN::GetCombi(int i) {
  hor->Get_Combi_t(i);
}

void HORGAN::PutCombi(int i) {
  hor->cpreset= i;
hor->Put_Combi_t(i);

meteprog();
Actu();
sprintf(hor->temporal, "%02d",i);
DispNumber->label(hor->temporal);
CPrograma->value(i);
}

void HORGAN::MiraClientes() {
  FILE *fp;
char temp[128];
char temp1[128];
char *masque;
char *name;

BMidiIn->clear();
BMidiIn->add("Not Connected");

if ((fp = fopen ("/proc/asound/seq/clients", "r")) != NULL)
  {
    bzero (temp, sizeof (temp));

      while (fgets (temp, sizeof temp, fp) != NULL)
           {
             
            if (strstr(temp,"Port") != NULL)
             
           {  
             
             strcpy(temp1,temp);
             strtok(temp1,"\"");
             name=strtok(NULL,"\"");
             masque=strtok(NULL,")");
             
             if (masque[2]=='R' ) BMidiIn->add(name);
             
            } 
           } 
   }
   
   fclose(fp);
}

void HORGAN::MiraConfig() {
  int i = 1;

while (BMidiIn->text(i) != NULL)
{
if (strcmp(BMidiIn->text(i),hor->MID)==0 ) BMidiIn->select(i,1);
i++; 
}

switch (hor->Salida)
{
      case 1: 
             OSS->setonly();
             break;
      case 2: 
             Alsa->setonly();
             break;
      case 3:
             Jack->setonly();
             break;
      
}

BFiname->value(hor->BankFilename);
RFiname->value(hor->RhythmFilename);
}

void HORGAN::metebanco() {
  Banco1->label(hor->Banco[1].Name);
Banco2->label(hor->Banco[2].Name);
Banco3->label(hor->Banco[3].Name);
Banco4->label(hor->Banco[4].Name);
Banco5->label(hor->Banco[5].Name);
Banco6->label(hor->Banco[6].Name);
Banco7->label(hor->Banco[7].Name);
Banco8->label(hor->Banco[8].Name);
Banco9->label(hor->Banco[9].Name);
Banco10->label(hor->Banco[10].Name);
Banco11->label(hor->Banco[11].Name);
Banco12->label(hor->Banco[12].Name);
Banco13->label(hor->Banco[13].Name);
Banco14->label(hor->Banco[14].Name);
Banco15->label(hor->Banco[15].Name);
Banco16->label(hor->Banco[16].Name);
Banco17->label(hor->Banco[17].Name);
Banco18->label(hor->Banco[18].Name);
Banco19->label(hor->Banco[19].Name);
Banco20->label(hor->Banco[20].Name);
Banco21->label(hor->Banco[21].Name);
Banco22->label(hor->Banco[22].Name);
Banco23->label(hor->Banco[23].Name);
Banco24->label(hor->Banco[24].Name);
Banco25->label(hor->Banco[25].Name);
Banco26->label(hor->Banco[26].Name);
Banco27->label(hor->Banco[27].Name);
Banco28->label(hor->Banco[28].Name);
Banco29->label(hor->Banco[29].Name);
Banco30->label(hor->Banco[30].Name);
Banco31->label(hor->Banco[31].Name);
Banco32->label(hor->Banco[32].Name);
}

void HORGAN::Undo() {
  hor->MUndo();
meteprog();
}

void HORGAN::Actu() {
  if ( (CL->value() != 0 ) || (CF->value() !=0 ) ) {
           fl_alert("In Compare mode changes are deprecated");
           return;
           }

hor->MActu();
}

void HORGAN::Redo() {
  hor->MRedo();
meteprog();
}

void HORGAN::GetPrim() {
  hor->MGetPrim();
meteprog();
}

void HORGAN::tick(void* v) {
  Fl_Box *o = (Fl_Box*)v;
o->do_callback();
Fl::repeat_timeout(1.0 * 0.04,tick,v);
}

void HORGAN::GetRit(int Selected_Rhythm) {
  int i;
int rula;

char temp[512];
sprintf(temp,"%s/%s",DATADIR,hor->Rt[Selected_Rhythm].Nfile);


char *tmp = temp;

rula = hor->Select_Rhythm(tmp);
if (rula != 0) 
{ 
RitOn->value(0);
StStRiton->value(0);
hor->Rhythm_On = 0;
return;
}
Tempo->activate();
hor->bars = hor->Rt[Selected_Rhythm].bars;
hor->quarter_note = hor->Rt[Selected_Rhythm].quarter_note;

for (i = 1; i<=(4 * hor->quarter_note * hor->bars); i++)
{
 hor->Line_Bass_Note[i] = hor->Rt[Selected_Rhythm].Line_Bass_Note[i];
 hor->Line_Bass_Velocity[i] =hor->Rt[Selected_Rhythm].Line_Bass_Velocity[i];
}

hor->frame_total_size = (int) (hor->tempo * hor->sfinfo.frames);
hor->fractional_position = hor->frame_total_size / (4 * hor->quarter_note * hor->bars);
Tempo->activate();
}

void HORGAN::meteritmos() {
  Rit1->label(hor->Rt[1].Nom);
Rit2->label(hor->Rt[2].Nom);
Rit3->label(hor->Rt[3].Nom);
Rit4->label(hor->Rt[4].Nom);
Rit5->label(hor->Rt[5].Nom);
Rit6->label(hor->Rt[6].Nom);
Rit7->label(hor->Rt[7].Nom);
Rit8->label(hor->Rt[8].Nom);
Rit9->label(hor->Rt[9].Nom);
Rit10->label(hor->Rt[10].Nom);
Rit11->label(hor->Rt[11].Nom);
Rit12->label(hor->Rt[12].Nom);
Rit13->label(hor->Rt[13].Nom);
Rit14->label(hor->Rt[14].Nom);
Rit15->label(hor->Rt[15].Nom);
Rit16->label(hor->Rt[16].Nom);
Rit17->label(hor->Rt[17].Nom);
Rit18->label(hor->Rt[18].Nom);
Rit19->label(hor->Rt[19].Nom);
Rit20->label(hor->Rt[20].Nom);
}

void HORGAN::calbtrans() {
  hor->bass_transpose = hor->transpose;
if ( hor->bass_transpose > 12 ) hor->bass_transpose = hor->bass_transpose  % 12;
if ( hor->bass_transpose < -12 ) hor->bass_transpose = hor->bass_transpose  % 12;
if ( hor->transpose % 12 == 0) hor->bass_transpose = 0;
}

void HORGAN::calbtune() {
  int i,k;
float btuneval =  ((float) MasterT->value() / 100.0);

for(i=0; i<=11; i++)
{
 if ( MasterT->value() > 0)

  {  k = i + 1;
     if (i == 11) k = 0; 
     hor->AB[i].bmt =  (hor->AB[k].tune - hor->AB[i].tune) * btuneval;

     if (i == 6) hor->AB[6].bmt = (2.980 - hor->AB[6].tune) * btuneval;

  }

 if (MasterT->value()== 0 ) hor->AB[i].bmt = 0;

if ( MasterT->value() < 0)

  {  k = i - 1;
     if (i == 0) k = 11; 
     hor->AB[i].bmt =  (hor->AB[i].tune - hor->AB[k].tune)  * btuneval;
      if (i == 7) hor->AB[7].bmt = (hor->AB[7].tune - 1.3980 ) * btuneval;

  }
 

}
}

void HORGAN::EditRit(int i) {
  hor->ae = i;
RtName->value(hor->Rt[i].Nom);
RtFile->value(hor->Rt[i].Nfile);
RtBars->value(hor->Rt[i].bars);
RtDen->value(hor->Rt[i].quarter_note);
QuitaPon();
hor->pattern_bars= 1;
meteval();
char temp[512];
sprintf(temp,"%s - Bass Line Editor",hor->Rt[i].Nom);
RitEdit->label(temp);
RitEdit->position(HORwindow->x(),HORwindow->y()+40);
RitEdit->show();
put_icon(RitEdit);
Fl::focus(CloRit);
}

void HORGAN::QuitaPon() {
  switch(hor->Rt[hor->ae].quarter_note)
{
  case 2:
     B1G3->hide();
     B1G4->hide();
     lb9->hide();
     lb10->hide();
     lb11->hide();
     lb12->hide();
     lb13->hide();
     lb14->hide();
     lb15->hide();
     lb16->hide();
     lbv9->hide();
     lbv10->hide();
     lbv11->hide();
     lbv12->hide();
     lbv13->hide();
     lbv14->hide();
     lbv15->hide();
     lbv16->hide();
    break;

  case 3:
     B1G3->show();
     B1G4->hide();
     lb9->show();
     lb10->show();
     lb11->show();
     lb12->show();
     lb13->hide();
     lb14->hide();
     lb15->hide();
     lb16->hide();
     lbv9->show();
     lbv10->show();
     lbv11->show();
     lbv12->show();
     lbv13->hide();
     lbv14->hide();
     lbv15->hide();
     lbv16->hide();
     break;
  case 4:
     B1G3->show();
     B1G4->show();
     lb9->show();
     lb10->show();
     lb11->show();
     lb12->show();
     lb13->show();
     lb14->show();
     lb15->show();
     lb16->show();
     lbv9->show();
     lbv10->show();
     lbv11->show();
     lbv12->show();
     lbv13->show();
     lbv14->show();
     lbv15->show();
     lbv16->show();
     break;
}
}

void HORGAN::meteval() {
  int i = (hor->pattern_bars- 1) * (hor->Rt[hor->ae].quarter_note * 4);


lb1->value(hor->Rt[hor->ae].Line_Bass_Note[i+1]);
lb2->value(hor->Rt[hor->ae].Line_Bass_Note[i+2]);
lb3->value(hor->Rt[hor->ae].Line_Bass_Note[i+3]);
lb4->value(hor->Rt[hor->ae].Line_Bass_Note[i+4]);
lb5->value(hor->Rt[hor->ae].Line_Bass_Note[i+5]);
lb6->value(hor->Rt[hor->ae].Line_Bass_Note[i+6]);
lb7->value(hor->Rt[hor->ae].Line_Bass_Note[i+7]);
lb8->value(hor->Rt[hor->ae].Line_Bass_Note[i+8]);
lbv1->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+1]);
lbv2->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+2]);
lbv3->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+3]);
lbv4->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+4]);
lbv5->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+5]);
lbv6->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+6]);
lbv7->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+7]);
lbv8->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+8]);

if ( hor->Rt[hor->ae].quarter_note > 2)
{

lb9->value(hor->Rt[hor->ae].Line_Bass_Note[i+9]);
lb10->value(hor->Rt[hor->ae].Line_Bass_Note[i+10]);
lb11->value(hor->Rt[hor->ae].Line_Bass_Note[i+11]);
lb12->value(hor->Rt[hor->ae].Line_Bass_Note[i+12]);
lbv9->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+9]);
lbv10->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+10]);
lbv11->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+11]);
lbv12->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+12]);

}

if ( hor->Rt[hor->ae].quarter_note > 3)

{

lb13->value(hor->Rt[hor->ae].Line_Bass_Note[i+13]);
lb14->value(hor->Rt[hor->ae].Line_Bass_Note[i+14]);
lb15->value(hor->Rt[hor->ae].Line_Bass_Note[i+15]);
lb16->value(hor->Rt[hor->ae].Line_Bass_Note[i+16]);
lbv13->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+13]);
lbv14->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+14]);
lbv15->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+15]);
lbv16->value(hor->Rt[hor->ae].Line_Bass_Velocity[i+16]);
}

SBar->value(hor->pattern_bars);
}

void HORGAN::ApagaTodo() {
  Rit1->value(0);
Rit2->value(0);
Rit3->value(0);
Rit4->value(0);
Rit5->value(0);
Rit6->value(0);
Rit7->value(0);
Rit8->value(0);
Rit9->value(0);
Rit10->value(0);
Rit11->value(0);
Rit12->value(0);
Rit13->value(0);
Rit14->value(0);
Rit15->value(0);
Rit16->value(0);
Rit17->value(0);
Rit18->value(0);
Rit19->value(0);
Rit20->value(0);
}

void HORGAN::meteprog() {
  OMaster->value(hor->a[0].Organ_Master_Volume * 100.0);
RitVol->value(hor->Rhythm_Volume);
BassVol->value(hor->Bass_Volume);


Mar1->value(hor->a[0].Operator[1].marimba);
Mar2->value(hor->a[0].Operator[2].marimba);
Mar3->value(hor->a[0].Operator[3].marimba);
Mar4->value(hor->a[0].Operator[4].marimba);
Mar5->value(hor->a[0].Operator[5].marimba);
Mar6->value(hor->a[0].Operator[6].marimba);
Mar7->value(hor->a[0].Operator[7].marimba);
Mar8->value(hor->a[0].Operator[8].marimba);
Mar9->value(hor->a[0].Operator[9].marimba);
Mar10->value(hor->a[0].Operator[10].marimba);


V1->value(hor->a[0].Operator[1].volumen * 100);
V2->value(hor->a[0].Operator[2].volumen * 100);
V3->value(hor->a[0].Operator[3].volumen * 100);
V4->value(hor->a[0].Operator[4].volumen * 100);
V5->value(hor->a[0].Operator[5].volumen * 100);
V6->value(hor->a[0].Operator[6].volumen * 100);
V7->value(hor->a[0].Operator[7].volumen * 100);
V8->value(hor->a[0].Operator[8].volumen * 100);
V9->value(hor->a[0].Operator[9].volumen * 100);
V10->value(hor->a[0].Operator[10].volumen * 100);

H1->value(hor->a[0].Operator[1].harmonic);
H2->value(hor->a[0].Operator[2].harmonic);
H3->value(hor->a[0].Operator[3].harmonic);
H4->value(hor->a[0].Operator[4].harmonic);
H5->value(hor->a[0].Operator[5].harmonic);
H6->value(hor->a[0].Operator[6].harmonic);
H7->value(hor->a[0].Operator[7].harmonic);
H8->value(hor->a[0].Operator[8].harmonic);
H9->value(hor->a[0].Operator[9].harmonic);
H10->value(hor->a[0].Operator[10].harmonic);

NV1->value(hor->lasfreq[hor->a[0].Operator[1].harmonic]);
NV2->value(hor->lasfreq[hor->a[0].Operator[2].harmonic]);
NV3->value(hor->lasfreq[hor->a[0].Operator[3].harmonic]);
NV4->value(hor->lasfreq[hor->a[0].Operator[4].harmonic]);
NV5->value(hor->lasfreq[hor->a[0].Operator[5].harmonic]);
NV6->value(hor->lasfreq[hor->a[0].Operator[6].harmonic]);
NV7->value(hor->lasfreq[hor->a[0].Operator[7].harmonic]);
NV8->value(hor->lasfreq[hor->a[0].Operator[8].harmonic]);
NV9->value(hor->lasfreq[hor->a[0].Operator[9].harmonic]);
NV10->value(hor->lasfreq[hor->a[0].Operator[10].harmonic]);

Detune->value(hor->a[0].detune);
PLFOSpeed->value(hor->a[0].Pitch_LFO_Speed);
PLFODelay->value(hor->a[0].Pitch_LFO_Delay * 10);
LFOSpeed->value(hor->a[0].Rotary_LFO_Speed);
LFOPitch->value(hor->a[0].LFOpitch);
hor->Calc_LFO_Frequency();
Rota->value(hor->a[0].E_Rotary_On);
Transpose->value(hor->transpose);
calbtrans();
Nombre->value(hor->a[0].Name);
CPrograma->value(hor->cpreset);
EchoVol->value(hor->a[0].Delay_Volume * 100);
EchoDelay->value(hor->a[0].Delay_Delay / 65100.0);
EchoOn->value(hor->a[0].E_Delay_On);
Rev->value(hor->a[0].E_Reverb_On);

if (hor->a[0].E_Reverb_On == 1)
{

R1->activate();
R2->activate();
R3->activate();
R4->activate();
R5->activate();
R6->activate();
R7->activate();
R8->activate();
switch(hor->a[0].Reverb_Preset)
{
case 1:
R1->setonly();
break;
case 2:
R2->setonly();
break;
case 3:
R3->setonly();
break;
case 4:
R4->setonly();
break;
case 5:
R5->setonly();
break;
case 6:
R6->setonly();
break;
case 7:
R7->setonly();
break;
case 8:
R8->setonly();
break;
}
}
else
{
R1->value(0);
R2->value(0);
R3->value(0);
R4->value(0);
R5->value(0);
R6->value(0);
R7->value(0);
R8->value(0);
R1->deactivate();
R2->deactivate();
R3->deactivate();
R4->deactivate();
R5->deactivate();
R6->deactivate();
R7->deactivate();
R8->deactivate();
}


BClick->value(hor->a[0].Click);
ChorusOn->value(hor->a[0].E_Chorus_On);
ELFOAmplitude->value(hor->a[0].Chorus_LFO_Amplitude);
hor->Calc_Chorus_LFO_Frequency();
POPO->value(hor->a[0].Chorus_Delay);
ELFOSpeed->value(hor->a[0].Chorus_LFO_Speed);
ChorVol->value(hor->a[0].Chorus_Volume * 100);
BSync_Speed->value(hor->a[0].Speed_Sync);
metesynth();
hor->syncadsr();
}

void HORGAN::SetBassType(int type) {
  char temp[512];
const char *bassfiles[] = {"AcousticBass.wav", "FenderBass.wav", "FretlessBass.wav"};

sprintf(temp ,"%s/%s", DATADIR, bassfiles[type]);
hor->Select_Bass(temp);
hor->frames_bass = (int) (hor->sfinfob.frames / 2.0);
hor->Bass_Type=type;
}

void HORGAN::Guarda_Pref(int parte) {
  Fl_Preferences horgand (Fl_Preferences::USER, WEBSITE, PACKAGE);

if (parte==0)
{
horgand.set("HORwindow X",HORwindow->x());
horgand.set("HORwindow Y",HORwindow->y());
horgand.set("HORwindow W",HORwindow->w());
horgand.set("HORwindow H",HORwindow->h());

horgand.set("Bank Filename",hor->BankFilename);
horgand.set("Rhythm Filename",hor->RhythmFilename);


horgand.set("Type Chord Recognition",hor->TypeRecChord);
horgand.set("Split Point",hor->split);

horgand.set("Bass Selected",hor->Bass_Type);
horgand.set("Bass Volume",hor->Bass_Volume);
horgand.set("Rhythm Selected",Selected_Rhythm);
horgand.set("Rhythm Volume",hor->Rhythm_Volume);
horgand.set("Master Volume",hor->Master_Volume);
horgand.set("Master_Tune",hor->mastertune);
horgand.set("Transpose",hor->transpose);
horgand.set("Preset",hor->cpreset);
}

if (parte==1)
{

int i;
char *temp;

horgand.set("Bank Filename",hor->BankFilename);

i = BMidiIn->value();
temp = (char*) BMidiIn->text(i);
if (temp == NULL ) temp= strdup("Not Connected");
horgand.set("MIDI IN Device",temp);
bzero(temp,sizeof(temp));
temp = strdup("OSS");
if (OSS->value() != 0) temp = strdup("OSS");
if (Alsa->value() != 0) temp = strdup("Alsa");
if (Jack->value() != 0) temp =strdup("Jack");
horgand.set("Audio Out device",temp);
}

if (parte==2)
{ 
horgand.set("HORBank X",HORBank->x());
horgand.set("HORBank Y",HORBank->y());
horgand.set("HORBank W",HORBank->w());
horgand.set("HORBank H",HORBank->h());
}

if (parte==3)
{
horgand.set("Synth X",ADSRwin->x());
horgand.set("Synth Y",ADSRwin->y());
horgand.set("Synth W",ADSRwin->w());
horgand.set("Synth H",ADSRwin->h());
}
}

void HORGAN::ponvalor(float a) {
  char temp[32];
bzero(temp,sizeof(temp));
sprintf(temp,"%f",a);
Saca->copy_label(temp);
}

void HORGAN::metesynth() {
  D_attack->value(hor->a[0].attack);
D_decay->value(hor->a[0].decay);
D_sustain->value(hor->a[0].sustain);
D_p_attack->value(hor->a[0].p_attack);
D_p_decay->value(hor->a[0].p_decay);
D_Att->value(hor->a[0].Normalize[(int)D_Freq->value()]);
D_FFval->value(hor->a[0].Operator[(int)D_Freq_F->value()].harmonic_fine);
D_FFval->lstep(0.001);
D_Rot_Amp->value(hor->a[0].Rotary_LFO_Amplitude);
D_O_Transpose->value(hor->a[0].organ_transpose);
D_Freq_F->do_callback();
D_c_attack->value(hor->a[0].c_attack);
D_c_decay->value(hor->a[0].c_decay);
D_Click_Vol->value(hor->a[0].Click_Vol);
D_Click2_Vol->value(hor->a[0].Click2_Vol);
D_Click_Freq->value(hor->a[0].Click_Freq);
D_Click_Freq2->value(hor->a[0].Click_Freq2);
D_Click_Vol1->value(hor->a[0].Click_Vol1);
D_Click_Vol2->value(hor->a[0].Click_Vol2);
D_Wave_Type_Val->value(hor->a[0].Operator[(int)D_Wave_Type->value()].wave);
D_KeybS->value(hor->a[0].scaling);
D_Wave_Type_LFO->value(hor->a[0].LFO_Wave);
D_Wave_Type_Chorus->value(hor->a[0].Chorus_Wave);
D_Wave_Type_Rotary->value(hor->a[0].Rotary_Wave);
}

void HORGAN::put_icon(Fl_Window* window) {
  if (hints == NULL)
hints = XGetWMHints(fl_display, fl_xid(window));

hints->icon_pixmap=p;
hints->icon_mask=mask; 
hints->flags = IconPixmapHint | IconMaskHint;
XSetWMHints(fl_display, fl_xid(window), hints);
}

void HORGAN::putmoresounds() {
  char temp[256];
int i=0;
static const int sizes[]= {257,257,0};

MoreSounds->column_widths(sizes);
MoreSounds->clear();


bzero(temp,sizeof(temp));
sprintf(temp,"@c@b@B52@C1@_%s\t@c@b@B54@C1@_%s","Name","Bank");
MoreSounds->add(temp);


while (i < hor->Nums)
{ 

 bzero(temp,sizeof(temp));
 sprintf(temp,"@l@B52@_%s\t@c@B54@_%s",hor->NBP[i].Name,hor->NBP[i].Bank);

  MoreSounds->add(temp);
  i++;
}

if (i>1) MoreSounds->select(2);
}

void HORGAN::PutLoaded() {
  meteprog();
Actu();
hor->PutPrim();
sprintf(hor->temporal,"--");
DispNumber->label(hor->temporal);
}

void HORGAN::Syncronize(int i, float val) {
  switch(i)
{
  case 0:
      val=hor->a[0].Pitch_LFO_Speed;
      hor->a[0].Chorus_LFO_Speed = val;
      hor->a[0].Rotary_LFO_Speed = val;  
      ELFOSpeed->value(val);
      LFOSpeed->value(val);
      break;

  case 1:
      hor->a[0].Chorus_LFO_Speed = val;
      hor->a[0].Rotary_LFO_Speed = val;
      ELFOSpeed->value(val);
      LFOSpeed->value(val);
      break;
  
   case 2:
      hor->a[0].Chorus_LFO_Speed = val;
      hor->a[0].Pitch_LFO_Speed = val;
      ELFOSpeed->value(val);
      PLFOSpeed->value(val);
      break;
  
   case 3:
             
      hor->a[0].Pitch_LFO_Speed = val;
      hor->a[0].Rotary_LFO_Speed = val;
      PLFOSpeed->value(val);
      LFOSpeed->value(val);
      break;  
}
}
